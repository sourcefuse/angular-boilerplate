{
    "pipes": [],
    "interfaces": [
        {
            "name": "AndClause",
            "id": "interface-AndClause-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
            "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AnyObject {\n  [property: string]: any;\n}\nexport declare type ShortHandEqualType = string | number | boolean | Date;\nexport declare type Operators =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'inq'\n  | 'nin'\n  | 'between'\n  | 'exists'\n  | 'and'\n  | 'or'\n  | 'like'\n  | 'nlike'\n  | 'ilike'\n  | 'nilike'\n  | 'regexp';\n\nexport declare type KeyOf<MT extends object> = Exclude<\n  Extract<keyof MT, string>,\n  Operators\n>;\nexport declare type Condition<MT extends object> = {\n  [P in KeyOf<MT>]?: PredicateComparison<MT[P]> | (MT[P] & ShortHandEqualType);\n};\nexport declare type PredicateComparison<PT> = {\n  eq?: PT;\n  neq?: PT;\n  gt?: PT;\n  gte?: PT;\n  lt?: PT;\n  lte?: PT;\n  inq?: PT[];\n  nin?: PT[];\n  between?: [PT, PT];\n  exists?: boolean;\n  like?: PT;\n  nlike?: PT;\n  ilike?: PT;\n  nilike?: PT;\n  regexp?: string | RegExp;\n};\nexport interface AndClause<MT extends object> {\n  and: Where<MT>[];\n}\nexport interface OrClause<MT extends object> {\n  or: Where<MT>[];\n}\nexport declare type Where<MT extends object = AnyObject> =\n  | Condition<MT>\n  | AndClause<MT>\n  | OrClause<MT>;\n\nexport declare type Fields<MT = AnyObject> = {\n  [P in keyof MT]?: boolean;\n};\nexport interface Inclusion {\n  relation: string;\n  scope?: BackendFilter;\n}\nexport interface BackendFilter<MT extends object = AnyObject> {\n  /**\n   * The matching criteria\n   */\n  where?: Where<MT>;\n  /**\n   * To include/exclude fields\n   */\n  fields?: Fields<MT> | (keyof MT)[];\n  /**\n   * Sorting order for matched entities. Each item should be formatted as\n   * `fieldName ASC` or `fieldName DESC`.\n   * For example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n   *\n   * We might want to use `Order` in the future. Keep it as `string[]` for now\n   * for compatibility with LoopBack 3.x.\n   */\n  order?: string[];\n  /**\n   * Maximum number of entities\n   */\n  limit?: number;\n  /**\n   * Skip N number of entities\n   */\n  skip?: number;\n  /**\n   * Offset N number of entities. An alias for `skip`\n   */\n  offset?: number;\n  /**\n   * To include related objects\n   */\n  include?: Inclusion[];\n}\n",
            "properties": [
                {
                    "name": "and",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Where<MT>[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "AnyObject",
            "id": "interface-AnyObject-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
            "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AnyObject {\n  [property: string]: any;\n}\nexport declare type ShortHandEqualType = string | number | boolean | Date;\nexport declare type Operators =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'inq'\n  | 'nin'\n  | 'between'\n  | 'exists'\n  | 'and'\n  | 'or'\n  | 'like'\n  | 'nlike'\n  | 'ilike'\n  | 'nilike'\n  | 'regexp';\n\nexport declare type KeyOf<MT extends object> = Exclude<\n  Extract<keyof MT, string>,\n  Operators\n>;\nexport declare type Condition<MT extends object> = {\n  [P in KeyOf<MT>]?: PredicateComparison<MT[P]> | (MT[P] & ShortHandEqualType);\n};\nexport declare type PredicateComparison<PT> = {\n  eq?: PT;\n  neq?: PT;\n  gt?: PT;\n  gte?: PT;\n  lt?: PT;\n  lte?: PT;\n  inq?: PT[];\n  nin?: PT[];\n  between?: [PT, PT];\n  exists?: boolean;\n  like?: PT;\n  nlike?: PT;\n  ilike?: PT;\n  nilike?: PT;\n  regexp?: string | RegExp;\n};\nexport interface AndClause<MT extends object> {\n  and: Where<MT>[];\n}\nexport interface OrClause<MT extends object> {\n  or: Where<MT>[];\n}\nexport declare type Where<MT extends object = AnyObject> =\n  | Condition<MT>\n  | AndClause<MT>\n  | OrClause<MT>;\n\nexport declare type Fields<MT = AnyObject> = {\n  [P in keyof MT]?: boolean;\n};\nexport interface Inclusion {\n  relation: string;\n  scope?: BackendFilter;\n}\nexport interface BackendFilter<MT extends object = AnyObject> {\n  /**\n   * The matching criteria\n   */\n  where?: Where<MT>;\n  /**\n   * To include/exclude fields\n   */\n  fields?: Fields<MT> | (keyof MT)[];\n  /**\n   * Sorting order for matched entities. Each item should be formatted as\n   * `fieldName ASC` or `fieldName DESC`.\n   * For example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n   *\n   * We might want to use `Order` in the future. Keep it as `string[]` for now\n   * for compatibility with LoopBack 3.x.\n   */\n  order?: string[];\n  /**\n   * Maximum number of entities\n   */\n  limit?: number;\n  /**\n   * Skip N number of entities\n   */\n  skip?: number;\n  /**\n   * Offset N number of entities. An alias for `skip`\n   */\n  offset?: number;\n  /**\n   * To include related objects\n   */\n  include?: Inclusion[];\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "BackendFilter",
            "id": "interface-BackendFilter-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
            "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AnyObject {\n  [property: string]: any;\n}\nexport declare type ShortHandEqualType = string | number | boolean | Date;\nexport declare type Operators =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'inq'\n  | 'nin'\n  | 'between'\n  | 'exists'\n  | 'and'\n  | 'or'\n  | 'like'\n  | 'nlike'\n  | 'ilike'\n  | 'nilike'\n  | 'regexp';\n\nexport declare type KeyOf<MT extends object> = Exclude<\n  Extract<keyof MT, string>,\n  Operators\n>;\nexport declare type Condition<MT extends object> = {\n  [P in KeyOf<MT>]?: PredicateComparison<MT[P]> | (MT[P] & ShortHandEqualType);\n};\nexport declare type PredicateComparison<PT> = {\n  eq?: PT;\n  neq?: PT;\n  gt?: PT;\n  gte?: PT;\n  lt?: PT;\n  lte?: PT;\n  inq?: PT[];\n  nin?: PT[];\n  between?: [PT, PT];\n  exists?: boolean;\n  like?: PT;\n  nlike?: PT;\n  ilike?: PT;\n  nilike?: PT;\n  regexp?: string | RegExp;\n};\nexport interface AndClause<MT extends object> {\n  and: Where<MT>[];\n}\nexport interface OrClause<MT extends object> {\n  or: Where<MT>[];\n}\nexport declare type Where<MT extends object = AnyObject> =\n  | Condition<MT>\n  | AndClause<MT>\n  | OrClause<MT>;\n\nexport declare type Fields<MT = AnyObject> = {\n  [P in keyof MT]?: boolean;\n};\nexport interface Inclusion {\n  relation: string;\n  scope?: BackendFilter;\n}\nexport interface BackendFilter<MT extends object = AnyObject> {\n  /**\n   * The matching criteria\n   */\n  where?: Where<MT>;\n  /**\n   * To include/exclude fields\n   */\n  fields?: Fields<MT> | (keyof MT)[];\n  /**\n   * Sorting order for matched entities. Each item should be formatted as\n   * `fieldName ASC` or `fieldName DESC`.\n   * For example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n   *\n   * We might want to use `Order` in the future. Keep it as `string[]` for now\n   * for compatibility with LoopBack 3.x.\n   */\n  order?: string[];\n  /**\n   * Maximum number of entities\n   */\n  limit?: number;\n  /**\n   * Skip N number of entities\n   */\n  skip?: number;\n  /**\n   * Offset N number of entities. An alias for `skip`\n   */\n  offset?: number;\n  /**\n   * To include related objects\n   */\n  include?: Inclusion[];\n}\n",
            "properties": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fields<MT> | ()[]",
                    "optional": true,
                    "description": "<p>To include/exclude fields</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nTo include/exclude fields\n"
                },
                {
                    "name": "include",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Inclusion[]",
                    "optional": true,
                    "description": "<p>To include related objects</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nTo include related objects\n"
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Maximum number of entities</p>\n",
                    "line": 87,
                    "rawdescription": "\n\nMaximum number of entities\n"
                },
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Offset N number of entities. An alias for <code>skip</code></p>\n",
                    "line": 95,
                    "rawdescription": "\n\nOffset N number of entities. An alias for `skip`\n"
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>Sorting order for matched entities. Each item should be formatted as\n<code>fieldName ASC</code> or <code>fieldName DESC</code>.\nFor example: <code>[&#39;f1 ASC&#39;, &#39;f2 DESC&#39;, &#39;f3 ASC&#39;]</code>.</p>\n<p>We might want to use <code>Order</code> in the future. Keep it as <code>string[]</code> for now\nfor compatibility with LoopBack 3.x.</p>\n",
                    "line": 83,
                    "rawdescription": "\n\nSorting order for matched entities. Each item should be formatted as\n`fieldName ASC` or `fieldName DESC`.\nFor example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n\nWe might want to use `Order` in the future. Keep it as `string[]` for now\nfor compatibility with LoopBack 3.x.\n"
                },
                {
                    "name": "skip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Skip N number of entities</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nSkip N number of entities\n"
                },
                {
                    "name": "where",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Where<MT>",
                    "optional": true,
                    "description": "<p>The matching criteria</p>\n",
                    "line": 70,
                    "rawdescription": "\n\nThe matching criteria\n"
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "BaseTaskValue",
            "id": "interface-BaseTaskValue-903a2e044da7fc91ed34896e643069f9eb12d45bbe2e24e6aaa8f3691edb881743650ec10efa5eaa3b67d604761b2e928b9007ee794d6c7514f65592a96b6f28",
            "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TemplateRef, Type, ViewContainerRef} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {DIGITS, ONE_MIN} from '@project-lib/core/constants';\nimport {NbMenuItem} from '@nebular/theme';\nimport {RANDOM_SIZE} from './const';\nimport {gantt} from 'dhtmlx-gantt';\n\n/**\n * `GanttTaskValue` is a type that represents a task in the Gantt chart.\n *\n * The `GanttTaskValue` type is a generic type, which means that it can be used to represent a task\n * with any type of payload.\n *\n * The `GanttTaskValue` type has the following properties:\n *\n * @property {number} id - The unique identifier for the task.\n * @property {Date} start_date - The start date of the task.\n * @property {Date} end_date - The end date of the task.\n * @property {string} name - The name of the task.\n * @property {string} subtitle - A subtitle for the task.\n * @property render - This is used to render the task as a split task.\n * @property {number} parent - The id of the parent task.\n * @property {number} allocation - The percentage of the parent task that this task takes up.\n * @property {string} type - The type of the task. This is used to determine the color of the task.\n * @property {T} payload - This is the data that you want to pass to the task.\n * @property {boolean} open - This is a property that is used by the Gantt component to determine\n * whether or not the task is expanded.\n * @property {boolean} hasChildren - This is a boolean value that indicates whether the task has\n * children.\n */\nexport type GanttTaskValue<T> =\n  | GanttTaskValueWithAllocation<T>\n  | GanttTaskValueWithSubAllocation<T>;\n\nexport interface BaseTaskValue<T> {\n  id: string | number;\n  start_date: Date;\n  end_date: Date;\n  name: string;\n  subtitle?: string;\n  render?: 'split';\n  parent?: string | number;\n  type: string | number;\n  $open?: boolean;\n  hasChildren: boolean;\n  isParent: boolean;\n  overallocated?: boolean;\n  bar_height?: number;\n  row_height?: number;\n  payload: T;\n  classes?: string[];\n}\n\nexport function withSuballocations<T>(\n  task: GanttTaskValueWithSubAllocation<T> | GanttTaskValueWithAllocation<T>,\n): task is GanttTaskValueWithSubAllocation<T> {\n  return (\n    (task as GanttTaskValueWithSubAllocation<T>).subAllocations !== undefined\n  );\n}\n\nexport interface GanttTaskValueWithAllocation<T> extends BaseTaskValue<T> {\n  allocation: number;\n}\n\nexport interface GanttTaskValueWithSubAllocation<T> extends BaseTaskValue<T> {\n  subAllocations: SubAllocation[];\n}\n\nexport type GanttScaleService = {\n  scale: Timelines;\n  config(options?: GanttScaleOptions): {\n    unit: string;\n    step: number;\n    format: (date: Date) => string;\n    css?: (date: Date) => string;\n  }[];\n};\n\n// will be required for custom scale\nexport type GanttScaleOptions = {};\n\nexport type ContextItemClickEvent<T> = {\n  event: NbMenuItem;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttEvent<T> = {\n  event: string;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttRenderOptions<T = AnyObject> = {\n  contextItems: NbMenuItem[];\n  contextTemplate?: TemplateRef<AnyObject>;\n  viewContainerRef?: ViewContainerRef;\n  columnName?: string;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  columnComponent: Type<IColumnComponent<T>>;\n  barComponent: Type<IBarComponent<T>>;\n  columnWidth: number;\n  resizer: boolean;\n  searchPlaceholder?: string;\n  showSearch: boolean;\n  moveToToday: boolean;\n  highlightRange?: [Date, Date];\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n  defaultScale: Timelines;\n  markToday: boolean;\n  showTooltip?: boolean;\n  childIndent: boolean;\n};\n\nexport type GanttAllocationFields = {\n  startDate: Date;\n  endDate: Date;\n  allocation: number;\n};\n\nexport type GanttLib = typeof gantt;\n\nexport enum Timelines {\n  Weekly,\n  Monthly,\n  Quarterly,\n  Custom,\n}\n\nexport const GanttTimelineMap: {\n  [key in Timelines]: string;\n} = {\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n};\n\nexport abstract class GanttAdapter<T> {\n  abstract adaptFrom(data: T[]): GanttTaskValue<T>[];\n\n  /**\n   * \"Given a date, return a new date that is one day later.\"\n   *\n   * The first line of the function is a comment. Comments are ignored by the compiler\n   * @param {Date} date - The date to be incremented\n   * @returns A new Date object with the date set to the next day.\n   */\n  protected _nextDay(date: Date) {\n    return new Date(date.setDate(date.getDate() + 1));\n  }\n\n  /**\n   * It takes a date string or a Date object, converts it to a Date object, and then adds the timezone\n   * offset to it\n   * @param {string | Date} date - string | Date\n   * @returns A new Date object with the timezone offset added to the time.\n   */\n  protected _addTimezoneOffset(date: string | Date) {\n    let dateObject = new Date(date);\n    return new Date(\n      dateObject.getTime() + dateObject.getTimezoneOffset() * ONE_MIN,\n    );\n  }\n\n  protected _randomId() {\n    return Math.random()\n      .toString(RANDOM_SIZE)\n      .substring(DIGITS.TWO, DIGITS.NINE);\n  }\n}\n\nexport type CustomMouseEvent = {\n  target: HTMLElement;\n};\n\nexport type IColumnComponent<T> = {\n  item: GanttTaskValue<T>;\n  contextItems: NbMenuItem[];\n  active: boolean;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n};\n\nexport type IBarComponent<T> = {\n  item: GanttTaskValue<T>;\n};\n\nexport type SubAllocation<T = AnyObject> = {\n  percent: number;\n  allocation: number;\n  classes?: string[];\n} & T;\n\nexport type ContextItemFilter<T> = (item: GanttTaskValue<T>) => NbMenuItem[];\n\nexport function hasSubAllocation<T>(\n  item: GanttTaskValue<T>,\n): item is GanttTaskValueWithSubAllocation<T> {\n  return !!(item as GanttTaskValueWithSubAllocation<T>).subAllocations;\n}\n",
            "properties": [
                {
                    "name": "$open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bar_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "end_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hasChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isParent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "overallocated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "row_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "start_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "GanttTaskValueWithAllocation",
            "id": "interface-GanttTaskValueWithAllocation-903a2e044da7fc91ed34896e643069f9eb12d45bbe2e24e6aaa8f3691edb881743650ec10efa5eaa3b67d604761b2e928b9007ee794d6c7514f65592a96b6f28",
            "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TemplateRef, Type, ViewContainerRef} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {DIGITS, ONE_MIN} from '@project-lib/core/constants';\nimport {NbMenuItem} from '@nebular/theme';\nimport {RANDOM_SIZE} from './const';\nimport {gantt} from 'dhtmlx-gantt';\n\n/**\n * `GanttTaskValue` is a type that represents a task in the Gantt chart.\n *\n * The `GanttTaskValue` type is a generic type, which means that it can be used to represent a task\n * with any type of payload.\n *\n * The `GanttTaskValue` type has the following properties:\n *\n * @property {number} id - The unique identifier for the task.\n * @property {Date} start_date - The start date of the task.\n * @property {Date} end_date - The end date of the task.\n * @property {string} name - The name of the task.\n * @property {string} subtitle - A subtitle for the task.\n * @property render - This is used to render the task as a split task.\n * @property {number} parent - The id of the parent task.\n * @property {number} allocation - The percentage of the parent task that this task takes up.\n * @property {string} type - The type of the task. This is used to determine the color of the task.\n * @property {T} payload - This is the data that you want to pass to the task.\n * @property {boolean} open - This is a property that is used by the Gantt component to determine\n * whether or not the task is expanded.\n * @property {boolean} hasChildren - This is a boolean value that indicates whether the task has\n * children.\n */\nexport type GanttTaskValue<T> =\n  | GanttTaskValueWithAllocation<T>\n  | GanttTaskValueWithSubAllocation<T>;\n\nexport interface BaseTaskValue<T> {\n  id: string | number;\n  start_date: Date;\n  end_date: Date;\n  name: string;\n  subtitle?: string;\n  render?: 'split';\n  parent?: string | number;\n  type: string | number;\n  $open?: boolean;\n  hasChildren: boolean;\n  isParent: boolean;\n  overallocated?: boolean;\n  bar_height?: number;\n  row_height?: number;\n  payload: T;\n  classes?: string[];\n}\n\nexport function withSuballocations<T>(\n  task: GanttTaskValueWithSubAllocation<T> | GanttTaskValueWithAllocation<T>,\n): task is GanttTaskValueWithSubAllocation<T> {\n  return (\n    (task as GanttTaskValueWithSubAllocation<T>).subAllocations !== undefined\n  );\n}\n\nexport interface GanttTaskValueWithAllocation<T> extends BaseTaskValue<T> {\n  allocation: number;\n}\n\nexport interface GanttTaskValueWithSubAllocation<T> extends BaseTaskValue<T> {\n  subAllocations: SubAllocation[];\n}\n\nexport type GanttScaleService = {\n  scale: Timelines;\n  config(options?: GanttScaleOptions): {\n    unit: string;\n    step: number;\n    format: (date: Date) => string;\n    css?: (date: Date) => string;\n  }[];\n};\n\n// will be required for custom scale\nexport type GanttScaleOptions = {};\n\nexport type ContextItemClickEvent<T> = {\n  event: NbMenuItem;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttEvent<T> = {\n  event: string;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttRenderOptions<T = AnyObject> = {\n  contextItems: NbMenuItem[];\n  contextTemplate?: TemplateRef<AnyObject>;\n  viewContainerRef?: ViewContainerRef;\n  columnName?: string;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  columnComponent: Type<IColumnComponent<T>>;\n  barComponent: Type<IBarComponent<T>>;\n  columnWidth: number;\n  resizer: boolean;\n  searchPlaceholder?: string;\n  showSearch: boolean;\n  moveToToday: boolean;\n  highlightRange?: [Date, Date];\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n  defaultScale: Timelines;\n  markToday: boolean;\n  showTooltip?: boolean;\n  childIndent: boolean;\n};\n\nexport type GanttAllocationFields = {\n  startDate: Date;\n  endDate: Date;\n  allocation: number;\n};\n\nexport type GanttLib = typeof gantt;\n\nexport enum Timelines {\n  Weekly,\n  Monthly,\n  Quarterly,\n  Custom,\n}\n\nexport const GanttTimelineMap: {\n  [key in Timelines]: string;\n} = {\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n};\n\nexport abstract class GanttAdapter<T> {\n  abstract adaptFrom(data: T[]): GanttTaskValue<T>[];\n\n  /**\n   * \"Given a date, return a new date that is one day later.\"\n   *\n   * The first line of the function is a comment. Comments are ignored by the compiler\n   * @param {Date} date - The date to be incremented\n   * @returns A new Date object with the date set to the next day.\n   */\n  protected _nextDay(date: Date) {\n    return new Date(date.setDate(date.getDate() + 1));\n  }\n\n  /**\n   * It takes a date string or a Date object, converts it to a Date object, and then adds the timezone\n   * offset to it\n   * @param {string | Date} date - string | Date\n   * @returns A new Date object with the timezone offset added to the time.\n   */\n  protected _addTimezoneOffset(date: string | Date) {\n    let dateObject = new Date(date);\n    return new Date(\n      dateObject.getTime() + dateObject.getTimezoneOffset() * ONE_MIN,\n    );\n  }\n\n  protected _randomId() {\n    return Math.random()\n      .toString(RANDOM_SIZE)\n      .substring(DIGITS.TWO, DIGITS.NINE);\n  }\n}\n\nexport type CustomMouseEvent = {\n  target: HTMLElement;\n};\n\nexport type IColumnComponent<T> = {\n  item: GanttTaskValue<T>;\n  contextItems: NbMenuItem[];\n  active: boolean;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n};\n\nexport type IBarComponent<T> = {\n  item: GanttTaskValue<T>;\n};\n\nexport type SubAllocation<T = AnyObject> = {\n  percent: number;\n  allocation: number;\n  classes?: string[];\n} & T;\n\nexport type ContextItemFilter<T> = (item: GanttTaskValue<T>) => NbMenuItem[];\n\nexport function hasSubAllocation<T>(\n  item: GanttTaskValue<T>,\n): item is GanttTaskValueWithSubAllocation<T> {\n  return !!(item as GanttTaskValueWithSubAllocation<T>).subAllocations;\n}\n",
            "properties": [
                {
                    "name": "allocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "BaseTaskValue"
        },
        {
            "name": "GanttTaskValueWithSubAllocation",
            "id": "interface-GanttTaskValueWithSubAllocation-903a2e044da7fc91ed34896e643069f9eb12d45bbe2e24e6aaa8f3691edb881743650ec10efa5eaa3b67d604761b2e928b9007ee794d6c7514f65592a96b6f28",
            "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TemplateRef, Type, ViewContainerRef} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {DIGITS, ONE_MIN} from '@project-lib/core/constants';\nimport {NbMenuItem} from '@nebular/theme';\nimport {RANDOM_SIZE} from './const';\nimport {gantt} from 'dhtmlx-gantt';\n\n/**\n * `GanttTaskValue` is a type that represents a task in the Gantt chart.\n *\n * The `GanttTaskValue` type is a generic type, which means that it can be used to represent a task\n * with any type of payload.\n *\n * The `GanttTaskValue` type has the following properties:\n *\n * @property {number} id - The unique identifier for the task.\n * @property {Date} start_date - The start date of the task.\n * @property {Date} end_date - The end date of the task.\n * @property {string} name - The name of the task.\n * @property {string} subtitle - A subtitle for the task.\n * @property render - This is used to render the task as a split task.\n * @property {number} parent - The id of the parent task.\n * @property {number} allocation - The percentage of the parent task that this task takes up.\n * @property {string} type - The type of the task. This is used to determine the color of the task.\n * @property {T} payload - This is the data that you want to pass to the task.\n * @property {boolean} open - This is a property that is used by the Gantt component to determine\n * whether or not the task is expanded.\n * @property {boolean} hasChildren - This is a boolean value that indicates whether the task has\n * children.\n */\nexport type GanttTaskValue<T> =\n  | GanttTaskValueWithAllocation<T>\n  | GanttTaskValueWithSubAllocation<T>;\n\nexport interface BaseTaskValue<T> {\n  id: string | number;\n  start_date: Date;\n  end_date: Date;\n  name: string;\n  subtitle?: string;\n  render?: 'split';\n  parent?: string | number;\n  type: string | number;\n  $open?: boolean;\n  hasChildren: boolean;\n  isParent: boolean;\n  overallocated?: boolean;\n  bar_height?: number;\n  row_height?: number;\n  payload: T;\n  classes?: string[];\n}\n\nexport function withSuballocations<T>(\n  task: GanttTaskValueWithSubAllocation<T> | GanttTaskValueWithAllocation<T>,\n): task is GanttTaskValueWithSubAllocation<T> {\n  return (\n    (task as GanttTaskValueWithSubAllocation<T>).subAllocations !== undefined\n  );\n}\n\nexport interface GanttTaskValueWithAllocation<T> extends BaseTaskValue<T> {\n  allocation: number;\n}\n\nexport interface GanttTaskValueWithSubAllocation<T> extends BaseTaskValue<T> {\n  subAllocations: SubAllocation[];\n}\n\nexport type GanttScaleService = {\n  scale: Timelines;\n  config(options?: GanttScaleOptions): {\n    unit: string;\n    step: number;\n    format: (date: Date) => string;\n    css?: (date: Date) => string;\n  }[];\n};\n\n// will be required for custom scale\nexport type GanttScaleOptions = {};\n\nexport type ContextItemClickEvent<T> = {\n  event: NbMenuItem;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttEvent<T> = {\n  event: string;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttRenderOptions<T = AnyObject> = {\n  contextItems: NbMenuItem[];\n  contextTemplate?: TemplateRef<AnyObject>;\n  viewContainerRef?: ViewContainerRef;\n  columnName?: string;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  columnComponent: Type<IColumnComponent<T>>;\n  barComponent: Type<IBarComponent<T>>;\n  columnWidth: number;\n  resizer: boolean;\n  searchPlaceholder?: string;\n  showSearch: boolean;\n  moveToToday: boolean;\n  highlightRange?: [Date, Date];\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n  defaultScale: Timelines;\n  markToday: boolean;\n  showTooltip?: boolean;\n  childIndent: boolean;\n};\n\nexport type GanttAllocationFields = {\n  startDate: Date;\n  endDate: Date;\n  allocation: number;\n};\n\nexport type GanttLib = typeof gantt;\n\nexport enum Timelines {\n  Weekly,\n  Monthly,\n  Quarterly,\n  Custom,\n}\n\nexport const GanttTimelineMap: {\n  [key in Timelines]: string;\n} = {\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n};\n\nexport abstract class GanttAdapter<T> {\n  abstract adaptFrom(data: T[]): GanttTaskValue<T>[];\n\n  /**\n   * \"Given a date, return a new date that is one day later.\"\n   *\n   * The first line of the function is a comment. Comments are ignored by the compiler\n   * @param {Date} date - The date to be incremented\n   * @returns A new Date object with the date set to the next day.\n   */\n  protected _nextDay(date: Date) {\n    return new Date(date.setDate(date.getDate() + 1));\n  }\n\n  /**\n   * It takes a date string or a Date object, converts it to a Date object, and then adds the timezone\n   * offset to it\n   * @param {string | Date} date - string | Date\n   * @returns A new Date object with the timezone offset added to the time.\n   */\n  protected _addTimezoneOffset(date: string | Date) {\n    let dateObject = new Date(date);\n    return new Date(\n      dateObject.getTime() + dateObject.getTimezoneOffset() * ONE_MIN,\n    );\n  }\n\n  protected _randomId() {\n    return Math.random()\n      .toString(RANDOM_SIZE)\n      .substring(DIGITS.TWO, DIGITS.NINE);\n  }\n}\n\nexport type CustomMouseEvent = {\n  target: HTMLElement;\n};\n\nexport type IColumnComponent<T> = {\n  item: GanttTaskValue<T>;\n  contextItems: NbMenuItem[];\n  active: boolean;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n};\n\nexport type IBarComponent<T> = {\n  item: GanttTaskValue<T>;\n};\n\nexport type SubAllocation<T = AnyObject> = {\n  percent: number;\n  allocation: number;\n  classes?: string[];\n} & T;\n\nexport type ContextItemFilter<T> = (item: GanttTaskValue<T>) => NbMenuItem[];\n\nexport function hasSubAllocation<T>(\n  item: GanttTaskValue<T>,\n): item is GanttTaskValueWithSubAllocation<T> {\n  return !!(item as GanttTaskValueWithSubAllocation<T>).subAllocations;\n}\n",
            "properties": [
                {
                    "name": "subAllocations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubAllocation[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "BaseTaskValue"
        },
        {
            "name": "GroupConfig",
            "id": "interface-GroupConfig-357627a1bd6505d3501633294752098df13766900261f755d07d0890ebbd9cce2150ffe97c58fb8f2d03532884eeb422a57cc5b068839691473a43d95d0f8706",
            "file": "projects/arc-lib/src/lib/components/selector/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectState } from './constants';\n\nexport type ValueType<Mode, ResulType> =\n  | (Mode extends true ? ResulType[] : ResulType)\n  | null;\n\nexport type Panel<T> = {\n  width: number;\n  height: number;\n  state: SelectState;\n  list: T[];\n  removal: boolean;\n  allowInput: boolean;\n};\nexport interface GroupConfig<T> {\n  groupName?: string;\n  fieldName: keyof T;\n  value: T[keyof T] | '*';\n}\nexport type ItemTemplate<T, F extends keyof T> = {\n  item: T;\n  name: T[F];\n};",
            "properties": [
                {
                    "name": "fieldName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "groupName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | \"*\"",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAdapter",
            "id": "interface-IAdapter-07f9faf16036cb18d378a90652cfc68e1217e89f6e05166ad0f0a06fee38da3ca993858ad92ae982c02087f94bd5d63b55528e8397f1bf10813a1419df16dbd2",
            "file": "projects/arc-lib/src/lib/core/api/adapters/i-adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAdapter<T, R = T> {\n  adaptToModel(resp: any): T;\n  adaptFromModel(data: Partial<R>): any;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<R>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<R>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IAnyObject",
            "id": "interface-IAnyObject-9407cbfceadffc98974ad2362061cf6e4d5edf9b3c057f34f42903199cdf844b42cb5706febdd471039d58061d18f3f6f765a9e34793341d3977cc76448dfec6",
            "file": "projects/arc-lib/src/lib/core/i-any-object.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAnyObject {\n  [property: string]: any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-9407cbfceadffc98974ad2362061cf6e4d5edf9b3c057f34f42903199cdf844b42cb5706febdd471039d58061d18f3f6f765a9e34793341d3977cc76448dfec6",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "IApiService",
            "id": "interface-IApiService-15d0515922e63a53edd26ecf93d34e20bf627c2c4887ae7b2c6ce724632a87fdec3cd740df40b52f06b58084d038b834ea401b7cb9b24501cd2ee51d8fa3cce3",
            "file": "projects/arc-lib/src/lib/core/api/i-api-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nexport interface IApiService {\n  get(url: string, options?: object): Observable<any>;\n  post(url: string, payload: any | null, options?: object): Observable<any>;\n  patch(url: string, payload: any | null, options?: object): Observable<any>;\n  put(url: string, payload: any | null, options?: object): Observable<any>;\n  delete(url: string, options?: object): Observable<any>;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ICommand",
            "id": "interface-ICommand-bffd6ae4e898d1f9df3ca24a8403f67ade0633022ac37d1d0708d23c7a46777d4f688e1fd5b5dfc69dcf0fae7678c1f1be3fbcb24155e7c4a00a48d2c5d401e0",
            "file": "projects/arc-lib/src/lib/core/api/commands/i-command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nexport interface ICommand {\n  parameters?: any;\n  execute(): Observable<any>;\n}\n",
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "Inclusion",
            "id": "interface-Inclusion-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
            "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AnyObject {\n  [property: string]: any;\n}\nexport declare type ShortHandEqualType = string | number | boolean | Date;\nexport declare type Operators =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'inq'\n  | 'nin'\n  | 'between'\n  | 'exists'\n  | 'and'\n  | 'or'\n  | 'like'\n  | 'nlike'\n  | 'ilike'\n  | 'nilike'\n  | 'regexp';\n\nexport declare type KeyOf<MT extends object> = Exclude<\n  Extract<keyof MT, string>,\n  Operators\n>;\nexport declare type Condition<MT extends object> = {\n  [P in KeyOf<MT>]?: PredicateComparison<MT[P]> | (MT[P] & ShortHandEqualType);\n};\nexport declare type PredicateComparison<PT> = {\n  eq?: PT;\n  neq?: PT;\n  gt?: PT;\n  gte?: PT;\n  lt?: PT;\n  lte?: PT;\n  inq?: PT[];\n  nin?: PT[];\n  between?: [PT, PT];\n  exists?: boolean;\n  like?: PT;\n  nlike?: PT;\n  ilike?: PT;\n  nilike?: PT;\n  regexp?: string | RegExp;\n};\nexport interface AndClause<MT extends object> {\n  and: Where<MT>[];\n}\nexport interface OrClause<MT extends object> {\n  or: Where<MT>[];\n}\nexport declare type Where<MT extends object = AnyObject> =\n  | Condition<MT>\n  | AndClause<MT>\n  | OrClause<MT>;\n\nexport declare type Fields<MT = AnyObject> = {\n  [P in keyof MT]?: boolean;\n};\nexport interface Inclusion {\n  relation: string;\n  scope?: BackendFilter;\n}\nexport interface BackendFilter<MT extends object = AnyObject> {\n  /**\n   * The matching criteria\n   */\n  where?: Where<MT>;\n  /**\n   * To include/exclude fields\n   */\n  fields?: Fields<MT> | (keyof MT)[];\n  /**\n   * Sorting order for matched entities. Each item should be formatted as\n   * `fieldName ASC` or `fieldName DESC`.\n   * For example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n   *\n   * We might want to use `Order` in the future. Keep it as `string[]` for now\n   * for compatibility with LoopBack 3.x.\n   */\n  order?: string[];\n  /**\n   * Maximum number of entities\n   */\n  limit?: number;\n  /**\n   * Skip N number of entities\n   */\n  skip?: number;\n  /**\n   * Offset N number of entities. An alias for `skip`\n   */\n  offset?: number;\n  /**\n   * To include related objects\n   */\n  include?: Inclusion[];\n}\n",
            "properties": [
                {
                    "name": "relation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "scope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BackendFilter",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IToaster",
            "id": "interface-IToaster-56d7ac85f123cdd231d91130fec0bcc97b2afac2d5667f0a5da59e1f31cf95f9a61662bbc05f8d7a978508eb4042350e0e7dacbfd30a9dd5d77c35169790a979",
            "file": "projects/arc-lib/src/lib/core/toaster/i-toaster.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAnyObject } from '../i-any-object';\nimport { ToasterConfig } from './types';\n\nexport interface IToaster {\n  /**\n   * Shows toast with message, title and user config.\n   * */\n  show(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfig>\n  ): IAnyObject;\n  /**\n   * Shows success toast with message, title and user config.\n   * */\n  success(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfig>\n  ): IAnyObject;\n  /**\n   * Shows info toast with message, title and user config.\n   * */\n  info(message: any, title?: any, config?: Partial<ToasterConfig>): IAnyObject;\n  /**\n   * Shows warning toast with message, title and user config.\n   * */\n  warn(message: any, title?: any, config?: Partial<ToasterConfig>): IAnyObject;\n  /**\n   * Shows primary toast with message, title and user config.\n   * */\n  default(\n    message: any,\n    title?: any,\n    config?: Partial<ToasterConfig>\n  ): IAnyObject;\n  /**\n   * Shows danger toast with message, title and user config.\n   * */\n  error(message: any, title?: any, config?: Partial<ToasterConfig>): IAnyObject;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "default",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows primary toast with message, title and user config.\n",
                    "description": "<p>Shows primary toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows danger toast with message, title and user config.\n",
                    "description": "<p>Shows danger toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows info toast with message, title and user config.\n",
                    "description": "<p>Shows info toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows toast with message, title and user config.\n",
                    "description": "<p>Shows toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows success toast with message, title and user config.\n",
                    "description": "<p>Shows success toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows warning toast with message, title and user config.\n",
                    "description": "<p>Shows warning toast with message, title and user config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "OrClause",
            "id": "interface-OrClause-079e127f5ba71cf5910bfe6ea46f4d4fce824d5ea801eaa16e21bfca56b8e0db3d412c81428e8b2b7c1fd5fe38ecae4b0a8bda2b786bc318b53af648d009c9d8",
            "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AnyObject {\n  [property: string]: any;\n}\nexport declare type ShortHandEqualType = string | number | boolean | Date;\nexport declare type Operators =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'inq'\n  | 'nin'\n  | 'between'\n  | 'exists'\n  | 'and'\n  | 'or'\n  | 'like'\n  | 'nlike'\n  | 'ilike'\n  | 'nilike'\n  | 'regexp';\n\nexport declare type KeyOf<MT extends object> = Exclude<\n  Extract<keyof MT, string>,\n  Operators\n>;\nexport declare type Condition<MT extends object> = {\n  [P in KeyOf<MT>]?: PredicateComparison<MT[P]> | (MT[P] & ShortHandEqualType);\n};\nexport declare type PredicateComparison<PT> = {\n  eq?: PT;\n  neq?: PT;\n  gt?: PT;\n  gte?: PT;\n  lt?: PT;\n  lte?: PT;\n  inq?: PT[];\n  nin?: PT[];\n  between?: [PT, PT];\n  exists?: boolean;\n  like?: PT;\n  nlike?: PT;\n  ilike?: PT;\n  nilike?: PT;\n  regexp?: string | RegExp;\n};\nexport interface AndClause<MT extends object> {\n  and: Where<MT>[];\n}\nexport interface OrClause<MT extends object> {\n  or: Where<MT>[];\n}\nexport declare type Where<MT extends object = AnyObject> =\n  | Condition<MT>\n  | AndClause<MT>\n  | OrClause<MT>;\n\nexport declare type Fields<MT = AnyObject> = {\n  [P in keyof MT]?: boolean;\n};\nexport interface Inclusion {\n  relation: string;\n  scope?: BackendFilter;\n}\nexport interface BackendFilter<MT extends object = AnyObject> {\n  /**\n   * The matching criteria\n   */\n  where?: Where<MT>;\n  /**\n   * To include/exclude fields\n   */\n  fields?: Fields<MT> | (keyof MT)[];\n  /**\n   * Sorting order for matched entities. Each item should be formatted as\n   * `fieldName ASC` or `fieldName DESC`.\n   * For example: `['f1 ASC', 'f2 DESC', 'f3 ASC']`.\n   *\n   * We might want to use `Order` in the future. Keep it as `string[]` for now\n   * for compatibility with LoopBack 3.x.\n   */\n  order?: string[];\n  /**\n   * Maximum number of entities\n   */\n  limit?: number;\n  /**\n   * Skip N number of entities\n   */\n  skip?: number;\n  /**\n   * Offset N number of entities. An alias for `skip`\n   */\n  offset?: number;\n  /**\n   * To include related objects\n   */\n  include?: Inclusion[];\n}\n",
            "properties": [
                {
                    "name": "or",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Where<MT>[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "projects/arc-lib/src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AnyAdapter",
            "id": "injectable-AnyAdapter-159e3206243a32c0c9f852cc1be771334dfa1a3bdb9cf986728eff87304f8487d5a49936191f00465e56abe8952dffba26cf593d6bdcdffad5b4d7c3f71cdaee",
            "file": "projects/arc-lib/src/lib/core/api/adapters/any-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ApiModule } from '../api.module';\nimport { IAdapter } from './i-adapter';\n\n@Injectable({\n  providedIn: ApiModule,\n})\nexport class AnyAdapter implements IAdapter<any> {\n  adaptToModel(resp: any): any {\n    return resp;\n  }\n  adaptFromModel(data: any): any {\n    return data;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ApiService",
            "id": "injectable-ApiService-9a046018910e2b557ed5f89f3dafd6a26d91e12a25a313c73abec9e06b1ac80ea0f340bf50a1f53b5f4e21887070ca6c142620932b034497abc3f31b40b5d9cf",
            "file": "projects/arc-lib/src/lib/core/api/api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiModule } from './api.module';\nimport { IApiService } from './i-api-service';\n\n@Injectable({\n  providedIn: ApiModule,\n})\nexport class ApiService implements IApiService {\n  constructor(private readonly http: HttpClient) {}\n\n  public post(\n    url: string,\n    payload: any | null,\n    options?: object\n  ): Observable<any> {\n    return this.http.post(`${url}`, payload, options);\n  }\n\n  public get(url: string, options?: object): Observable<any> {\n    return this.http.get(`${url}`, options);\n  }\n\n  public patch(\n    url: string,\n    payload: any | null,\n    options?: object\n  ): Observable<any> {\n    return this.http.patch(`${url}`, payload, options);\n  }\n\n  public put(\n    url: string,\n    payload: any | null,\n    options?: object\n  ): Observable<any> {\n    return this.http.put(`${url}`, payload, options);\n  }\n\n  public delete(url: string, options?: object): Observable<any> {\n    return this.http.delete(`${url}`, options);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-770924970b096466150824eb79bb04f3a5789c0071bb1ca030336aa55eec18c08c4c36a6c09f2c53a1084fc52750800c3f9e003658dc77567db53991979251b1",
            "file": "projects/arc-lib/src/lib/core/auth/auth.service.ts",
            "properties": [
                {
                    "name": "authTokenSkipHeader",
                    "defaultValue": "new HttpHeaders().set(\n    AuthTokenSkipHeader,\n    '',\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "errorToastSkipHeader",
                    "defaultValue": "new HttpHeaders().set(\n    ErrToastSkipHeader,\n    '',\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_checkIfPermissionsAlreadyExists",
                    "args": [
                        {
                            "name": "permissions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "permissions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_loadPermissions",
                    "args": [
                        {
                            "name": "permissions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "permissions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_loadUserFromStore",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "authorize",
                    "args": [
                        {
                            "name": "secret",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "secret",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LoggedInUserDM>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "forgetPasswordReq",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginViaGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyResetPasswordLink",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {HttpErrorResponse, HttpHeaders} from '@angular/common/http';\nimport {Inject, Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AuthTokenSkipHeader, ErrToastSkipHeader} from '../constants';\nimport {UserSessionStoreService} from '../store';\nimport {NgxPermissionsService} from 'ngx-permissions';\nimport {\n  catchError,\n  from,\n  map,\n  Observable,\n  of,\n  switchMap,\n  take,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport {LoggedInUserAdapterService, LoginAdapterService} from './adapters';\nimport {CoreAuthModule} from './auth.module';\nimport {\n  ForgetPasswordCommand,\n  GetCurrentUserCommand,\n  GetTokenCommand,\n  LoginCommand,\n  LogoutCommand,\n  RefreshTokenCommand,\n  ResetPasswordCommand,\n  VerifyResetPasswordLinkCommand,\n} from './commands';\nimport {LoggedInUserDM, LoginModel} from './models';\nimport {AnyAdapter, ApiService} from '../api';\nimport {APP_CONFIG} from '@project-lib/app-config';\n\n@Injectable({\n  providedIn: CoreAuthModule,\n})\nexport class AuthService {\n  private readonly authTokenSkipHeader = new HttpHeaders().set(\n    AuthTokenSkipHeader,\n    '',\n  );\n  private readonly errorToastSkipHeader = new HttpHeaders().set(\n    ErrToastSkipHeader,\n    '',\n  );\n  constructor(\n    private readonly router: Router,\n    private readonly store: UserSessionStoreService,\n    private readonly apiService: ApiService,\n    private readonly currentUserAdapter: LoggedInUserAdapterService,\n    private readonly loginAdapter: LoginAdapterService,\n    private readonly anyAdapter: AnyAdapter,\n    private readonly permissionsService: NgxPermissionsService,\n    @Inject(APP_CONFIG) private readonly appConfig: any,\n  ) {}\n\n  public isLoggedIn(): Observable<boolean> {\n    return this.currentUser().pipe(\n      switchMap(user => {\n        if (user && user.id && this.store.getAccessToken()) {\n          return of(true);\n        } else {\n          return of(false);\n        }\n      }),\n    );\n  }\n\n  public currentUser(): Observable<LoggedInUserDM> {\n    const user = this._loadUserFromStore();\n    const hasToken = !!this.store.getAccessToken();\n    if (user) {\n      return of(user);\n    } else if (!hasToken) {\n      return throwError(() => new Error('No token available'));\n    } else {\n      const command: GetCurrentUserCommand<LoggedInUserDM> =\n        new GetCurrentUserCommand(\n          this.apiService,\n          this.currentUserAdapter,\n          this.appConfig,\n        );\n      return command.execute().pipe(\n        tap(res => {\n          this.store.setUser(res);\n          this._loadPermissions(res.permissions);\n        }),\n      );\n    }\n  }\n\n  // sonarignore:start\n  public forgetPasswordReq(email: string): Observable<any> {\n    const command: ForgetPasswordCommand<any> = new ForgetPasswordCommand(\n      this.apiService,\n      this.anyAdapter,\n      this.appConfig,\n    );\n    // sonarignore:end\n    command.parameters = {\n      data: {\n        username: email.toLowerCase(),\n        client_id: this.appConfig.clientId,\n        client_secret: this.appConfig.publicKey,\n      },\n      observe: 'response',\n      headers: this.authTokenSkipHeader,\n    };\n    return command.execute();\n  }\n\n  // sonarignore:start\n  public verifyResetPasswordLink(token: string): Observable<any> {\n    const command: VerifyResetPasswordLinkCommand<any> =\n      new VerifyResetPasswordLinkCommand(\n        this.apiService,\n        this.anyAdapter,\n        this.appConfig,\n      );\n    // sonarignore:end\n    command.parameters = {\n      data: {\n        token: token,\n        client_id: this.appConfig.clientId,\n      },\n      observe: 'response',\n      headers: this.authTokenSkipHeader,\n    };\n    return command.execute();\n  }\n\n  // sonarignore:start\n  public resetPassword(token: string, password: string): Observable<any> {\n    const command: ResetPasswordCommand<any> = new ResetPasswordCommand(\n      this.apiService,\n      this.anyAdapter,\n      this.appConfig,\n    );\n    // sonarignore:end\n    command.parameters = {\n      data: {\n        token,\n        password,\n        client_id: this.appConfig.clientId,\n        client_secret: this.appConfig.publicKey,\n      },\n      observe: 'response',\n      headers: this.authTokenSkipHeader,\n    };\n    return command.execute();\n  }\n\n  // sonarignore:start\n  public login(username: string, password: string): Observable<any> {\n    // sonarignore:end\n    this.store.setUser({\n      username,\n    } as LoggedInUserDM);\n    const command: LoginCommand<LoginModel> = new LoginCommand(\n      this.apiService,\n      this.loginAdapter,\n      this.appConfig,\n    );\n    command.parameters = {\n      data: {\n        username: username.toLowerCase(),\n        password,\n        clientId: this.appConfig.clientId,\n        clientSecret: this.appConfig.publicKey,\n      },\n      observe: 'response',\n      headers: this.authTokenSkipHeader,\n    };\n    return command.execute();\n  }\n\n  loginViaGoogle(): void {\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.action = `${this.appConfig.baseApiUrl}${this.appConfig.authServiceUrl}/auth/google`;\n    form.style.display = 'none';\n\n    const clientId = document.createElement('input');\n    clientId.type = 'hidden';\n    clientId.name = 'client_id';\n    clientId.value = this.appConfig.clientId;\n    form.appendChild(clientId);\n\n    const clientSecret = document.createElement('input');\n    clientSecret.type = 'hidden';\n    clientSecret.name = 'client_secret';\n    clientSecret.value = this.appConfig.publicKey;\n    form.appendChild(clientSecret);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  public authorize(secret: string): Observable<boolean> {\n    if (!secret) {\n      this.router.navigate(['auth/login']);\n    }\n    // sonarignore:start\n    const command: GetTokenCommand<any> = new GetTokenCommand(\n      this.apiService,\n      this.anyAdapter,\n      this.appConfig,\n    );\n    // sonarignore:end\n    command.parameters = {\n      data: {\n        clientId: this.appConfig.clientId,\n        code: secret,\n      },\n      headers: this.authTokenSkipHeader,\n    };\n    return command.execute().pipe(\n      map(response => {\n        const redirectTo =\n          this.store.getLastAccessedUrl() ?? this.appConfig.homePath;\n        if (response.accessToken && response.refreshToken) {\n          this.store.saveAccessToken(response.accessToken);\n          this.store.saveRefreshToken(response.refreshToken);\n          this.store.saveTokenExpiry(response.expires);\n          this.router.navigate([redirectTo]);\n          return true;\n        }\n        return false;\n      }),\n    );\n  }\n\n  // sonarignore:start\n  public refreshToken(): Observable<any> {\n    // sonarignore:end\n    const refreshToken = this.store.getRefreshToken();\n    if (!refreshToken) {\n      return of(false);\n    }\n    // sonarignore:start\n    const command: RefreshTokenCommand<any> = new RefreshTokenCommand(\n      this.apiService,\n      this.anyAdapter,\n      this.appConfig,\n    );\n    // sonarignore:end\n    command.parameters = {\n      data: {\n        refreshToken,\n      },\n      headers: this.errorToastSkipHeader,\n    };\n    return command\n      .execute()\n      .pipe(\n        tap({\n          next: response => {\n            if (response.accessToken && response.refreshToken) {\n              this.store.clearAll();\n              this.store.saveAccessToken(response.accessToken);\n              this.store.saveRefreshToken(response.refreshToken);\n              this.store.saveTokenExpiry(response.expires);\n            } else {\n              this.logout();\n            }\n          },\n          error: () => {\n            this.clearAllData();\n          },\n        }),\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  public logout(): Observable<boolean> {\n    const refreshToken = this.store.getRefreshToken();\n    if (!refreshToken) {\n      this.clearAllData();\n      return of(false);\n    }\n    const command: LogoutCommand<unknown> = new LogoutCommand(\n      this.apiService,\n      this.anyAdapter,\n      this.appConfig,\n    );\n    command.parameters = {\n      data: {\n        refreshToken,\n      },\n      headers: this.errorToastSkipHeader,\n    };\n    return command.execute().pipe(\n      map(() => {\n        this.clearAllData();\n        return true;\n      }),\n    );\n  }\n\n  private _loadPermissions(permissions: string[]) {\n    const perms = this.permissionsService.getPermissions();\n    const entityPerms: string[] = [];\n    for (const key in perms) {\n      if (\n        Object.prototype.hasOwnProperty.call(perms, key) &&\n        key.includes('/')\n      ) {\n        entityPerms.push(key);\n      }\n    }\n\n    this.permissionsService.loadPermissions([...permissions, ...entityPerms]);\n  }\n\n  private _loadUserFromStore() {\n    const user = this.store.getUser();\n\n    if (user && user.id) {\n      this._checkIfPermissionsAlreadyExists(user.permissions)\n        .pipe(\n          tap(exists => {\n            if (!exists) {\n              this._loadPermissions(user.permissions);\n            }\n          }),\n        )\n        .pipe(take(1))\n        .subscribe();\n      return user;\n    }\n    return null;\n  }\n\n  private _checkIfPermissionsAlreadyExists(permissions: string[]) {\n    return from(this.permissionsService.hasPermission(permissions));\n  }\n\n  private clearAllData() {\n    this.store.clearAll();\n    this.permissionsService.flushPermissions();\n    window.location.href = 'login';\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(\n      () => new Error('Something bad happened; please try again later.'),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentUserAdapter",
                        "type": "LoggedInUserAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginAdapter",
                        "type": "LoginAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "anyAdapter",
                        "type": "AnyAdapter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permissionsService",
                        "type": "NgxPermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentUserAdapter",
                        "type": "LoggedInUserAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginAdapter",
                        "type": "LoginAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "anyAdapter",
                        "type": "AnyAdapter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permissionsService",
                        "type": "NgxPermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CountAdapter",
            "id": "injectable-CountAdapter-32b7f061ec80751e46e920d8ffbdbb5b6aaab0f0c4b960bcad14bbbd69f4cc12d7740ca699c9c096842e200a26c819b534531cf8433fc5dc53af6b19411fc5de",
            "file": "projects/arc-lib/src/lib/core/api/adapters/count-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Count",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Count",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Count",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ApiModule } from '../api.module';\nimport { Count } from '../models';\nimport { IAdapter } from './i-adapter';\n\n@Injectable({\n  providedIn: ApiModule,\n})\nexport class CountAdapter implements IAdapter<Count> {\n  adaptToModel(resp: any): Count {\n    return new Count(resp);\n  }\n  adaptFromModel(data: Count): any {\n    return data;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "EnvAdapterService",
            "id": "injectable-EnvAdapterService-c417474620659dbe94ebeec6727d3426c5b6f01ded9d0c7f3a08f333d6db9e8fbca2e836c2b1140a7e28fae50301e69563eba375dce353d091a97da62c45f2fc",
            "file": "projects/arc-lib/src/lib/core/store/adapters/env-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NgxLoggerLevel } from 'ngx-logger';\nimport { StoreModule } from '../store.module';\nimport { IAdapter } from '../../api';\nimport { environment } from '@main-project/boiler/env/environment';\n\n@Injectable({\n  providedIn: StoreModule,\n})\nexport class EnvAdapterService implements IAdapter<typeof environment> {\n  adaptToModel(resp: any): typeof environment {\n    resp.logLevel = !!resp.logLevel\n      ? parseInt(resp.logLevel, 10)\n      : NgxLoggerLevel.ERROR;\n    return Object.assign({}, environment, resp);\n  }\n\n  adaptFromModel(data: Partial<typeof environment>): any {\n    return data;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "GanttService",
            "id": "injectable-GanttService-9242b2591220554c194442088719664bac08d7d8d8662596295e4ae82eee32eae1e2b373c6a0949ed1b4656c0c483800f02d1d1695bd4fd617794fd7d62e6ebb",
            "file": "projects/arc-lib/src/lib/components/gantt/services/gantt.service.ts",
            "properties": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GanttTaskValue<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_descSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_eventHandlers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_events",
                    "defaultValue": "new Subject<GanttEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_highlightRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[Date, Date]",
                    "optional": true,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_markToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_moveToToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_overlays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tooltipOverlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_eventHandler",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleHoverOnBar",
                    "args": [
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 425,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleKebabClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_hoverEventHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 403,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_renderComponent",
                    "args": [
                        {
                            "name": "c",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inputs",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inputs",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_renderHighlighMarker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_renderTodayMarker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_rerender",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_setColumnHeaders",
                    "args": [
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt clears all the tasks and links from the Gantt chart\n",
                    "description": "<p>It clears all the tasks and links from the Gantt chart</p>\n"
                },
                {
                    "name": "closeContextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt closes the current overlay\n",
                    "description": "<p>It closes the current overlay</p>\n"
                },
                {
                    "name": "convertToObservable",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "GanttEventName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "GanttEventName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt destroys the Gantt chart\n",
                    "description": "<p>It destroys the Gantt chart</p>\n"
                },
                {
                    "name": "feed",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt takes in an array of data, and feeds it to the Gantt chart.\nIt also calls the adapter to convert the data to the format that the Gantt chart expects.\n",
                    "description": "<p>It takes in an array of data, and feeds it to the Gantt chart.\nIt also calls the adapter to convert the data to the format that the Gantt chart expects.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5877,
                                "end": 5881,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5865,
                                "end": 5870,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The data that you want to feed to the Gantt chart.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 5871,
                                "end": 5876,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 5872,
                                    "end": 5875,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 185,
                                    "elementType": {
                                        "pos": 5872,
                                        "end": 5873,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 180,
                                        "typeName": {
                                            "pos": 5872,
                                            "end": 5873,
                                            "flags": 8388608,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 79,
                                            "escapedText": "T"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "highlightRange",
                    "args": [
                        {
                            "name": "range",
                            "type": "[Date, Date]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "[Date, Date]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [
                        {
                            "name": "container",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt renders the gantt chart in the container element.\nIt also sets the columns, templates, and other configurations.\nrendered.\n",
                    "description": "<p>It renders the gantt chart in the container element.\nIt also sets the columns, templates, and other configurations.\nrendered.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2214,
                                "end": 2223,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "container"
                            },
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2195,
                                "end": 2200,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>ElementRef - The container element where the gantt chart will be\nrendered.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2201,
                                "end": 2213,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 2202,
                                    "end": 2212,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 2202,
                                        "end": 2212,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "ElementRef"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 2339,
                                "end": 2346,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "GanttRenderOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2312,
                                "end": 2317,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>GanttRenderOptions</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2318,
                                "end": 2338,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 2319,
                                    "end": 2337,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 2319,
                                        "end": 2337,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "GanttRenderOptions"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "setScale",
                    "args": [
                        {
                            "name": "type",
                            "type": "Timelines",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "GanttScaleOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt sets the scale of the Gantt chart based on the type of timeline selected\n",
                    "description": "<p>It sets the scale of the Gantt chart based on the type of timeline selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6145,
                                "end": 6149,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "type"
                            },
                            "type": "Timelines",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6127,
                                "end": 6132,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Timelines - This is the enum that we created earlier.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 6133,
                                "end": 6144,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 6134,
                                    "end": 6143,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 6134,
                                        "end": 6143,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "Timelines"
                                    }
                                }
                            }
                        },
                        {
                            "name": "options",
                            "type": "GanttScaleOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 6219,
                                "end": 6225,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "render"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 6212,
                                "end": 6217,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>boolean - whether to render the gantt chart after the scale is set.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Overlay,\n  OverlayConfig,\n  OverlayPositionBuilder,\n  OverlayRef,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentFactoryResolver,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  Type,\n} from '@angular/core';\nimport {GanttEventName} from 'dhtmlx-gantt/codebase/dhtmlxgantt';\nimport {AnyObject} from '@project-lib/core/api';\nimport {debounceTime, fromEventPattern, Subject} from 'rxjs';\nimport {GanttHeaderComponent} from '../components/gantt-header/gantt-header.component';\nimport {GanttTooltipComponent} from '../components/gantt-tooltip/gantt-tooltip.component';\nimport {\n  BUFFER_FOR_TODAY,\n  GANTT,\n  GANTT_BAR_HEIGHT,\n  GANTT_ROW_HEIGHT,\n  GANTT_SCALES,\n  GANTT_SCALE_HEIGHT,\n  GANTT_SCROLL_BAR_HEIGHT,\n  GANTT_TIMELINE_MIN_WIDTH,\n  isHTMLELement,\n  RESIZER_WIDTH,\n} from '../const';\nimport {GanttEventTypes} from '../enum';\nimport {\n  GanttAdapter,\n  GanttEvent,\n  GanttLib,\n  GanttRenderOptions,\n  GanttScaleOptions,\n  GanttScaleService,\n  GanttTaskValue,\n  Timelines,\n} from '../types';\n\n@Injectable()\nexport class GanttService<T extends AnyObject, S extends AnyObject> {\n  private _data!: GanttTaskValue<T>[];\n  private _overlays: OverlayRef[] = [];\n  private _tooltipOverlay!: OverlayRef;\n  private _eventHandlers: string[] = [];\n  private _descSort!: boolean;\n  private _events = new Subject<GanttEvent<T>>();\n  private _moveToToday = true;\n  private _markToday = true;\n  private _highlightRange?: [Date, Date];\n  get events() {\n    return this._events.asObservable();\n  }\n  constructor(\n    private adapter: GanttAdapter<T>,\n    @Inject(GANTT)\n    private readonly gantt: GanttLib,\n    @Inject(GANTT_SCALES)\n    private readonly scales: GanttScaleService[],\n    // will have to use this for now\n    // refer https://github.com/angular/angular/issues/45263#issuecomment-1082530357\n    private resolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private overlay: Overlay,\n    private overlayPositionBuilder: OverlayPositionBuilder,\n  ) {}\n\n  /**\n   * It renders the gantt chart in the container element.\n   * It also sets the columns, templates, and other configurations.\n   * @param {ElementRef} container - ElementRef - The container element where the gantt chart will be\n   * rendered.\n   * @param {GanttRenderOptions} options - GanttRenderOptions\n   */\n  render(container: ElementRef, options: GanttRenderOptions<T>) {\n    this._setColumnHeaders(options);\n    this.gantt.templates.task_text = (start, end, task) =>\n      this._renderComponent(options.barComponent, {item: task});\n    this.gantt.templates.grid_open = task => '';\n    this.gantt.templates.grid_folder = task => '';\n\n    this._moveToToday = options.moveToToday;\n    this._highlightRange = options.highlightRange;\n    this._markToday = options.markToday;\n\n    this.gantt.config.row_height = GANTT_ROW_HEIGHT;\n    this.gantt.config.bar_height = GANTT_BAR_HEIGHT;\n    this.gantt.config.scale_height = GANTT_SCALE_HEIGHT;\n    this.gantt.config.readonly = true;\n    this.gantt.config.keyboard_navigation_cells = true;\n    this.gantt.config.layout = {\n      css: 'gantt_container',\n      rows: [\n        {\n          cols: [\n            {\n              view: 'grid',\n              id: 'grid',\n              scrollX: 'scrollHor',\n              scrollY: 'scrollVer',\n              width: options.columnWidth,\n            },\n            {\n              view: 'timeline',\n              id: 'timeline',\n              scrollX: 'scrollHor',\n              scrollY: 'scrollVer',\n              minWidth: GANTT_TIMELINE_MIN_WIDTH,\n            },\n            {view: 'scrollbar', scroll: 'y', id: 'scrollVer'},\n          ],\n        },\n        {\n          view: 'scrollbar',\n          scroll: 'x',\n          id: 'scrollHor',\n          height: GANTT_SCROLL_BAR_HEIGHT,\n        },\n      ],\n    };\n\n    if (options.resizer) {\n      this.gantt.config.layout.rows[0].cols.splice(1, 0, {\n        resizer: true,\n        width: RESIZER_WIDTH,\n      });\n    }\n\n    this.gantt.plugins({\n      keyboard_navigation: true,\n      marker: true,\n    });\n\n    // refer - https://forum.dhtmlx.com/t/custom-button-in-grid/34516\n    this._eventHandlers.push(\n      this.gantt.attachEvent(\n        'onTaskClick',\n        (id, e) => {\n          this._eventHandler(id, e, options);\n        },\n        {},\n      ),\n    );\n    this._eventHandlers.push(\n      this.gantt.attachEvent(\n        'onGridHeaderClick',\n        (id, e) => {\n          this._eventHandler(id, e, options);\n        },\n        {},\n      ),\n    );\n\n    const hoverObservable =\n      this.convertToObservable<[string, MouseEvent]>('onMouseMove');\n    const debounceTimeinMS = 100;\n    hoverObservable\n      .pipe(debounceTime(debounceTimeinMS))\n      .subscribe(([id, event]) => {\n        this._hoverEventHandler(event, options);\n      });\n\n    this._eventHandlers.push(\n      this.gantt.attachEvent(\n        'onBeforeGanttRender',\n        () => {\n          let range = this.gantt.getSubtaskDates();\n          if (range.start_date && range.end_date) {\n            const today = new Date();\n            today.setDate(today.getDate() + BUFFER_FOR_TODAY);\n            // as per requirement, need to always show current date in gantt\n            this.gantt.config.start_date = new Date(\n              Math.min(range.start_date.getTime(), today.getTime()),\n            );\n            this.gantt.config.end_date = new Date(\n              Math.max(range.end_date.getTime(), today.getTime()),\n            );\n          }\n        },\n        {},\n      ),\n    );\n    this.gantt.init(container.nativeElement);\n\n    this._renderTodayMarker();\n    this.setScale(options.defaultScale, false);\n  }\n\n  /**\n   * It takes in an array of data, and feeds it to the Gantt chart.\n   * It also calls the adapter to convert the data to the format that the Gantt chart expects.\n   * @param {T[]} data - The data that you want to feed to the Gantt chart.\n   */\n  feed(data: T[]) {\n    this._data = this.adapter.adaptFrom(data);\n    this._refresh();\n  }\n\n  /**\n   * It sets the scale of the Gantt chart based on the type of timeline selected\n   * @param {Timelines} type - Timelines - This is the enum that we created earlier.\n   * @param [render=true] - boolean - whether to render the gantt chart after the scale is set.\n   */\n  setScale(type: Timelines, options?: GanttScaleOptions, render = true) {\n    const scale = this.scales.find(s => s.scale === type);\n    if (scale) {\n      this.gantt.config.scales = scale.config(options);\n    }\n    if (scale && render) {\n      this._rerender();\n    }\n  }\n\n  highlightRange(range: [Date, Date]) {\n    this._highlightRange = range;\n    this._refresh();\n  }\n\n  /**\n   * It destroys the Gantt chart\n   */\n  destroy() {\n    this.gantt.destructor();\n  }\n\n  /**\n   * It clears all the tasks and links from the Gantt chart\n   */\n  clear() {\n    this.gantt.clearAll();\n    for (let handlers of this._eventHandlers) {\n      this.gantt.detachEvent(handlers);\n    }\n  }\n\n  /**\n   * It closes the current overlay\n   */\n  closeContextMenu() {\n    for (let overlay of this._overlays) {\n      overlay.dispose();\n    }\n  }\n\n  private _refresh() {\n    this.gantt.clearAll();\n    this.gantt.parse({\n      tasks: this._data ?? [],\n    });\n    if (this._descSort !== undefined) {\n      this.gantt.sort('name', this._descSort, undefined, true);\n    }\n    this._rerender();\n  }\n\n  private _renderHighlighMarker() {\n    if (this._highlightRange) {\n      this.gantt.addMarker?.({\n        start_date: this._highlightRange[0],\n        end_date: this._highlightRange[1],\n        css: 'highlight',\n      });\n    }\n  }\n\n  private _rerender() {\n    this.gantt.render();\n    this._renderTodayMarker();\n    this._renderHighlighMarker();\n    if (this._moveToToday) {\n      this.gantt.showDate(new Date());\n    }\n  }\n\n  private _renderTodayMarker() {\n    if (this._markToday) {\n      this.gantt.addMarker?.({\n        start_date: new Date(),\n        css: 'today',\n      });\n    }\n  }\n\n  private _setColumnHeaders(options: GanttRenderOptions<T>) {\n    this.gantt.config.columns = [\n      {\n        name: 'name',\n        label: this._renderComponent(GanttHeaderComponent, {\n          desc: this._descSort,\n          name: options.columnName,\n          searchPlaceholder: options.searchPlaceholder,\n          showSearch: options.showSearch,\n        }),\n        width: options.columnWidth,\n        tree: true,\n        template: (item: GanttTaskValue<T>) =>\n          this._renderComponent(options.columnComponent, {\n            item,\n            contextItems: options.contextItems,\n            showKebab: options.showKebab,\n            showParentInitials: options.showParentInitials,\n            showChildInitials: options.showChildInitials,\n            showOverallocatedIcon: options.showOverallocatedIcon,\n            contextItemFilter: options.contextItemFilter,\n          }),\n      },\n    ];\n  }\n\n  private _eventHandler(\n    id: number,\n    event: MouseEvent,\n    options: GanttRenderOptions<T>,\n  ) {\n    if (event.target && isHTMLELement(event.target)) {\n      const target = event.target.closest('[data-gantt-click]');\n      if (!target) {\n        return;\n      }\n      const attribute = target.getAttribute('data-gantt-click');\n      switch (attribute) {\n        case GanttEventTypes.Kebab:\n          this._handleKebabClick(id, event, options);\n          break;\n        case GanttEventTypes.Expand:\n          const task = this.gantt.getTask(id);\n          if (!task.$open) {\n            this.gantt.open(id);\n          } else {\n            this.gantt.close(id);\n          }\n          break;\n        case GanttEventTypes.Sort:\n          this._descSort = !this._descSort;\n          this._setColumnHeaders(options);\n          this.gantt.sort('name', this._descSort);\n          break;\n        default:\n          this._events.next({\n            task: this.gantt.getTask(id),\n            event: attribute ?? GanttEventTypes.Unknown,\n          });\n      }\n    }\n  }\n\n  private _renderComponent<T extends AnyObject>(\n    c: Type<T>,\n    inputs: Partial<{[key in keyof T]: T[keyof T]}>,\n  ) {\n    const factory = this.resolver.resolveComponentFactory(c);\n    const component = factory.create(this.injector);\n    Object.keys(inputs).forEach(key => {\n      const value = inputs[key];\n      if (value !== undefined) {\n        component.instance[key as keyof T] = value;\n      }\n    });\n    component.changeDetectorRef.detectChanges();\n    return component.location.nativeElement.innerHTML;\n  }\n\n  private _handleKebabClick(\n    id: number,\n    e: MouseEvent,\n    options: GanttRenderOptions<T>,\n  ) {\n    const positionStrategy = this.overlay\n      .position()\n      .global()\n      .left(e.clientX + 'px')\n      .top(e.clientY + 'px');\n    const configs = new OverlayConfig({\n      hasBackdrop: true,\n      panelClass: ['gantt-menu-overlay'],\n      backdropClass: 'modal-background',\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n    });\n    const overlay = this.overlay.create(configs);\n\n    if (options.contextTemplate && options.viewContainerRef) {\n      const item = this._data.find(d => d.id === id);\n      overlay.attach(\n        new TemplatePortal(options.contextTemplate, options.viewContainerRef, {\n          item,\n          contextItems:\n            (item && options.contextItemFilter?.(item)) ?? options.contextItems,\n        }),\n      );\n    }\n    overlay.backdropClick().subscribe(() => {\n      overlay.dispose();\n    });\n    this._overlays.push(overlay);\n  }\n\n  private _hoverEventHandler(\n    event: MouseEvent,\n    options: GanttRenderOptions<T>,\n  ) {\n    if (event.target && isHTMLELement(event.target) && options.showTooltip) {\n      const target = event.target.closest('[gantt-hover]');\n      const attribute = target?.getAttribute('gantt-hover')!;\n      if (target) {\n        switch (attribute) {\n          case GanttEventTypes.Bar:\n            this._handleHoverOnBar(target, 'gantt-bar-data');\n            return;\n          case GanttEventTypes.Tooltip:\n            return;\n        }\n      }\n    }\n    if (this._tooltipOverlay) {\n      this._tooltipOverlay.dispose();\n    }\n  }\n\n  private _handleHoverOnBar(target: Element, tag: string) {\n    if (this._tooltipOverlay) {\n      this._tooltipOverlay.dispose();\n    }\n\n    const offset = 35;\n    const positionStrategy = this.overlayPositionBuilder\n      .flexibleConnectedTo(target)\n      .withPositions([\n        {\n          originX: 'center',\n          originY: 'top',\n          overlayX: 'center',\n          overlayY: 'top',\n          offsetY: offset,\n        },\n        {\n          originX: 'center',\n          originY: 'top',\n          overlayX: 'center',\n          overlayY: 'bottom',\n          offsetY: -5,\n        },\n      ]);\n    const configs = new OverlayConfig({\n      panelClass: ['gantt-tooltip-overlay'],\n      positionStrategy,\n    });\n\n    this._tooltipOverlay = this.overlay.create(configs);\n\n    const attributeHover = target.getAttribute(tag);\n    if (attributeHover && tag === 'gantt-bar-data') {\n      const tooltipRef = this._tooltipOverlay.attach(\n        new ComponentPortal(GanttTooltipComponent),\n      );\n      tooltipRef.instance.item = JSON.parse(attributeHover);\n      this._overlays.push(this._tooltipOverlay);\n    }\n  }\n\n  convertToObservable<T>(eventName: GanttEventName) {\n    return fromEventPattern<T>(handler => {\n      this._eventHandlers.push(\n        this.gantt.attachEvent(\n          eventName,\n          (id, e) => {\n            handler(id, e);\n          },\n          {},\n        ),\n      );\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "adapter",
                        "type": "GanttAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gantt",
                        "type": "GanttLib",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scales",
                        "type": "GanttScaleService[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlayPositionBuilder",
                        "type": "OverlayPositionBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "adapter",
                        "type": "GanttAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gantt",
                        "type": "GanttLib",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scales",
                        "type": "GanttScaleService[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlayPositionBuilder",
                        "type": "OverlayPositionBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "events": {
                    "name": "events",
                    "getSignature": {
                        "name": "events",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "IconPacksManagerService",
            "id": "injectable-IconPacksManagerService-53603c1a94db31b957cab9695b30ba8ce4520161f438f10f279a456b98820f71f6e7c211564ab67f54466317cb4c69af5565178f0721d19a13a962def4e1746e",
            "file": "projects/arc-lib/src/lib/theme/services/icon-packs-manager.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "registerFontAwesome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function registers the font pack for Font Awesome icons\n with a specific icon class prefix.\n",
                    "description": "<p>This function registers the font pack for Font Awesome icons\n with a specific icon class prefix.</p>\n"
                },
                {
                    "name": "registerPack",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function registers a font pack with NbIconLibraries.\niconClassPrefix properties:\n",
                    "description": "<p>This function registers a font pack with NbIconLibraries.\niconClassPrefix properties:</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 656,
                                "end": 660,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 641,
                                "end": 646,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The name of the font pack being registered.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 647,
                                "end": 655,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 648,
                                    "end": 654,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 152
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 719,
                                "end": 725,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "params"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 713,
                                "end": 718,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The <code>params</code> parameter is an object that can contain the following optional\niconClassPrefix properties:</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "registerSvgs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction registers a custom SVG icon pack using the NbIconLibraries service with\na specific name and a set of SVG icons.\n",
                    "description": "<p>Function registers a custom SVG icon pack using the NbIconLibraries service with\na specific name and a set of SVG icons.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NbIconLibraries } from '@nebular/theme';\n\nimport { ThemeModule } from '../theme.module';\nimport { KEBAB_SVG } from './icons';\n\n@Injectable({\n  providedIn: ThemeModule,\n})\nexport class IconPacksManagerService {\n  constructor(private iconLibraries: NbIconLibraries) {}\n\n  /**\n   * This function registers the font pack for Font Awesome icons\n   *  with a specific icon class prefix.\n   */\n  registerFontAwesome() {\n    this.iconLibraries.registerFontPack('font-awesome', {\n      iconClassPrefix: 'fa',\n    });\n  }\n\n  /**\n   * This function registers a font pack with NbIconLibraries.\n   * @param {string} name - The name of the font pack being registered.\n   * @param params - The `params` parameter is an object that can contain the following optional\n   * iconClassPrefix properties:\n   */\n  registerPack(name: string, params: { iconClassPrefix?: string }) {\n    this.iconLibraries.registerFontPack(name, params);\n  }\n  /**\n   * Function registers a custom SVG icon pack using the NbIconLibraries service with\n   * a specific name and a set of SVG icons.\n   */\n  registerSvgs() {\n    this.iconLibraries.registerSvgPack('svg-boiler', {\n      kebab: KEBAB_SVG, // KEBAB_SVG is constant that provides a mapping of the SVG filenames to their corresponding URLs.\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconLibraries",
                        "type": "NbIconLibraries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "iconLibraries",
                        "type": "NbIconLibraries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoggedInUserAdapterService",
            "id": "injectable-LoggedInUserAdapterService-3097cc172a814658543fb7d091d6d5495d968cfb9d390146fe6f682b15eb7225cec8a9004f222a95e33811d99d75eeceb8797b58bb3991e3b3d0ba5ca027700b",
            "file": "projects/arc-lib/src/lib/core/auth/adapters/logged-in-user-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "LoggedInUserDM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "LoggedInUserDM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LoggedInUserDM",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IAdapter } from '../../api/adapters';\nimport { NameId } from '../../api/models';\nimport { CoreAuthModule } from '../auth.module';\nimport { LoggedInUserDM } from '../models';\n\n@Injectable({\n  providedIn: CoreAuthModule,\n})\nexport class LoggedInUserAdapterService implements IAdapter<LoggedInUserDM> {\n  adaptToModel(resp: any): LoggedInUserDM {\n    const user: LoggedInUserDM = new LoggedInUserDM();\n    if (resp) {\n      user.id = resp.id;\n      user.firstName = resp.firstName;\n      user.middleName = resp.middleName;\n      user.lastName = resp.lastName;\n      user.username = resp.username;\n      user.email = resp.email;\n      user.phone = resp.phone;\n      user.defaultTenantId = resp.defaultTenantId;\n      user.permissions = resp.permissions;\n      user.lastLogin = resp.lastLogin;\n      user.photo = resp.photoUrl;\n      user.tenant = new NameId({ id: resp.tenantId });\n      user.userTenantId = resp.userTenantId;\n      user.role = resp.role;\n    }\n    // Let it invoke constructor now in order to trigger data validations\n    return new LoggedInUserDM(user);\n  }\n\n  adaptFromModel(data: LoggedInUserDM): any {\n    return data;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LoginAdapterService",
            "id": "injectable-LoginAdapterService-a0d28ef7c2dcae8ca90d640bd62b0e978fbd86914f64b4a4e43f129548c16d9671952f7b64b44fbb05a72a12de92fff1f048b79a317a76b2447735b82018caae",
            "file": "projects/arc-lib/src/lib/core/auth/adapters/login-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "LoginModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "LoginModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { IAdapter } from '../..';\nimport { CoreAuthModule } from '../auth.module';\nimport { LoginModel } from '../models';\n\n@Injectable({\n  providedIn: CoreAuthModule,\n})\nexport class LoginAdapterService implements IAdapter<LoginModel> {\n  adaptToModel(resp: any): any {\n    return resp;\n  }\n  adaptFromModel(data: LoginModel): any {\n    return {\n      username: data.username,\n      password: data.password,\n      clientId: data.clientId,\n      clientSecret: data.clientSecret,\n    };\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MonthlyScaleService",
            "id": "injectable-MonthlyScaleService-11b6886c3e551610873931b4f3a2a11ca086e97623a88d191f9c4b6f3e40cb8510022602b0c4e3ca38cbaa805a76a0723121eadaadc7472463fb8b63b0080665",
            "file": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/monthly-scale.service.ts",
            "properties": [
                {
                    "name": "scale",
                    "defaultValue": "Timelines.Monthly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "config",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { GanttScaleUnits } from '../../enum';\nimport { GanttScaleService, Timelines } from '../../types';\n\n@Injectable()\nexport class MonthlyScaleService implements GanttScaleService {\n  scale = Timelines.Monthly;\n  config() {\n    return [\n      {\n        unit: GanttScaleUnits.Month,\n        step: 1,\n        format: (date: Date) =>\n          date.toLocaleString('default', { month: 'long', year: 'numeric' }),\n      },\n      {\n        unit: GanttScaleUnits.Week,\n        step: 1,\n        format: (date: Date) =>\n          date.toLocaleString('default', { day: '2-digit' }),\n      },\n    ];\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "NameIdAdapter",
            "id": "injectable-NameIdAdapter-997ee9f07a3925c8d5bc72529a6b68bb90994e517d81c72930c904d55aed9b439ff09c61f336027ff8aab128fa00702e709f44d9bdeb72cb8b90b927ef6f8a5a",
            "file": "projects/arc-lib/src/lib/core/api/adapters/name-id-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "NameId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "NameId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NameId",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ApiModule } from '../api.module';\nimport { NameId } from '../models';\nimport { IAdapter } from './i-adapter';\n\n@Injectable({\n  providedIn: ApiModule,\n})\nexport class NameIdAdapter implements IAdapter<NameId> {\n  adaptToModel(resp: any): NameId {\n    return new NameId(resp);\n  }\n  adaptFromModel(data: NameId): any {\n    return data;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "QuarterlyScaleService",
            "id": "injectable-QuarterlyScaleService-785f44c634d402d6696140f737cbde375d8df19874ae8cf48b31bc56e5e05b3d86d659635f5f3ee0ff0d9fc9d2ed79b32977c4bb7a99cf988a42e2caa1a1c2d4",
            "file": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/quarterly-scale.service.ts",
            "properties": [
                {
                    "name": "scale",
                    "defaultValue": "Timelines.Quarterly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "_formatQuarterScale",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "config",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MONTHS_IN_QUARTER } from '../../const';\nimport { GanttScaleUnits } from '../../enum';\nimport { GanttScaleService, Timelines } from '../../types';\n\n@Injectable()\nexport class QuarterlyScaleService implements GanttScaleService {\n  scale = Timelines.Quarterly;\n  config() {\n    return [\n      {\n        unit: GanttScaleUnits.Quarter,\n        step: 1,\n        format: (date: Date) => this._formatQuarterScale(date),\n      },\n      {\n        unit: GanttScaleUnits.Month,\n        step: 1,\n        format: (date: Date) =>\n          date.toLocaleString('default', { month: 'short' }),\n      },\n    ];\n  }\n\n  private _formatQuarterScale(date: Date) {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `Q${Math.ceil((month + 1) / MONTHS_IN_QUARTER)} ` + year;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ResizeService",
            "id": "injectable-ResizeService-2524fea4bad34e4a1dcddaf5944817fd2a9314b04a03ae963df1efd02201c2f5b1046680f1dbe63eb2661ca4e6d107b8e9aa769bea58dc453554d45ddb20ad1c",
            "file": "projects/arc-lib/src/lib/components/resize/resize.service.ts",
            "properties": [
                {
                    "name": "_resizeObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_stream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observe",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unobserver",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { filter, map, Subject } from 'rxjs';\nimport { ResizeEvent } from './types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ResizeService {\n  private _resizeObserver: ResizeObserver;\n  private _stream!: Subject<ResizeEvent & { target: Element }>;\n  constructor() {\n    this._resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const { target } = entry;\n        const { width, height } = entry.contentRect;\n        this._stream.next({ target, width, height });\n      }\n    });\n  }\n\n  listen(element: HTMLElement) {\n    if (!this._stream) {\n      this._stream = new Subject();\n    }\n    return this._stream.asObservable().pipe(\n      filter(({ target }) => target === element),\n      map(({ width, height }) => ({ width, height }))\n    );\n  }\n\n  observe(element: HTMLElement) {\n    this._resizeObserver.observe(element);\n  }\n\n  unobserver(element: HTMLElement) {\n    this._resizeObserver.unobserve(element);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "SystemStoreFacadeService",
            "id": "injectable-SystemStoreFacadeService-192a4a1c70086d6baa69a2b5d7a96fe8cbd0fc44108655d94166114b4bbbd00c3c08cc8c06cd1a74adc91b017198831f8d8d56c2b7b67e23e36fca00a053bf3d",
            "file": "projects/arc-lib/src/lib/core/store/system-store-facade.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_updateLogLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getEnvConfig",
                    "args": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthTokenSkipHeader } from '../../core/constants';\nimport { clone } from 'lodash';\nimport { NGXLogger } from 'ngx-logger';\nimport { InMemoryStorageService } from 'ngx-webstorage-service';\nimport { map, Observable, of } from 'rxjs';\nimport { EnvAdapterService } from './adapters/env-adapter.service';\nimport { GetEnvCommand } from './commands';\n\nimport { StoreKeys } from './store-keys.enum';\nimport { StoreModule } from './store.module';\nimport { ApiService } from '../api';\nimport { environment } from '@main-project/boiler/env/environment.prod';\n\n@Injectable({\n  providedIn: StoreModule,\n})\nexport class SystemStoreFacadeService {\n  constructor(\n    private readonly inMemoryStore: InMemoryStorageService,\n    private readonly envAdapter: EnvAdapterService,\n    private readonly apiService: ApiService,\n    private readonly logger: NGXLogger\n  ) {}\n\n  getEnvConfig(reset = false): Observable<typeof environment> {\n    const envInStore = this.inMemoryStore.get(StoreKeys.ENV_CONFIG);\n    if (!reset && envInStore) {\n      Object.assign(environment, envInStore);\n      return of(clone(environment));\n    } else {\n      const command: GetEnvCommand<typeof environment> = new GetEnvCommand(\n        this.apiService,\n        this.envAdapter\n      );\n      command.parameters = {\n        headers: new HttpHeaders().set(AuthTokenSkipHeader, ''),\n      };\n      return command.execute().pipe(\n        map((data) => {\n          Object.assign(environment, data);\n          const clonedEnv = clone(environment);\n          this.inMemoryStore.set(StoreKeys.ENV_CONFIG, clonedEnv);\n          this._updateLogLevel();\n          return clonedEnv;\n        })\n      );\n    }\n  }\n\n  private _updateLogLevel() {\n    // Get the current config\n    const config = this.logger.getConfigSnapshot();\n    // Updating only one field\n    config.level = environment.logLevel;\n    // Setting the config\n    this.logger.updateConfig(config);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "inMemoryStore",
                        "type": "InMemoryStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "envAdapter",
                        "type": "EnvAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "inMemoryStore",
                        "type": "InMemoryStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "envAdapter",
                        "type": "EnvAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToasterAdapterService",
            "id": "injectable-ToasterAdapterService-01f1684ab52a0d5e09412cd5f4ca4f0c8afb3a6efcf348aeeb6197235b00aeaa04be6b7455caa8ab1cc828db5c52a84754fdc07e12cf47872bf11ca9da7c2944",
            "file": "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adaptFromModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NbToastrConfig",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptToModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "NbToastrConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ToasterConfigExt",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "NbToastrConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {NbGlobalPhysicalPosition, NbToastrConfig} from '@nebular/theme';\nimport {isNull, isUndefined} from 'lodash';\nimport {ToasterConfigExt} from './types';\nimport {IAdapter} from '@project-lib/core/api';\n\nconst timeout = 4000;\n\n@Injectable({\n  providedIn: null,\n})\nexport class ToasterAdapterService implements IAdapter<ToasterConfigExt> {\n  adaptToModel(data: NbToastrConfig): ToasterConfigExt {\n    return new ToasterConfigExt();\n  }\n\n  adaptFromModel(data: Partial<ToasterConfigExt>): NbToastrConfig {\n    return new NbToastrConfig({\n      position: data.position ?? NbGlobalPhysicalPosition.TOP_RIGHT,\n      status: data.status ?? 'basic',\n      duration: data.timeout ?? timeout,\n      preventDuplicates:\n        isNull(data.preventDuplicates) ??\n        isUndefined(data.preventDuplicates) ??\n        data.preventDuplicates,\n      toastClass: data.toastClass,\n      hasIcon: data.hasIcon,\n      icon: data.icon,\n      destroyByClick: true,\n    });\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ToasterService",
            "id": "injectable-ToasterService-f317fad8fa56a36ce8f7b3db891713ddd4c0abc76fd2de252ca54b124046e0cb1868290066195278fd6bf3d2a66396c7e2f17bc966c7bed37f47a0b7a04cf9db",
            "file": "projects/arc-lib/src/lib/theme/toaster/toaster.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "default",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IAnyObject",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ToasterConfigExt>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {NbToastrService} from '@nebular/theme';\nimport {ToasterAdapterService} from './toaster-adapter.service';\nimport {ToasterConfigExt} from './types';\nimport {IToaster} from '@project-lib/core/toaster';\nimport {IAnyObject} from '@project-lib/core/i-any-object';\n@Injectable({\n  providedIn: null,\n})\nexport class ToasterService implements IToaster {\n  constructor(\n    private readonly toastrSvc: NbToastrService,\n    private readonly configAdapter: ToasterAdapterService,\n  ) {}\n\n  show(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf = config && this.configAdapter.adaptFromModel(config);\n    return this.toastrSvc.show(message, title, conf);\n  }\n\n  success(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf =\n      config &&\n      this.configAdapter.adaptFromModel(\n        Object.assign({}, config, {status: 'success'}),\n      );\n    return this.toastrSvc.success(message, title, conf);\n  }\n\n  info(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf =\n      config &&\n      this.configAdapter.adaptFromModel(\n        Object.assign({}, config, {status: 'info'}),\n      );\n    return this.toastrSvc.info(message, title, conf);\n  }\n\n  warn(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf =\n      config &&\n      this.configAdapter.adaptFromModel(\n        Object.assign({}, config, {status: 'warning'}),\n      );\n    return this.toastrSvc.warning(message, title, conf);\n  }\n\n  error(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf =\n      config &&\n      this.configAdapter.adaptFromModel(\n        Object.assign({}, config, {status: 'danger'}),\n      );\n    return this.toastrSvc.danger(message, title, conf);\n  }\n\n  default(\n    message: string,\n    title?: string,\n    config?: Partial<ToasterConfigExt>,\n  ): IAnyObject {\n    const conf =\n      config &&\n      this.configAdapter.adaptFromModel(\n        Object.assign({}, config, {status: 'basic'}),\n      );\n    return this.toastrSvc.default(message, title, conf);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastrSvc",
                        "type": "NbToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configAdapter",
                        "type": "ToasterAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "toastrSvc",
                        "type": "NbToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configAdapter",
                        "type": "ToasterAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TranslationService",
            "id": "injectable-TranslationService-cef67461a14ad92456b25c781e1c63b8dac5b133f4390b46a182ba19cab4a82aa0f815312c7203f04c354554fa1eabe97b2fa23d272a5bf5b59e2a445b9584fb",
            "file": "projects/arc-lib/src/lib/core/localization/translation.service.ts",
            "properties": [
                {
                    "name": "browserPreference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageTranslation | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "envPreference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageTranslation | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "prefPriority",
                    "defaultValue": "[\n    LanguagePreferences.UserPreference,\n    LanguagePreferences.TenantPreference,\n    LanguagePreferences.EnvPreference,\n    LanguagePreferences.BrowserPreference,\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tenantPreference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageTranslation | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userPreference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageTranslation | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "langs",
                            "type": "LanguageTranslation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[LanguageTranslation.ENGLISH]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langs",
                            "type": "LanguageTranslation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[LanguageTranslation.ENGLISH]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { map, Observable, of } from 'rxjs';\n\nimport { LanguageTranslation } from './language.enum';\nimport { LocalizationModule } from './localization.module';\n\nconst enum LanguagePreferences {\n  UserPreference,\n  TenantPreference,\n  EnvPreference,\n  BrowserPreference,\n}\n\n@Injectable({\n  providedIn: LocalizationModule,\n})\nexport class TranslationService {\n  constructor(public translate: TranslateService) {}\n\n  public userPreference: LanguageTranslation | undefined;\n\n  public tenantPreference: LanguageTranslation | undefined;\n\n  public envPreference: LanguageTranslation | undefined;\n\n  public browserPreference: LanguageTranslation | undefined;\n\n  protected prefPriority = [\n    LanguagePreferences.UserPreference,\n    LanguagePreferences.TenantPreference,\n    LanguagePreferences.EnvPreference,\n    LanguagePreferences.BrowserPreference,\n  ];\n\n  init(langs: LanguageTranslation[] = [LanguageTranslation.ENGLISH]) {\n    this.translate.addLangs(langs);\n\n    // this language will be used as a fallback when a translation isn't found in the current language\n    this.translate.setDefaultLang(LanguageTranslation.ENGLISH);\n\n    this.browserPreference = navigator.language as LanguageTranslation;\n  }\n\n  reset(): Observable<string> {\n    let langToSet: LanguageTranslation | undefined;\n    for (let i = 0; i < this.prefPriority.length; i++) {\n      if (\n        this.prefPriority[i] === LanguagePreferences.UserPreference &&\n        this.userPreference\n      ) {\n        langToSet = this.userPreference;\n        break;\n      } else if (\n        this.prefPriority[i] === LanguagePreferences.TenantPreference &&\n        this.tenantPreference\n      ) {\n        langToSet = this.tenantPreference;\n        break;\n      } else if (\n        this.prefPriority[i] === LanguagePreferences.EnvPreference &&\n        this.envPreference\n      ) {\n        langToSet = this.envPreference;\n        break;\n      } else if (\n        this.prefPriority[i] === LanguagePreferences.BrowserPreference &&\n        this.browserPreference\n      ) {\n        langToSet = this.browserPreference;\n        break;\n      } else {\n        // Unmatched preference\n        continue;\n      }\n    }\n\n    if (!langToSet) {\n      return of(this.translate.currentLang);\n    }\n    // get the available languages\n    const languages = this.translate.getLangs();\n    for (const lang of languages) {\n      if (langToSet.includes(lang)) {\n        return this.translate\n          .use(lang)\n          .pipe(map(() => this.translate.currentLang));\n      }\n    }\n\n    return of(this.translate.currentLang);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserSessionStoreService",
            "id": "injectable-UserSessionStoreService-a0d76c6696b8d488ac7b4ac3120d114b50bc8b9ade051aa7d005d8f5f402c8bcb63f8e04c7315b963351a5bf3dde2c365ab286d06dc47b9cf23063fb82cf03c4",
            "file": "projects/arc-lib/src/lib/core/store/user-session-store.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getLastAccessedUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTokenExpiry",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "LoggedInUserDM",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveAccessToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveLastAccessedUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRefreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTokenExpiry",
                    "args": [
                        {
                            "name": "expires",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "expires",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "LoggedInUserDM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "LoggedInUserDM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { InMemoryStorageService, StorageService } from 'ngx-webstorage-service';\n\nimport { LoggedInUserDM } from '../auth/models';\nimport { APPLICATION_STORE, APP_SESSION_STORE } from './keys';\nimport { StoreKeys } from './store-keys.enum';\nimport { StoreModule } from './store.module';\n\n@Injectable({\n  providedIn: StoreModule,\n})\nexport class UserSessionStoreService {\n  constructor(\n    @Inject(APPLICATION_STORE) private readonly store: StorageService,\n    @Inject(APP_SESSION_STORE) private readonly sessionStore: StorageService,\n\n    private readonly inMemoryStore: InMemoryStorageService\n  ) {}\n\n  public saveAccessToken(token: string): boolean {\n    this.store.set(StoreKeys.ACCESS_TOKEN_KEY, token);\n    return true;\n  }\n\n  public getAccessToken(): string {\n    return this.store.get(StoreKeys.ACCESS_TOKEN_KEY);\n  }\n\n  public removeAccessToken(): boolean {\n    this.store.remove(StoreKeys.ACCESS_TOKEN_KEY);\n    return true;\n  }\n\n  public saveRefreshToken(token: string): boolean {\n    this.store.set(StoreKeys.REFRESH_TOKEN_KEY, token);\n    return true;\n  }\n\n  public getRefreshToken(): string {\n    return this.store.get(StoreKeys.REFRESH_TOKEN_KEY);\n  }\n\n  public removeRefreshToken(): boolean {\n    this.store.remove(StoreKeys.REFRESH_TOKEN_KEY);\n    return true;\n  }\n\n  public saveTokenExpiry(expires: number): boolean {\n    this.store.set(StoreKeys.TOKEN_EXPIRY, expires);\n    return true;\n  }\n\n  public getTokenExpiry(): number {\n    return this.store.get(StoreKeys.TOKEN_EXPIRY);\n  }\n\n  public setUser(user: LoggedInUserDM): void {\n    this.inMemoryStore.set(StoreKeys.USER_KEY, user);\n  }\n\n  public getUser(): LoggedInUserDM {\n    return new LoggedInUserDM(this.inMemoryStore.get(StoreKeys.USER_KEY));\n  }\n\n  public saveLastAccessedUrl(url: string): void {\n    this.sessionStore.set(StoreKeys.LAST_ACCESSED_URL, url);\n  }\n\n  public getLastAccessedUrl(): string {\n    return this.sessionStore.get(StoreKeys.LAST_ACCESSED_URL);\n  }\n\n  public clearAll(): void {\n    this.sessionStore.remove(StoreKeys.LAST_ACCESSED_URL);\n    this.store.remove(StoreKeys.USER_KEY);\n    this.store.remove(StoreKeys.ACCESS_TOKEN_KEY);\n    this.store.remove(StoreKeys.REFRESH_TOKEN_KEY);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionStore",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inMemoryStore",
                        "type": "InMemoryStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionStore",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inMemoryStore",
                        "type": "InMemoryStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WeeklyScaleService",
            "id": "injectable-WeeklyScaleService-dc8599f94c81421e6bd5f3110796ec1bf208907309eee039743521fb5f118aa467744a567ee1a5930e83724ccc1377990f67a99f0778bca86d5bcab917e120c7",
            "file": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/weekly-scale.service.ts",
            "properties": [
                {
                    "name": "scale",
                    "defaultValue": "Timelines.Weekly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "_attachWeekendClass",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"weekend\" | \"weekday\"",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_formatWeeklyScale",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "config",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { GanttScaleUnits } from '../../enum';\nimport { GanttScaleService, Timelines } from '../../types';\n\n@Injectable()\nexport class WeeklyScaleService implements GanttScaleService {\n  scale = Timelines.Weekly;\n  config() {\n    return [\n      {\n        unit: GanttScaleUnits.Week,\n        step: 1,\n        format: (date: Date) => this._formatWeeklyScale(date),\n      },\n      {\n        unit: GanttScaleUnits.Day,\n        step: 1,\n        format: (date: Date) =>\n          date.toLocaleString('default', { weekday: 'short' }).charAt(0),\n        css: (date: Date) => this._attachWeekendClass(date),\n      },\n    ];\n  }\n\n  private _formatWeeklyScale(date: Date) {\n    const noOfDigits = 2;\n    return `${date.toLocaleString('default', { month: 'short' })} ${date\n      .getDate()\n      .toString()\n      .padStart(noOfDigits, '0')}, ${date.toLocaleString('default', {\n      year: 'numeric',\n    })}`;\n  }\n\n  private _attachWeekendClass(date: Date) {\n    const lastDay = 6;\n    if (date.getDay() == 0 || date.getDay() == lastDay) {\n      return 'weekend';\n    } else {\n      return 'weekday';\n    }\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-eded3140dc56c1c4dc2ba88703520162bbfa751a79317eaf5e207181190062600b9603a4f8e662c877c188e611eb8a0bf1541077911eb83ac9e6c49b7aed7030",
            "file": "projects/arc-lib/src/lib/core/auth/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_checkLogin",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateChild,\n  CanLoad,\n  Route,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\n\nimport {catchError, concatMap, Observable, of} from 'rxjs';\nimport {AuthService} from '../auth.service';\nimport {\n  SystemStoreFacadeService,\n  UserSessionStoreService,\n} from '@project-lib/core/store';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n  constructor(\n    private readonly store: UserSessionStoreService,\n    private readonly systemStore: SystemStoreFacadeService,\n    private readonly authService: AuthService,\n    private readonly router: Router,\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): Observable<boolean> {\n    if (route.queryParamMap.keys.length > 0) {\n      const code = route.queryParamMap.get('code');\n      if (code) {\n        return this.systemStore\n          .getEnvConfig()\n          .pipe(concatMap(() => this.authService.authorize(code)))\n          .pipe(concatMap(() => this._checkLogin(state.url)));\n      }\n    }\n    return this.systemStore\n      .getEnvConfig()\n      .pipe(concatMap(() => this._checkLogin(state.url)));\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): Observable<boolean> {\n    if (childRoute.queryParamMap.keys.length > 0) {\n      const code = childRoute.queryParamMap.get('code');\n      if (code) {\n        return this.systemStore\n          .getEnvConfig()\n          .pipe(concatMap(() => this.authService.authorize(code)))\n          .pipe(concatMap(() => this._checkLogin(state.url)));\n      }\n    }\n    return this.systemStore\n      .getEnvConfig()\n      .pipe(concatMap(() => this._checkLogin(state.url)));\n  }\n\n  canLoad(\n    route: Route,\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this._checkLogin(`/${route.path}`);\n  }\n\n  private _checkLogin(url: string): Observable<boolean> {\n    this.store.saveLastAccessedUrl(url);\n    return this.authService.isLoggedIn().pipe(\n      catchError(() => {\n        this.router.navigate(['/auth/login']);\n        return of(false);\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemStore",
                        "type": "SystemStoreFacadeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemStore",
                        "type": "SystemStoreFacadeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "LoggedInGuard",
            "id": "injectable-LoggedInGuard-596dae226ca268b66f5f72e180f9e0a8713eb87de02dca20c608e52f5ee3d4ce999be7fff0efdfb9b16134bfcd8b5f061aa443f53f22f4aca727616516cb2713",
            "file": "projects/arc-lib/src/lib/core/auth/guards/logged-in.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {CanActivate, Router} from '@angular/router';\nimport {catchError, concatMap, Observable, of, tap} from 'rxjs';\n\nimport {AuthService} from '../auth.service';\nimport {SystemStoreFacadeService} from '@project-lib/core/store';\nimport {environment} from '@main-project/boiler/env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoggedInGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly systemStore: SystemStoreFacadeService,\n    private readonly router: Router,\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.systemStore\n      .getEnvConfig()\n      .pipe(concatMap(() => this.authService.isLoggedIn()))\n      .pipe(\n        tap(res => {\n          if (res) {\n            const timeout = setTimeout(() => {\n              this.router.navigate([environment.homePath]);\n              clearTimeout(timeout);\n            });\n          }\n        }),\n        catchError(() => of(true)),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemStore",
                        "type": "SystemStoreFacadeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemStore",
                        "type": "SystemStoreFacadeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-f872e44f008eb7aa5bbfc0c3a85aad7921459dd0d431d58ca864dc9fcdfda70990b4167a8083a8a85d320145502401922d5040a347190146da2435bb035f44d0",
            "file": "projects/arc-lib/src/lib/core/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\n\nimport { AuthTokenSkipHeader } from '../constants';\nimport { UserSessionStoreService } from '../store';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private readonly sessionStore: UserSessionStoreService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router\n  ) {}\n\n  intercept(\n    req: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    if (req.headers.has(AuthTokenSkipHeader) || req.url.includes('i18n/')) {\n      const headers = req.headers.delete(AuthTokenSkipHeader);\n      return next.handle(req.clone({ headers }));\n    }\n    const authToken = this.sessionStore.getAccessToken();\n\n    if (authToken) {\n      return next.handle(\n        req.clone({ setHeaders: { Authorization: `Bearer ${authToken}` } })\n      );\n    } else {\n      if (this.route.snapshot.data['skipAuth']) {\n        this.router.navigate(['/']);\n      }\n      return throwError(() => 'Request forbidden ! No access token available.');\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionStore",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "sessionStore",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-2a251499d175e831233d37d48cf88121e4571f8f1b2c331ebb8ed22dcc665ac38b506e64430747a70d9b9416f8663bdc65d2d45f933e0bd31f2bbe86bcd9bc9e",
            "file": "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_checkTokenExpiryErr",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrMsg",
                    "args": [
                        {
                            "name": "err",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { get } from 'lodash';\nimport { catchError, Observable } from 'rxjs';\n\nimport { STATUS_CODE } from '../api';\nimport { ErrToastSkipHeader } from '../constants';\nimport { IToaster, TOASTER_SERVICE_KEY } from '../toaster';\n\nconst errorMsgConst = 'error.error.message.message';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(TOASTER_SERVICE_KEY) private readonly toastrService: IToaster\n  ) {}\n\n  private _checkTokenExpiryErr(error: HttpErrorResponse): boolean {\n    return (\n      error.status &&\n      error.status === STATUS_CODE.UNAUTHORIZED &&\n      error.error &&\n      error.error.error &&\n      error.error.error.message &&\n      error.error.error.message.message === 'TokenExpired'\n    );\n  }\n\n  intercept(\n    req: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    if (req.headers.has(ErrToastSkipHeader)) {\n      const headers = req.headers.delete(ErrToastSkipHeader);\n      return next.handle(req.clone({ headers }));\n    } else {\n      return next.handle(req).pipe(\n        catchError((error) => {\n          if (\n            error instanceof HttpErrorResponse &&\n            error.error.error?.statusCode === STATUS_CODE.UNPROCESSABLE_ENTITY\n          ) {\n            const errMsg = this.getErrMsg(error);\n            this.toastrService.error(errMsg, 'ERROR !');\n          } else if (\n            error instanceof HttpErrorResponse &&\n            !this._checkTokenExpiryErr(error)\n          ) {\n            let errMsg = get(error, errorMsgConst);\n            errMsg =\n              errMsg ||\n              get(\n                error,\n                'error.error.message',\n                'Some error occured. Please try again.'\n              );\n            this.toastrService.error(errMsg, 'ERROR !');\n          } else {\n            // Do nothing\n          }\n          throw error;\n        })\n      );\n    }\n  }\n\n  getErrMsg(err: { [key: string | symbol]: any }) {\n    const errDetails =\n      get(err, 'error.error.details') || get(err, 'error.error.message');\n    let errMsg: string | undefined;\n    if (Array.isArray(errDetails)) {\n      errDetails.forEach((item) => {\n        if (errMsg) {\n          errMsg = `${errMsg} \\\n            ${item.path} ${item.message}`;\n        } else {\n          errMsg = `${item.path} ${item.message}`;\n        }\n      });\n    } else {\n      errMsg = errDetails;\n    }\n    return errMsg;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastrService",
                        "type": "IToaster",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "toastrService",
                        "type": "IToaster",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "SessionRecoveryInterceptor",
            "id": "injectable-SessionRecoveryInterceptor-337e2cb31d668d5f3a940c8b8e20970d82b8826e9f811e3e18ced1931d230db65d179e4633195dfda4a930af47df92b726082441b54aea8b388a4194053481cd",
            "file": "projects/arc-lib/src/lib/core/interceptors/session-recovery.interceptor.ts",
            "properties": [
                {
                    "name": "_refreshSubject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_checkTokenExpiryErr",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_ifTokenExpired",
                    "args": [],
                    "optional": false,
                    "returnType": "Subject<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isStatusUnauthorized",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateHeader",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<any>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, Subject, switchMap, throwError } from 'rxjs';\n\nimport { STATUS_CODE } from '../api';\nimport { AuthService } from '../auth';\nimport { UserSessionStoreService } from '../store';\n\n@Injectable()\nexport class SessionRecoveryInterceptor implements HttpInterceptor {\n  constructor(\n    private readonly store: UserSessionStoreService,\n    private readonly sessionService: AuthService\n  ) {}\n\n  private _refreshSubject: Subject<any> = new Subject<any>();\n\n  private _ifTokenExpired() {\n    this._refreshSubject.subscribe({\n      complete: () => {\n        this._refreshSubject = new Subject<any>();\n      },\n    });\n    if (this._refreshSubject.observers.length === 1) {\n      this.sessionService.refreshToken().subscribe(this._refreshSubject);\n    }\n    return this._refreshSubject;\n  }\n\n  private _checkTokenExpiryErr(error: HttpErrorResponse): boolean {\n    return (\n      this._isStatusUnauthorized(error) &&\n      error.error &&\n      error.error.error &&\n      error.error.error.message &&\n      (error.error.error.message.message === 'TokenExpired' ||\n        error.error.error.message.message === 'TokenRevoked')\n    );\n  }\n\n  private _isStatusUnauthorized(error: HttpErrorResponse): boolean {\n    return !!error.status && error.status === STATUS_CODE.UNAUTHORIZED;\n  }\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      req.url.endsWith('/token-refresh') ||\n      req.url.endsWith('/verify-token')\n    ) {\n      return next.handle(req);\n    } else {\n      return next.handle(req).pipe(\n        catchError((error, caught) => {\n          if (error instanceof HttpErrorResponse) {\n            if (this._checkTokenExpiryErr(error)) {\n              return this._ifTokenExpired().pipe(\n                switchMap(() => next.handle(this.updateHeader(req)))\n              );\n            } else {\n              return throwError(() => error);\n            }\n          }\n          return caught;\n        })\n      );\n    }\n  }\n\n  updateHeader(req: HttpRequest<any>) {\n    const authToken = this.store.getAccessToken();\n    if (req.url.endsWith('/logout')) {\n      req = req.clone({\n        body: { refreshToken: this.store.getRefreshToken() },\n        headers: req.headers.set('Authorization', `Bearer ${authToken}`),\n      });\n    } else {\n      req = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${authToken}`),\n      });\n    }\n    return req;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "UserSessionStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthServiceMock",
            "id": "class-AuthServiceMock-afef82003219d6139ff758339ba50115460776ef693c23ff39911120652b04607534adb3143d8e203c1b44aba5211a34651a9dae4330ed81209d1c5143207310",
            "file": "projects/arc-lib/src/stories/components/main.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Meta, moduleMetadata, StoryObj} from '@storybook/angular'; // Import your component\nimport {\n  NbLayoutModule,\n  NbActionsModule,\n  NbSidebarModule,\n  NbMenuModule,\n  NbUserModule,\n  NbContextMenuModule,\n  NbSidebarService,\n  NbMenuService,\n  NbThemeService,\n  NbThemeModule,\n} from '@nebular/theme'; // Import any necessary Nebular modules\nimport {MainComponent} from '@main-project/boiler/main/main.component';\nimport {ActivatedRoute} from '@angular/router';\nimport {AuthService} from '@project-lib/core/auth';\nimport {IconPacksManagerService} from '@project-lib/theme/services';\nimport {NbMenuInternalService} from '@nebular/theme/components/menu/menu.service';\nimport {ThemeModule} from '../../public-api';\nimport {MainRoutingModule} from '@main-project/boiler/main/main-routing.module';\nimport {HomeModule} from '@main-project/boiler/main/home/home.module';\nimport {CommonModule} from '@angular/common';\nimport {of} from 'rxjs';\n\nclass AuthServiceMock {\n  currentUser() {\n    return of('xyz');\n  }\n}\n\nclass MenuServiceMock {\n  onItemClick() {\n    return of('xyz');\n  }\n  onSubmenuToggle() {\n    return of('abc');\n  }\n}\n\nclass NbSidebarServiceMock {\n  onToggle() {\n    return of('xyz');\n  }\n  onExpand() {\n    return of('abc');\n  }\n  onCollapse() {\n    return of('egf');\n  }\n  onCompact() {\n    return of('ab');\n  }\n}\n\nconst meta = {\n  title: 'Examples/HomePage', // Set the title for your component\n  component: MainComponent, // Specify the component\n  decorators: [\n    moduleMetadata({\n      declarations: [], // Declare your component\n      imports: [\n        NbLayoutModule,\n        NbThemeModule.forRoot(),\n        NbActionsModule,\n        NbSidebarModule,\n        NbMenuModule.forRoot(),\n        NbUserModule,\n        NbContextMenuModule,\n        ThemeModule,\n        MainRoutingModule,\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        },\n        {\n          provide: NbSidebarService,\n          useClass: NbSidebarServiceMock,\n        },\n        {\n          provide: AuthService,\n          useClass: AuthServiceMock,\n        },\n\n        {\n          provide: NbMenuService,\n          useClass: MenuServiceMock,\n        },\n\n        {\n          provide: IconPacksManagerService,\n          useValue: {\n            registerSvgs: () => {},\n          },\n        },\n        NbThemeService,\n      ],\n    }),\n  ],\n} as Meta;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// Define your story using the Story function\n\n// Define different scenarios or variations of your component\nexport const Default: Story = {\n  render: () => ({\n    props: {\n      imageUrl: 'assets/images/Illustration.svg',\n      altText: 'my image',\n    },\n  }),\n};\n",
            "properties": [],
            "methods": [
                {
                    "name": "currentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Count",
            "id": "class-Count-416ce7dd3dd5c378ba14c91d0f8c753d8647a6691bf596494bd368ac56e6816b0004d8527a0a169ad500639ca6d2f22ab29737d109c2b50dd3f5970408f314b6",
            "file": "projects/arc-lib/src/lib/core/api/models/count.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Count {\n  count = 0;\n  constructor(data?: Partial<Count>) {\n    if (data) {\n      this.count = data.count || 0;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Count>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Count>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DelAPICommand",
            "id": "class-DelAPICommand-35b1c2873ab4cc62ba5fd692e1ae6525c021a38041197759bc6d5ea23bd2bd6b812bb3482a3cb6ceb88155f72ab6ec92419481b11cd8f1c0f5af64ef0200beb9",
            "file": "projects/arc-lib/src/lib/core/api/commands/del-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { HttpObserve } from '../types';\nimport { ICommand } from './i-command';\n\nexport abstract class DelAPICommand<T> implements ICommand {\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T>,\n    protected readonly uri: string\n  ) {}\n\n  parameters?: {\n    data?: object;\n    query?: HttpParams;\n    headers?: HttpHeaders;\n    observe?: HttpObserve;\n  };\n\n  execute(): Observable<T> {\n    let options: any;\n    if (this.parameters) {\n      options = {};\n      options.observe = this.parameters.observe || 'body';\n      if (this.parameters.headers) {\n        options.headers = this.parameters.headers;\n      }\n\n      if (this.parameters.query) {\n        options.params = this.parameters.query;\n      }\n\n      if (this.parameters.data) {\n        options.body = this.parameters.data;\n      }\n    }\n    return this.apiService\n      .delete(this.uri, options)\n      .pipe(map((resp) => this.adapter.adaptToModel(resp)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "EnsureModuleLoadedOnce",
            "id": "class-EnsureModuleLoadedOnce-b742bf5d777d28c874a9a346d71999e9c27ae4df1eb37632c32cf9d774d49352a16330d7d52d35e69015cb486b7d35eacb8890f1bbd12ad8d4783c120fcdfc08",
            "file": "projects/arc-lib/src/lib/core/ensure-module-loaded-once.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class EnsureModuleLoadedOnce {\n  constructor(targetModule: any) {\n    if (targetModule) {\n      throw new Error(\n        `${targetModule.constructor.name} has already been loaded. Import this module in the AppModule only.`\n      );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "targetModule",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "targetModule",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ForgetPasswordCommand",
            "id": "class-ForgetPasswordCommand-97f5f53fd26b31bdc7f04af3880b51eec9f4cb58712bd619a97d97e855e1f0c7dd1d103ef938415c3bdff9bbe5290ec9a094c19a7e17e1c072833e0c9e400b99",
            "file": "projects/arc-lib/src/lib/core/auth/commands/forget-password.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class ForgetPasswordCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/forget-password`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GanttAdapter",
            "id": "class-GanttAdapter-903a2e044da7fc91ed34896e643069f9eb12d45bbe2e24e6aaa8f3691edb881743650ec10efa5eaa3b67d604761b2e928b9007ee794d6c7514f65592a96b6f28",
            "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TemplateRef, Type, ViewContainerRef} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {DIGITS, ONE_MIN} from '@project-lib/core/constants';\nimport {NbMenuItem} from '@nebular/theme';\nimport {RANDOM_SIZE} from './const';\nimport {gantt} from 'dhtmlx-gantt';\n\n/**\n * `GanttTaskValue` is a type that represents a task in the Gantt chart.\n *\n * The `GanttTaskValue` type is a generic type, which means that it can be used to represent a task\n * with any type of payload.\n *\n * The `GanttTaskValue` type has the following properties:\n *\n * @property {number} id - The unique identifier for the task.\n * @property {Date} start_date - The start date of the task.\n * @property {Date} end_date - The end date of the task.\n * @property {string} name - The name of the task.\n * @property {string} subtitle - A subtitle for the task.\n * @property render - This is used to render the task as a split task.\n * @property {number} parent - The id of the parent task.\n * @property {number} allocation - The percentage of the parent task that this task takes up.\n * @property {string} type - The type of the task. This is used to determine the color of the task.\n * @property {T} payload - This is the data that you want to pass to the task.\n * @property {boolean} open - This is a property that is used by the Gantt component to determine\n * whether or not the task is expanded.\n * @property {boolean} hasChildren - This is a boolean value that indicates whether the task has\n * children.\n */\nexport type GanttTaskValue<T> =\n  | GanttTaskValueWithAllocation<T>\n  | GanttTaskValueWithSubAllocation<T>;\n\nexport interface BaseTaskValue<T> {\n  id: string | number;\n  start_date: Date;\n  end_date: Date;\n  name: string;\n  subtitle?: string;\n  render?: 'split';\n  parent?: string | number;\n  type: string | number;\n  $open?: boolean;\n  hasChildren: boolean;\n  isParent: boolean;\n  overallocated?: boolean;\n  bar_height?: number;\n  row_height?: number;\n  payload: T;\n  classes?: string[];\n}\n\nexport function withSuballocations<T>(\n  task: GanttTaskValueWithSubAllocation<T> | GanttTaskValueWithAllocation<T>,\n): task is GanttTaskValueWithSubAllocation<T> {\n  return (\n    (task as GanttTaskValueWithSubAllocation<T>).subAllocations !== undefined\n  );\n}\n\nexport interface GanttTaskValueWithAllocation<T> extends BaseTaskValue<T> {\n  allocation: number;\n}\n\nexport interface GanttTaskValueWithSubAllocation<T> extends BaseTaskValue<T> {\n  subAllocations: SubAllocation[];\n}\n\nexport type GanttScaleService = {\n  scale: Timelines;\n  config(options?: GanttScaleOptions): {\n    unit: string;\n    step: number;\n    format: (date: Date) => string;\n    css?: (date: Date) => string;\n  }[];\n};\n\n// will be required for custom scale\nexport type GanttScaleOptions = {};\n\nexport type ContextItemClickEvent<T> = {\n  event: NbMenuItem;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttEvent<T> = {\n  event: string;\n  task: GanttTaskValue<T>;\n};\n\nexport type GanttRenderOptions<T = AnyObject> = {\n  contextItems: NbMenuItem[];\n  contextTemplate?: TemplateRef<AnyObject>;\n  viewContainerRef?: ViewContainerRef;\n  columnName?: string;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  columnComponent: Type<IColumnComponent<T>>;\n  barComponent: Type<IBarComponent<T>>;\n  columnWidth: number;\n  resizer: boolean;\n  searchPlaceholder?: string;\n  showSearch: boolean;\n  moveToToday: boolean;\n  highlightRange?: [Date, Date];\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n  defaultScale: Timelines;\n  markToday: boolean;\n  showTooltip?: boolean;\n  childIndent: boolean;\n};\n\nexport type GanttAllocationFields = {\n  startDate: Date;\n  endDate: Date;\n  allocation: number;\n};\n\nexport type GanttLib = typeof gantt;\n\nexport enum Timelines {\n  Weekly,\n  Monthly,\n  Quarterly,\n  Custom,\n}\n\nexport const GanttTimelineMap: {\n  [key in Timelines]: string;\n} = {\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n};\n\nexport abstract class GanttAdapter<T> {\n  abstract adaptFrom(data: T[]): GanttTaskValue<T>[];\n\n  /**\n   * \"Given a date, return a new date that is one day later.\"\n   *\n   * The first line of the function is a comment. Comments are ignored by the compiler\n   * @param {Date} date - The date to be incremented\n   * @returns A new Date object with the date set to the next day.\n   */\n  protected _nextDay(date: Date) {\n    return new Date(date.setDate(date.getDate() + 1));\n  }\n\n  /**\n   * It takes a date string or a Date object, converts it to a Date object, and then adds the timezone\n   * offset to it\n   * @param {string | Date} date - string | Date\n   * @returns A new Date object with the timezone offset added to the time.\n   */\n  protected _addTimezoneOffset(date: string | Date) {\n    let dateObject = new Date(date);\n    return new Date(\n      dateObject.getTime() + dateObject.getTimezoneOffset() * ONE_MIN,\n    );\n  }\n\n  protected _randomId() {\n    return Math.random()\n      .toString(RANDOM_SIZE)\n      .substring(DIGITS.TWO, DIGITS.NINE);\n  }\n}\n\nexport type CustomMouseEvent = {\n  target: HTMLElement;\n};\n\nexport type IColumnComponent<T> = {\n  item: GanttTaskValue<T>;\n  contextItems: NbMenuItem[];\n  active: boolean;\n  showKebab: boolean;\n  showParentInitials: boolean;\n  showChildInitials: boolean;\n  showOverallocatedIcon: boolean;\n  contextItemFilter?: ContextItemFilter<T>;\n};\n\nexport type IBarComponent<T> = {\n  item: GanttTaskValue<T>;\n};\n\nexport type SubAllocation<T = AnyObject> = {\n  percent: number;\n  allocation: number;\n  classes?: string[];\n} & T;\n\nexport type ContextItemFilter<T> = (item: GanttTaskValue<T>) => NbMenuItem[];\n\nexport function hasSubAllocation<T>(\n  item: GanttTaskValue<T>,\n): item is GanttTaskValueWithSubAllocation<T> {\n  return !!(item as GanttTaskValueWithSubAllocation<T>).subAllocations;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "_addTimezoneOffset",
                    "args": [
                        {
                            "name": "date",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt takes a date string or a Date object, converts it to a Date object, and then adds the timezone\noffset to it\n",
                    "description": "<p>It takes a date string or a Date object, converts it to a Date object, and then adds the timezone\noffset to it</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4678,
                                "end": 4682,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4656,
                                "end": 4661,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>string | Date</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 4662,
                                "end": 4677,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 4663,
                                    "end": 4676,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 189,
                                    "types": [
                                        {
                                            "pos": 4663,
                                            "end": 4669,
                                            "flags": 8388608,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 152
                                        },
                                        {
                                            "pos": 4671,
                                            "end": 4676,
                                            "flags": 8388608,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 180,
                                            "typeName": {
                                                "pos": 4671,
                                                "end": 4676,
                                                "flags": 8388608,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 79,
                                                "escapedText": "Date"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 4705,
                                "end": 4712,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A new Date object with the timezone offset added to the time.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_nextDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\"Given a date, return a new date that is one day later.\"\n\nThe first line of the function is a comment. Comments are ignored by the compiler\n",
                    "description": "<p>&quot;Given a date, return a new date that is one day later.&quot;</p>\n<p>The first line of the function is a comment. Comments are ignored by the compiler</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4321,
                                "end": 4325,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4308,
                                "end": 4313,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The date to be incremented</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 4314,
                                "end": 4320,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 4315,
                                    "end": 4319,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 4315,
                                        "end": 4319,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "Date"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 4361,
                                "end": 4368,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A new Date object with the date set to the next day.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_randomId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "adaptFrom",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GanttTaskValue[]",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAPICommand",
            "id": "class-GetAPICommand-94be9353e3a6d979b69885b5d0d1bc4a74070612cf94c3181f7303bbb0c338076a304a3c5f64f417fb95c27c6aecc0aff93a1388d5b9df7d38c0450f0363276d",
            "file": "projects/arc-lib/src/lib/core/api/commands/get-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { HttpObserve, ResponseType } from '../types';\nimport { ICommand } from './i-command';\n\nexport abstract class GetAPICommand<T, R = T> implements ICommand {\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T, R>,\n    protected readonly uri: string\n  ) {}\n\n  parameters?: {\n    query?: HttpParams;\n    headers?: HttpHeaders;\n    observe?: HttpObserve;\n    responseType?: ResponseType;\n  };\n\n  execute(): Observable<T> {\n    // tslint:disable-next-line:rule no-any\n    let options: any;\n    if (this.parameters) {\n      options = {};\n      options.observe = this.parameters.observe || 'body';\n\n      if (this.parameters.headers) {\n        options.headers = this.parameters.headers;\n      }\n\n      if (this.parameters.query) {\n        options.params = this.parameters.query;\n      }\n\n      if (this.parameters.responseType) {\n        options.responseType = this.parameters.responseType;\n      }\n    }\n    return this.apiService\n      .get(this.uri, options)\n      .pipe(map((resp) => this.adapter.adaptToModel(resp)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "GetCurrentUserCommand",
            "id": "class-GetCurrentUserCommand-b19584e882bb9252cc93fc48d6a9a4a55804750980211e69439b6c0a8448677e6be4e505e5060783cef53b8e098450a33cfbd1dee203340a8efeee6056bdc89c",
            "file": "projects/arc-lib/src/lib/core/auth/commands/get-current-user.comand.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GetAPICommand, IAdapter, IApiService } from '../../api';\n\nexport class GetCurrentUserCommand<T> extends GetAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/me`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "GetAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetEnvCommand",
            "id": "class-GetEnvCommand-2c10eb94458c22b5ab039f7d875826e3b311e40493cb0269227d2ac55ef1db7a2c73b473e731e849d067da1b1a8e1a66a8b8731d149936c5d4fa97ebf63029cd",
            "file": "projects/arc-lib/src/lib/core/store/commands/get-env.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GetAPICommand, IAdapter, IApiService } from '../../api';\n\nexport class GetEnvCommand<T> extends GetAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>) {\n    super(\n      apiService,\n      adapter,\n      `assets/json/environment.json?t=${new Date().getTime()}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "GetAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetListAPICommand",
            "id": "class-GetListAPICommand-6172afb85b524ebf6ece7b0cfc1062779021c44190f22dd91f957d0d7bc5323ac0e890c2857bd58e96c087cc488b1b8e7f5b396930c784b9fe9e9251f9bd71f7",
            "file": "projects/arc-lib/src/lib/core/api/commands/get-list-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { ICommand } from './i-command';\n\nexport abstract class GetListAPICommand<T, R = T> implements ICommand {\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T, R>,\n    protected readonly uri: string\n  ) {}\n\n  parameters?: {\n    query?: HttpParams;\n    headers?: HttpHeaders;\n  };\n\n  execute(): Observable<R[]> {\n    // tslint:disable-next-line:rule no-any\n    const options: any = { observe: 'body' };\n    if (this.parameters) {\n      if (this.parameters.headers) {\n        options.headers = this.parameters.headers;\n      }\n\n      if (this.parameters.query) {\n        options.params = this.parameters.query;\n      }\n    }\n    return this.apiService\n      .get(this.uri, options)\n      .pipe(\n        map((resp) => resp.map((data: any) => this.adapter.adaptToModel(data)))\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "GetTokenCommand",
            "id": "class-GetTokenCommand-8197530c182bd0b4d13a9875171a6eaa15ca1971e5e0ab335f94f327c827b5366871de24bf6b7d08383cb625b063e93f123120e63639b241d0eeea38219b9d6b",
            "file": "projects/arc-lib/src/lib/core/auth/commands/get-token.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class GetTokenCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/token`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GoogleLoginCommand",
            "id": "class-GoogleLoginCommand-02ddaaf1c3a527adc9b08c6067134a695ac8208c48336e2e50403678fa65375af128bb4828b6c14597d3d42d0c5aaa3b846899ebdac37118ec11159b794851ef",
            "file": "projects/arc-lib/src/lib/core/auth/commands/google-login.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GetAPICommand, IAdapter, IApiService } from '../../api';\n\nexport class GoogleLoginCommand<T> extends GetAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/google`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "GetAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "GetAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoggedInUserDM",
            "id": "class-LoggedInUserDM-960f0e67fa03253a7a3d9babe0312354f67a2183527672722ba19eafab094f6e4fcb385e0b65445dd301bd19b210a798f5380808d18060ba3716568a4ae2ea9a",
            "file": "projects/arc-lib/src/lib/core/auth/models/logged-in-user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { NameId } from '../..';\n\nexport class LoggedInUserDM {\n  id!: string;\n  firstName = '';\n  middleName?: string;\n  lastName?: string;\n  username!: string;\n  email?: string;\n  phone?: string;\n  permissions!: string[];\n  tenant!: NameId;\n  lastLogin?: Date;\n  defaultTenantId!: string;\n  photo?: string;\n  userTenantId?: string;\n  role?: string;\n\n  get fullName(): string {\n    let fullName = this.firstName;\n    if (this.middleName) {\n      fullName = fullName.concat(' ').concat(this.middleName);\n    }\n    if (this.lastName) {\n      fullName = fullName.concat(' ').concat(this.lastName);\n    }\n    return fullName;\n  }\n\n  constructor(data?: Partial<LoggedInUserDM>) {\n    if (\n      data &&\n      data.id &&\n      data.firstName &&\n      data.username &&\n      data.permissions &&\n      data.tenant &&\n      data.defaultTenantId\n    ) {\n      this.id = data.id;\n      this.firstName = data.firstName;\n      this.middleName = data.middleName;\n      this.lastName = data.lastName;\n      this.username = data.username;\n      this.email = data.email;\n      this.phone = data.phone;\n      this.permissions = data.permissions;\n      this.tenant = data.tenant;\n      this.defaultTenantId = data.defaultTenantId;\n      this.lastLogin = data.lastLogin;\n      this.photo = data.photo;\n      this.userTenantId = data.userTenantId;\n      this.role = data.role;\n    } else if (data) {\n      throw new Error('Mandatory fields missing for LoggedInUser model');\n    } else {\n      // Do nothing\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<LoggedInUserDM>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<LoggedInUserDM>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultTenantId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "middleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tenant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NameId",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userTenantId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "fullName": {
                    "name": "fullName",
                    "getSignature": {
                        "name": "fullName",
                        "type": "string",
                        "returnType": "string",
                        "line": 19
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginCommand",
            "id": "class-LoginCommand-df7c0cc9374c83d465fed8b2103798dd5aa45d16b3de3c8a9be997c803e7a0c76e1e9c1b7fb674c8ac966877eecb063baab995c32a169e614c41f83c6754334a",
            "file": "projects/arc-lib/src/lib/core/auth/commands/login.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class LoginCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/login`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginModel",
            "id": "class-LoginModel-71ad8f74b6a86597ca4112c2fdb10de000e25373690ed7c7bf2f673b027f800c6d969a204f09b31e915943a7932ce53bb1cedac94aeb8065a400d7477688d75e",
            "file": "projects/arc-lib/src/lib/core/auth/models/login.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginModel {\n  username!: string;\n  password!: string;\n  clientId!: string;\n  clientSecret!: string;\n}\n",
            "properties": [
                {
                    "name": "clientId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "clientSecret",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginResponseModel",
            "id": "class-LoginResponseModel-b87df513fea14208b55a82ad09ef4e056436cf692f31c6d807120f6699802049d3891edd52cd78f13ab3aeb818a0578e8e8847aa96b11c8b9959e019dc20ed8d",
            "file": "projects/arc-lib/src/lib/core/auth/models/login-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginResponseModel {\n  code!: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LogoutCommand",
            "id": "class-LogoutCommand-594af102fac0d16d027fabb374087c76c00b66359a867daa8a3dba023ec62e8d8a11c9d3ed53c8eb1c55e5cd8e5eb1511337c1d7d29f1924a5af1e4e9c23aa41",
            "file": "projects/arc-lib/src/lib/core/auth/commands/logout.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class LogoutCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/logout`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuServiceMock",
            "id": "class-MenuServiceMock-afef82003219d6139ff758339ba50115460776ef693c23ff39911120652b04607534adb3143d8e203c1b44aba5211a34651a9dae4330ed81209d1c5143207310",
            "file": "projects/arc-lib/src/stories/components/main.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Meta, moduleMetadata, StoryObj} from '@storybook/angular'; // Import your component\nimport {\n  NbLayoutModule,\n  NbActionsModule,\n  NbSidebarModule,\n  NbMenuModule,\n  NbUserModule,\n  NbContextMenuModule,\n  NbSidebarService,\n  NbMenuService,\n  NbThemeService,\n  NbThemeModule,\n} from '@nebular/theme'; // Import any necessary Nebular modules\nimport {MainComponent} from '@main-project/boiler/main/main.component';\nimport {ActivatedRoute} from '@angular/router';\nimport {AuthService} from '@project-lib/core/auth';\nimport {IconPacksManagerService} from '@project-lib/theme/services';\nimport {NbMenuInternalService} from '@nebular/theme/components/menu/menu.service';\nimport {ThemeModule} from '../../public-api';\nimport {MainRoutingModule} from '@main-project/boiler/main/main-routing.module';\nimport {HomeModule} from '@main-project/boiler/main/home/home.module';\nimport {CommonModule} from '@angular/common';\nimport {of} from 'rxjs';\n\nclass AuthServiceMock {\n  currentUser() {\n    return of('xyz');\n  }\n}\n\nclass MenuServiceMock {\n  onItemClick() {\n    return of('xyz');\n  }\n  onSubmenuToggle() {\n    return of('abc');\n  }\n}\n\nclass NbSidebarServiceMock {\n  onToggle() {\n    return of('xyz');\n  }\n  onExpand() {\n    return of('abc');\n  }\n  onCollapse() {\n    return of('egf');\n  }\n  onCompact() {\n    return of('ab');\n  }\n}\n\nconst meta = {\n  title: 'Examples/HomePage', // Set the title for your component\n  component: MainComponent, // Specify the component\n  decorators: [\n    moduleMetadata({\n      declarations: [], // Declare your component\n      imports: [\n        NbLayoutModule,\n        NbThemeModule.forRoot(),\n        NbActionsModule,\n        NbSidebarModule,\n        NbMenuModule.forRoot(),\n        NbUserModule,\n        NbContextMenuModule,\n        ThemeModule,\n        MainRoutingModule,\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        },\n        {\n          provide: NbSidebarService,\n          useClass: NbSidebarServiceMock,\n        },\n        {\n          provide: AuthService,\n          useClass: AuthServiceMock,\n        },\n\n        {\n          provide: NbMenuService,\n          useClass: MenuServiceMock,\n        },\n\n        {\n          provide: IconPacksManagerService,\n          useValue: {\n            registerSvgs: () => {},\n          },\n        },\n        NbThemeService,\n      ],\n    }),\n  ],\n} as Meta;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// Define your story using the Story function\n\n// Define different scenarios or variations of your component\nexport const Default: Story = {\n  render: () => ({\n    props: {\n      imageUrl: 'assets/images/Illustration.svg',\n      altText: 'my image',\n    },\n  }),\n};\n",
            "properties": [],
            "methods": [
                {
                    "name": "onItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmenuToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockTranslateLoader",
            "id": "class-MockTranslateLoader-7aaa4575d262b6ed690ab6e8fa28c2fb81cfb75ca28022ad94ed1329f87bbb363c4b541411d37fd2328cda8e79946eb78f142ef237a1b379bf094692973fcf21",
            "file": "projects/arc-lib/src/stories/components/List.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Meta, moduleMetadata } from '@storybook/angular';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { NbFocusMonitor, NbFormFieldModule, NbListModule, NbStatusService } from '@nebular/theme';\n\nimport { SelectModule } from '@project-lib/components/selector';\nimport { ListComponent } from '@project-lib/components/selector/list/list.component';\nimport { TranslateLoader, TranslateService, TranslateStore ,TranslateModule} from '@ngx-translate/core';\nimport { of } from 'rxjs';\n\nclass MockTranslateLoader implements TranslateLoader {\n  getTranslation(lang) {\n    // Provide a mock translation object\n    return of({\n      // Your translations here...\n    });\n  }\n}\n\n\nexport default {\n  title: 'Components/List',\n  component: ListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SelectModule,\n        NbFormFieldModule,\n         NbListModule,\n        TranslateModule.forRoot({\n          loader: { provide: TranslateLoader, useClass: MockTranslateLoader },\n        }),], // Import any necessary modules\n      providers: [NbStatusService,NbFocusMonitor,TranslateService,TranslateStore\n       \n      ],\n    }),\n  ],\n} as Meta;\n\nconst Template = (args: ListComponent<any, any, any, any>) => ({\n  component: ListComponent,\n  moduleMetadata: {\n    imports: [NbFormFieldModule, NbListModule], // Import any necessary modules\n  },\n  props: args,\n});\n\nexport const Default = Template.bind({});\nDefault.args = {\n  options: [\n    // Define your list of options here\n    { id: 1, name: 'Option 1' },\n    { id: 2, name: 'Option 2' },\n    // Add more options as needed\n  ],\n  nameField: 'name',\n  idField: 'id',\n  disabledField: 'deleted',\n  itemHeight: 30,\n  multiple: false,\n  search: true,\n  removal: false,\n  searchPlaceholder: 'Search...',\n  noSearchResultText: 'No results found',\n  noDataText: 'No data available',\n  addTagString: 'Create a new item',\n  selectOnEnter: true,\n  allowInput: false,\n  showIcon: true,\n  groupConfig: [\n    // Define your group configuration here\n    { fieldName: 'groupField1', value: 'Group 1', groupName: 'Group A' },\n    { fieldName: 'groupField2', value: 'Group 2', groupName: 'Group B' },\n    // Add more group configurations as needed\n  ],\n  // Define other args and event handlers as needed\n  // For example: selectedOptions, onToggle, onRemove, etc.\n};\n\n// You can create additional stories with different configurations as needed\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ]
        },
        {
            "name": "MockTranslateLoader",
            "id": "class-MockTranslateLoader-047e01090fc52eb81f78da33c0bd76f1b95050e19a32e2b760d1e8df96149acb9c34adfcb7d9bdcfcc1917542a48e4c6a2d4047de44353549d68d878fd9142f7-1",
            "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TranslateLoader, TranslateModule, TranslateService, TranslateStore} from '@ngx-translate/core';\nimport { GanttBarsComponent } from '@project-lib/components/gantt/components';\nimport { AnyObject } from '@project-lib/core/api';\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { ThemeModule } from '@project-lib/theme/theme.module';\nimport { of } from 'rxjs';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { NbThemeModule } from '@nebular/theme';\nimport { TranslationService } from '@project-lib/core/localization/translation.service';\n\nclass MockTranslateLoader implements TranslateLoader {\n  getTranslation(lang) {\n    // Provide a mock translation object\n    return of({\n      // Your translations here...\n    });\n  }\n}\n\n// Mock TranslateService\nconst mockTranslateService = {\n  use: () => {},\n  setDefaultLang: () => {},\n  get: (key) => of(key), // Provide a simple mock translation function\n};\n\n\nexport default {\n    title: 'Components/GanttBars',\n    component: GanttBarsComponent,\n    decorators: [\n      moduleMetadata({\n      //   imports: [TranslateModule], // Add any necessary Angular modules here\n      //   providers: [TranslationService,TranslateService,TranslateStore],\n      imports: [\n          ThemeModule,\n          NbThemeModule.forRoot(), // Add this line to enable Nebular styles\n\n        TranslateModule.forRoot({\n          loader: { provide: TranslateLoader, useClass: MockTranslateLoader },\n        }),\n        HttpClientTestingModule, // Mock HttpClient requests\n      ],\n    \n      providers: [TranslationService,TranslateService,TranslateStore],\n      \n         // Add any necessary Angular services/providers here\n      }),\n    ],\n  };\n  \n  const Template = <T extends AnyObject>(args:GanttBarsComponent<T>) => ({\n    component: GanttBarsComponent,\n    props: args,\n  });\n\n  export const Default = Template.bind({});\n  Default.args = {\n    item: {\n                // Sample data for your GanttTaskValue<T> item\n                name: 'Sample Task',\n                startDate: new Date('2023-09-01'),\n                endDate: new Date('2023-09-10'),\n                allocation: 80, // Sample allocation value\n                // Add other properties as needed\n              },\n};\n  \n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockTranslateLoader-1"
        },
        {
            "name": "MockTranslateLoader",
            "id": "class-MockTranslateLoader-7250b1bb524cb58f1b2688a093910e504d09d0df73be36baf91e8e8626588dd183ccb13c79186e0d2b2d8ab760c8971a728c7a82ee7fa2b9b3219633da3db60c-2",
            "file": "projects/arc-lib/src/stories/components/select.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectComponent } from '@project-lib/components/selector/select/select.component';\nimport { moduleMetadata } from '@storybook/angular';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NbCheckboxModule, NbFocusMonitor, NbFormFieldComponent, NbFormFieldModule, NbIconModule, NbInputModule, NbLayoutModule, NbStatusService, NbTagModule } from '@nebular/theme';\nimport { IconPacksManagerService } from '@project-lib/theme/services';\nimport { ListComponent } from '@project-lib/components/selector/list/list.component';\nimport { ThemeModule } from '../../public-api';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NbActiveDescendantKeyManagerFactoryService } from '@nebular/theme/components/cdk/a11y/descendant-key-manager';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { TranslateLoader, TranslateModule, TranslateService, TranslateStore } from '@ngx-translate/core';\nimport { ResizeModule } from '@project-lib/components/index';\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\nimport { of } from 'rxjs';\n\n// Import any necessary dependencies or mocks here\nclass MockTranslateLoader implements TranslateLoader {\n  getTranslation(lang) {\n    // Provide a mock translation object\n    return of({\n      // Your translations here...\n    });\n  }\n}\n\n\nexport default {\n  title: 'Components/Select',\n  component: SelectComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [SelectComponent,ListComponent],\n      \n      imports:[FormsModule,ReactiveFormsModule,ThemeModule,OverlayModule,BrowserAnimationsModule,NbLayoutModule,NbCheckboxModule,NbInputModule,NbFormFieldModule,\n        TranslateModule.forRoot({\n          loader: { provide: TranslateLoader, useClass: MockTranslateLoader },\n        }),\n        // NbIconModule.forRoot({ iconPack: 'eva' }),\n      ],\n      \n      providers: [NbStatusService,NbFocusMonitor,TranslateService,TranslateStore],\n      // Add your component to the declarations array\n      // You might need to add providers for dependencies here\n    }),\n  ],\n  \n};\n\n// export const cdkOverlayOrigin=\"cdkOverlayOrigin\"\n\nexport const Default = () => ({\n    component: SelectComponent,\n    props: {\n      idField: 'id',\n      showIcon: true,\n      nameField: 'name',\n      disabledField: 'deleted',\n      placeholder: 'Select an option',\n      inputMinWidth: 200,\n      multiple: true,\n      options: [\n        { id: 1, name: 'Option 1', deleted: false },\n        { id: 2, name: 'Option 2', deleted: true },\n        {id :3, name:'Option 3'},\n        {id :4, name:'Option 4'}\n\n\n        // Add more options as needed\n      ],\n      showClearAll: true,\n      search: true,\n      disabled: true,\n      allowInput: true,\n      maxVisibleItems: 5,\n      addTagString: 'Create a new tag',\n      searchPlaceholder: 'Search options',\n      groupConfig: [],\n      selectOnEnter: true,\n    },\n  });\n  \n  Default.storyName = 'Default';\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "MockTranslateLoader-2"
        },
        {
            "name": "MockTranslateLoader",
            "id": "class-MockTranslateLoader-42ec57bf626d96fe5306d289a240e16fb95f9a4dbb6b6021da44aee1cc536714a11ada6efffbc268a9e6eb22c2466bd944746587d1385a03881e864ffb366766-3",
            "file": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { NbThemeModule } from '@nebular/theme';\nimport { TranslateLoader, TranslateModule, TranslateService, TranslateStore } from '@ngx-translate/core';\nimport { GanttTooltipComponent } from '@project-lib/components/gantt/components/gantt-tooltip/gantt-tooltip.component';\nimport { GanttModule } from '@project-lib/components/index';\nimport { ThemeModule } from '@project-lib/theme/theme.module';\nimport { moduleMetadata } from '@storybook/angular';\nimport { of } from 'rxjs';\n\nclass MockTranslateLoader implements TranslateLoader {\n  getTranslation(lang) {\n    // Provide a mock translation object\n    return of({\n      // Your translations here...\n    });\n  }\n}\n\nexport default {\n  title: 'Components/GanttTooltip',\n  component: GanttTooltipComponent,\n  decorators: [\n    moduleMetadata({\n      imports:[\n          ThemeModule,\n          NbThemeModule.forRoot(), // Add this line to enable Nebular styles\n          TranslateModule.forRoot({\n            loader: { provide: TranslateLoader, useClass: MockTranslateLoader },\n          }),\n          HttpClientTestingModule, // Mock HttpClient requests\n        \n        ],\n      providers: [TranslateService,TranslateStore], //Add your providers here if needed\n    }),\n  ],\n};\n\nconst Template = (args: GanttTooltipComponent) => ({\n  component: GanttTooltipComponent,\n  props: args,\n});\n\nexport const Default = Template.bind({});\nDefault.args = {\n  item: {\n    // Define your SubAllocation object here\n    // For example:\n    date: new Date('2023-09-20'),\n    rate: 50,\n    allocation: 8,\n  },\n};\n\n// You may want to create additional stories with different data or scenarios as needed\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "MockTranslateLoader-3"
        },
        {
            "name": "NameId",
            "id": "class-NameId-14354a64407ca42c2b943ed055f9c67b4ae1cec112b428f1dd7f6732c90944bb9dd7edaaa0277e7af99620662772e018e6e7e6aa8cb9cf208c194c86e9861430",
            "file": "projects/arc-lib/src/lib/core/api/models/name-id.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class NameId {\n  id: string | undefined;\n  name: string | undefined;\n  constructor(data?: Partial<NameId>) {\n    this.id = data?.id;\n    this.name = data?.name;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<NameId>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<NameId>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NameIdRequired",
            "id": "class-NameIdRequired-b85491a17d3978aac212121fd2684c245b0572d947612a2cef93b930114293c0bcfbfc46ff0c177eb8b021296fce00cec84fd6694f9e418bbd2eace34af423b6",
            "file": "projects/arc-lib/src/lib/core/api/models/name-id-required.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {required, validate} from '@project-lib/core/decorators';\n\n@validate()\nexport class NameIdRequired {\n  @required()\n  id: string;\n  @required()\n  name: string;\n  constructor(data: NameIdRequired) {\n    this.id = data.id;\n    this.name = data.name;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "NameIdRequired",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "NameIdRequired",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "required",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "required",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [],
            "indexSignatures": []
        },
        {
            "name": "NbSidebarServiceMock",
            "id": "class-NbSidebarServiceMock-afef82003219d6139ff758339ba50115460776ef693c23ff39911120652b04607534adb3143d8e203c1b44aba5211a34651a9dae4330ed81209d1c5143207310",
            "file": "projects/arc-lib/src/stories/components/main.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Meta, moduleMetadata, StoryObj} from '@storybook/angular'; // Import your component\nimport {\n  NbLayoutModule,\n  NbActionsModule,\n  NbSidebarModule,\n  NbMenuModule,\n  NbUserModule,\n  NbContextMenuModule,\n  NbSidebarService,\n  NbMenuService,\n  NbThemeService,\n  NbThemeModule,\n} from '@nebular/theme'; // Import any necessary Nebular modules\nimport {MainComponent} from '@main-project/boiler/main/main.component';\nimport {ActivatedRoute} from '@angular/router';\nimport {AuthService} from '@project-lib/core/auth';\nimport {IconPacksManagerService} from '@project-lib/theme/services';\nimport {NbMenuInternalService} from '@nebular/theme/components/menu/menu.service';\nimport {ThemeModule} from '../../public-api';\nimport {MainRoutingModule} from '@main-project/boiler/main/main-routing.module';\nimport {HomeModule} from '@main-project/boiler/main/home/home.module';\nimport {CommonModule} from '@angular/common';\nimport {of} from 'rxjs';\n\nclass AuthServiceMock {\n  currentUser() {\n    return of('xyz');\n  }\n}\n\nclass MenuServiceMock {\n  onItemClick() {\n    return of('xyz');\n  }\n  onSubmenuToggle() {\n    return of('abc');\n  }\n}\n\nclass NbSidebarServiceMock {\n  onToggle() {\n    return of('xyz');\n  }\n  onExpand() {\n    return of('abc');\n  }\n  onCollapse() {\n    return of('egf');\n  }\n  onCompact() {\n    return of('ab');\n  }\n}\n\nconst meta = {\n  title: 'Examples/HomePage', // Set the title for your component\n  component: MainComponent, // Specify the component\n  decorators: [\n    moduleMetadata({\n      declarations: [], // Declare your component\n      imports: [\n        NbLayoutModule,\n        NbThemeModule.forRoot(),\n        NbActionsModule,\n        NbSidebarModule,\n        NbMenuModule.forRoot(),\n        NbUserModule,\n        NbContextMenuModule,\n        ThemeModule,\n        MainRoutingModule,\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        },\n        {\n          provide: NbSidebarService,\n          useClass: NbSidebarServiceMock,\n        },\n        {\n          provide: AuthService,\n          useClass: AuthServiceMock,\n        },\n\n        {\n          provide: NbMenuService,\n          useClass: MenuServiceMock,\n        },\n\n        {\n          provide: IconPacksManagerService,\n          useValue: {\n            registerSvgs: () => {},\n          },\n        },\n        NbThemeService,\n      ],\n    }),\n  ],\n} as Meta;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// Define your story using the Story function\n\n// Define different scenarios or variations of your component\nexport const Default: Story = {\n  render: () => ({\n    props: {\n      imageUrl: 'assets/images/Illustration.svg',\n      altText: 'my image',\n    },\n  }),\n};\n",
            "properties": [],
            "methods": [
                {
                    "name": "onCollapse",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCompact",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PatchAPICommand",
            "id": "class-PatchAPICommand-dc924461081d75804e26677403a15ac63b01834fe7ebfbab940b757524b60dc378e537c4b222d3567203df3f7da9ac9a002566d74a7c0b06860646650389ea88",
            "file": "projects/arc-lib/src/lib/core/api/commands/patch-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { HttpObserve } from '../types';\nimport { ICommand } from './i-command';\n\nexport abstract class PatchAPICommand<T> implements ICommand {\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T>,\n    protected readonly uri: string\n  ) {}\n\n  parameters!: {\n    data: Partial<T>;\n    headers?: HttpHeaders;\n    observe?: HttpObserve;\n    query?: HttpParams;\n  };\n\n  execute(): Observable<T> {\n    if (!this.parameters) {\n      throwError(() => new Error(`Parameters missing for PATCH ${this.uri}`));\n    }\n\n    // sonarignore:start\n    // tslint:disable-next-line:rule no-any\n    const options: any = { observe: this.parameters.observe || 'body' };\n    if (this.parameters.headers) {\n      options.headers = this.parameters.headers;\n    }\n    // sonarignore:end\n\n    if (this.parameters.query) {\n      options.params = this.parameters.query;\n    }\n    return this.apiService\n      .patch(\n        this.uri,\n        this.adapter.adaptFromModel(this.parameters.data),\n        options\n      )\n      .pipe(map((resp) => resp && this.adapter.adaptToModel(resp)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "PostAPICommand",
            "id": "class-PostAPICommand-94a050488f15209b25df796a33e4c13cbf7f96492e21dee13b11798766d6c74fd2e9386212ca492fe268ae7917e5bcbcc64381d2fabc0ef82e23fe69b29c7cb5",
            "file": "projects/arc-lib/src/lib/core/api/commands/post-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { HttpObserve } from '../types';\nimport { ICommand } from './i-command';\n\nexport abstract class PostAPICommand<T extends Partial<R>, R = T>\n  implements ICommand\n{\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T, R>,\n    protected readonly uri: string\n  ) {}\n\n  parameters!: {\n    data: T;\n    headers?: HttpHeaders;\n    observe?: HttpObserve;\n    query?: HttpParams;\n    reportProgress?: boolean;\n  };\n\n  execute(): Observable<R> {\n    if (!this.parameters) {\n      throwError(() => new Error(`Parameters missing for POST ${this.uri}`));\n    }\n    // tslint:disable-next-line:rule no-any\n    const options: any = {};\n    options.observe = this.parameters.observe || 'body';\n    options.reportProgress = this.parameters.reportProgress;\n    if (this.parameters.headers) {\n      options.headers = this.parameters.headers;\n    }\n    return this.apiService\n      .post(\n        this.uri,\n        this.adapter.adaptFromModel(this.parameters.data),\n        options\n      )\n      .pipe(\n        map((resp) => {\n          if (!options.reportProgress) {\n            return this.adapter.adaptToModel(resp);\n          } else {\n            return resp;\n          }\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T | R>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "PutAPICommand",
            "id": "class-PutAPICommand-fdc80c3074769eef455a6a03b0fb636a04f4217001f038e1e331320c943d5cd16d63f7951c90487c98e66cc30ae3506e58ff92e65a4989d88939836a7cb9bb64",
            "file": "projects/arc-lib/src/lib/core/api/commands/put-api.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IAdapter } from '../adapters/i-adapter';\nimport { IApiService } from '../i-api-service';\nimport { HttpObserve } from '../types';\nimport { ICommand } from './i-command';\n\nexport abstract class PutAPICommand<T> implements ICommand {\n  constructor(\n    protected readonly apiService: IApiService,\n    protected readonly adapter: IAdapter<T>,\n    protected readonly uri: string\n  ) {}\n\n  parameters!: { data: T; headers?: HttpHeaders; observe?: HttpObserve };\n\n  execute(): Observable<T> {\n    if (!this.parameters) {\n      throwError(() => new Error(`Parameters missing for PUT ${this.uri}`));\n    }\n    // tslint:disable-next-line:rule no-any\n    const options: any = { observe: this.parameters.observe || 'body' };\n    if (this.parameters.headers) {\n      options.headers = this.parameters.headers;\n    }\n    return this.apiService\n      .put(this.uri, this.adapter.adaptFromModel(this.parameters.data), options)\n      .pipe(map((resp) => resp && this.adapter.adaptToModel(resp)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "RefreshTokenCommand",
            "id": "class-RefreshTokenCommand-0ea5c5442cecb0eff84c1e3388911952c23a1d42885eee426d24d4ed923a055a716a1da512658a4b8a2d84d959fa7b2225bd206cf61ae9ef4e7dc1617980b28b",
            "file": "projects/arc-lib/src/lib/core/auth/commands/refresh-token.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class RefreshTokenCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/token-refresh`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResetPasswordCommand",
            "id": "class-ResetPasswordCommand-cf05e42980071b8d6ced8b6888797b0873607b959953b65fbf51a8db5d81e8362539e52e411377b0868f5dbe09c4f13e04f2fe3581c00b2a62ca0e0706fc174b",
            "file": "projects/arc-lib/src/lib/core/auth/commands/reset-password.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PatchAPICommand } from '../../api';\n\nexport class ResetPasswordCommand<T> extends PatchAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/reset-password`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "PatchAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PatchAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PatchAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RouteComponentBaseDirective",
            "id": "class-RouteComponentBaseDirective-5645a39a199ca81593faf27bf05eacf503a52372472cbd816e58f18fd04e712948d7589e7d11ed2f84e9c280bac9f52aea536af6b4c4d000f7e6c3e57710f63c",
            "file": "projects/arc-lib/src/lib/core/route-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { filter, map } from 'rxjs';\nimport { ComponentBaseDirective } from './component-base';\n\nexport class RouteComponentBaseDirective extends ComponentBaseDirective {\n  constructor(\n    protected readonly route: ActivatedRoute,\n    protected readonly location: Location\n  ) {\n    super();\n  }\n\n  getDataParam(key: string) {\n    return this.route.snapshot.data[key];\n  }\n\n  getQueryParam(key: string) {\n    return this.route.snapshot.queryParamMap.get(key);\n  }\n\n  getAllQueryParams() {\n    return this.route.snapshot.queryParams;\n  }\n\n  getRouteParam(key: string) {\n    return this.route.snapshot.paramMap.get(key);\n  }\n\n  getRouteParamObservable(key: string) {\n    return this.route.paramMap.pipe(\n      filter((params) => !!params.get(key)),\n      map((params) => params.get(key))\n    );\n  }\n  getChildRouteParam(key: string) {\n    return this.route.firstChild?.snapshot?.paramMap?.get(key);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  navigateHome(homePath): void {\n    this.location.go(homePath);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getAllQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getChildRouteParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQueryParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRouteParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRouteParamObservable",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateHome",
                    "args": [
                        {
                            "name": "homePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "homePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "ComponentBaseDirective",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToasterConfig",
            "id": "class-ToasterConfig-27f743ea7d357344f4cd708c6a7ac002e4d8fa56e3dfd7a056f370006fa345f87b4493dc495e1476fa3162966b4452ef13f43dd74c5a5ee69b94ef04c6ded78c",
            "file": "projects/arc-lib/src/lib/core/toaster/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nimport { IToaster } from './i-toaster';\n\nexport const TOASTER_SERVICE_KEY = new InjectionToken<IToaster>(\n  'Identifier for ToasterService class'\n);\n\nexport class ToasterConfig {\n  /**\n   * Determines where on the screen toast have to be rendered.\n   * */\n  position!: string | ToasterPhysicalPosition;\n  /**\n   * Status chooses color scheme for the toast.\n   * */\n  status!: string;\n  /**\n   * Duration is timeout between toast appears and disappears.\n   * */\n  timeout!: number;\n  /**\n   * If preventDuplicates is true\n   * then the toast with the same title, message and status will not be rendered.\n   * */\n  preventDuplicates!: boolean;\n  /**\n   * CSS Class to be applied to the toast.\n   */\n  toastClass!: string;\n  /**\n   * Determines render icon or not.\n   * */\n  hasIcon!: boolean;\n  /**\n   * Icon name that can be provided to render custom icon.\n   * */\n  icon!: string;\n}\n\nexport enum ToasterPhysicalPosition {\n  TOP_RIGHT = 'top-right',\n  TOP_LEFT = 'top-left',\n  BOTTOM_RIGHT = 'bottom-right',\n  BOTTOM_LEFT = 'bottom-left',\n}\n",
            "properties": [
                {
                    "name": "hasIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines render icon or not.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nDetermines render icon or not.\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon name that can be provided to render custom icon.</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIcon name that can be provided to render custom icon.\n"
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ToasterPhysicalPosition",
                    "optional": false,
                    "description": "<p>Determines where on the screen toast have to be rendered.</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nDetermines where on the screen toast have to be rendered.\n"
                },
                {
                    "name": "preventDuplicates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>If preventDuplicates is true\nthen the toast with the same title, message and status will not be rendered.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nIf preventDuplicates is true\nthen the toast with the same title, message and status will not be rendered.\n"
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Status chooses color scheme for the toast.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nStatus chooses color scheme for the toast.\n"
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Duration is timeout between toast appears and disappears.</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nDuration is timeout between toast appears and disappears.\n"
                },
                {
                    "name": "toastClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>CSS Class to be applied to the toast.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nCSS Class to be applied to the toast.\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToasterConfigExt",
            "id": "class-ToasterConfigExt-d71c9c68e1882f3e3b29a8cc67cb544e6d16034f693404d23af1cc6843ba4ce4a18cd66dc057f3567ee06657cec1e0647259fc61c40f3a8a44bc165b0dd840e9",
            "file": "projects/arc-lib/src/lib/theme/toaster/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ToasterConfig} from '@project-lib/core/toaster';\nimport {\n  NbGlobalLogicalPosition,\n  NbGlobalPhysicalPosition,\n} from '@nebular/theme';\n\nexport class ToasterConfigExt extends ToasterConfig {\n  override position!: NbGlobalLogicalPosition | NbGlobalPhysicalPosition;\n}\n",
            "properties": [
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NbGlobalLogicalPosition | NbGlobalPhysicalPosition",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        161
                    ],
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "hasIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines render icon or not.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nDetermines render icon or not.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon name that can be provided to render custom icon.</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIcon name that can be provided to render custom icon.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "preventDuplicates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>If preventDuplicates is true\nthen the toast with the same title, message and status will not be rendered.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nIf preventDuplicates is true\nthen the toast with the same title, message and status will not be rendered.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Status chooses color scheme for the toast.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nStatus chooses color scheme for the toast.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Duration is timeout between toast appears and disappears.</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nDuration is timeout between toast appears and disappears.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                },
                {
                    "name": "toastClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>CSS Class to be applied to the toast.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nCSS Class to be applied to the toast.\n",
                    "inheritance": {
                        "file": "ToasterConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ToasterConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TokenResponseModel",
            "id": "class-TokenResponseModel-d5d465d508d611ee952456da799a0359d93db9a8cedad0ccca98412fd72ecaf5db32bf61feaca91ea6da174378b02f0f85c89a112d89f34b9288d21983901e6e",
            "file": "projects/arc-lib/src/lib/core/auth/models/token-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TokenResponseModel {\n  accessToken!: string;\n  refreshToken!: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "VerifyResetPasswordLinkCommand",
            "id": "class-VerifyResetPasswordLinkCommand-e84f48a206317a5ee1cc70041aaeaa6ed76a95e8b8703ad2f8ad4fc0aea8b7e964d78dd49dc131a666601aac0f038eb1abe7e3fce36457d8f5dbd48ead08691b",
            "file": "projects/arc-lib/src/lib/core/auth/commands/verify-reset-password-link.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdapter, IApiService, PostAPICommand } from '../../api';\n\nexport class VerifyResetPasswordLinkCommand<T> extends PostAPICommand<T> {\n  constructor(apiService: IApiService, adapter: IAdapter<T>, appConfig: any) {\n    super(\n      apiService,\n      adapter,\n      `${appConfig.baseApiUrl}${appConfig.authServiceUrl}/auth/verify-reset-password-link`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "IApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapter",
                        "type": "IAdapter<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "PostAPICommand"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PostAPICommand",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ComponentBaseDirective",
            "id": "directive-ComponentBaseDirective-25447bb815a1e1ab686cf18ab25eed23d0604fd3ea957ab6f9b505423d39924655f20bc32325b2acab3d6d2a3feca452f530db60366892ce6b782fc38b201301",
            "file": "projects/arc-lib/src/lib/core/component-base.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive({\n  selector: 'app-dir',\n})\nexport class ComponentBaseDirective implements OnDestroy {\n  protected _destroy$: Subject<void> = new Subject();\n\n  ngOnDestroy() {\n    this.clearAllSubscriptions();\n  }\n\n  clearAllSubscriptions() {\n    this._destroy$.next();\n    this._destroy$.complete();\n    this._destroy$.unsubscribe();\n  }\n\n  blurActiveElement() {\n    (document.activeElement as HTMLButtonElement)?.blur?.();\n  }\n}\n",
            "selector": "app-dir",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blurActiveElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "ResizeDirective",
            "id": "directive-ResizeDirective-b5c14df5d3e11d930a639d3af9a1a86d612a85f2bc442d976be9f0f19cf1fa882e093f8850ff3f1735b68aab2800d5b70e0a9492753fe677816fbea6c8fba1b4",
            "file": "projects/arc-lib/src/lib/components/resize/resize.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ComponentBaseDirective } from '../../core/component-base';\nimport { ResizeService } from './resize.service';\nimport { ResizeEvent } from './types';\n\n@Directive({\n  selector: '[Resize]',\n})\nexport class ResizeDirective\n  extends ComponentBaseDirective\n  implements OnInit, OnDestroy\n{\n  constructor(private resizeService: ResizeService, private el: ElementRef) {\n    super();\n  }\n\n  @Output()\n  Resize = new EventEmitter<ResizeEvent>();\n\n  ngOnInit() {\n    this.resizeService.observe(this.el.nativeElement);\n    this.resizeService.listen(this.el.nativeElement).subscribe((size) => {\n      this.Resize.emit(size);\n    });\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this.resizeService.unobserver(this.el.nativeElement);\n  }\n}\n",
            "selector": "[Resize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "Resize",
                    "defaultValue": "new EventEmitter<ResizeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        161
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "blurActiveElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "clearAllSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "extends": "ComponentBaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resizeService",
                        "type": "ResizeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "resizeService",
                        "type": "ResizeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-afc58d40dde717f8d1071171400e8e2c64506a85c56f8686fb9951a75035524d5228bf6b54fe4960406233f7e542eca183ac71167623f6ad046fbafd56e442c8",
            "file": "projects/arc-lib/src/lib/components/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Location} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {NbAuthComponent, NbAuthService} from '@nebular/auth';\n\n@Component({\n  selector: 'auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n})\nexport class AuthComponent extends NbAuthComponent {\n  image:string;\n  altText:string;\n  constructor(\n    override readonly auth: NbAuthService,\n    override readonly location: Location,\n  ) {\n    super(auth, location);\n    this.image=\"../../../images/auth/login-img.png\";\n    this.altText=\"loginImg\";\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"@nebular/theme/styles/global/breakpoints\";\n\n:host {\n  $auth-layout-padding: 2.5rem;\n\n  .login-img {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n\n  nb-auth-block {\n    max-width: none;\n  }\n\n  ::ng-deep {\n    nb-layout .layout .layout-container .content .columns nb-layout-column {\n      padding: $auth-layout-padding;\n\n      @include media-breakpoint-down(sm) {\n        padding: 0;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "NbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "NbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NbAuthComponent",
            "templateData": "<nb-layout>\n  <nb-layout-column class=\"p-0\">\n    <nb-auth-block class=\"h-100\">\n      <router-outlet></router-outlet>\n    </nb-auth-block>\n  </nb-layout-column>\n  <nb-layout-column>\n    <div class=\"login-img\">\n      <img width=\"90%\" src=\"../../../images/auth/login-img.png\" alt=\"loginImg\" />\n    </div>\n  </nb-layout-column>\n</nb-layout>\n"
        },
        {
            "name": "BbGanttComponent",
            "id": "component-BbGanttComponent-e134801c881c2920d8ac7d41503d90f8a56ae25ed20f5eac22ada042cbcf51b117c68acc4d25de190d37a6a231ceefa7cf4ce0246a2d1cc5a4e07756a38d3748",
            "file": "projects/arc-lib/src/lib/components/gantt/components/bb-gantt.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gantt",
            "styleUrls": [
                "./bb-gantt.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bb-gantt.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "barComponent",
                    "defaultValue": "GanttBarsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "Type<IBarComponent<T>>",
                    "decorators": []
                },
                {
                    "name": "childIndent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "columnComponent",
                    "defaultValue": "GanttColumnComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "Type<IColumnComponent<T>>",
                    "decorators": []
                },
                {
                    "name": "columnName",
                    "defaultValue": "'Employee Name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "columnWidth",
                    "defaultValue": "GANTT_COLUMN_WIDTH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "contextItemFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "ContextItemFilter<T>",
                    "decorators": []
                },
                {
                    "name": "contextItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "NbMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "defaultScale",
                    "defaultValue": "Timelines.Monthly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "Timelines",
                    "decorators": []
                },
                {
                    "name": "highlightRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "[Date, Date]",
                    "decorators": []
                },
                {
                    "name": "markToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 116,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "moveToToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "resizer",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showBorder",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showChildInitials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showGridBorder",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showKebab",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showOverallocatedIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showParentInitials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTooltip",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "contextItemClick",
                    "defaultValue": "new EventEmitter<ContextItemClickEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter<GanttEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AnyObject>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "ganttContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gantt', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        123,
                        146
                    ]
                },
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        161
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "blurActiveElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "clearAllSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  Type,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {ComponentBaseDirective} from '@project-lib/core/component-base';\nimport {NbMenuItem, NbMenuService} from '@nebular/theme';\nimport {takeUntil} from 'rxjs';\nimport {GANTT_COLUMN_WIDTH} from '../const';\nimport {GanttService} from '../services';\nimport {\n  ContextItemClickEvent,\n  ContextItemFilter,\n  GanttEvent,\n  GanttRenderOptions,\n  GanttTaskValue,\n  IBarComponent,\n  IColumnComponent,\n  Timelines,\n} from '../types';\nimport {GanttBarsComponent} from './gantt-bars/gantt-bars.component';\nimport {GanttColumnComponent} from './gantt-column/gantt-column.component';\n\n@Component({\n  selector: 'gantt',\n  templateUrl: './bb-gantt.component.html',\n  styleUrls: ['./bb-gantt.component.scss'],\n})\nexport class BbGanttComponent<T extends AnyObject, S extends AnyObject>\n  extends ComponentBaseDirective\n  implements OnChanges, OnInit, AfterViewInit, OnDestroy, GanttRenderOptions<T>\n{\n  @ViewChild('gantt', {static: true}) ganttContainer!: ElementRef;\n\n  @Input()\n  data!: T[];\n\n  @Input()\n  contextItems: NbMenuItem[] = [];\n\n  @Input()\n  contextItemFilter!: ContextItemFilter<T>;\n\n  @Output()\n  contextItemClick = new EventEmitter<ContextItemClickEvent<T>>();\n\n  @Output()\n  event = new EventEmitter<GanttEvent<T>>();\n\n  @Input()\n  showParentInitials = false;\n\n  @Input()\n  showChildInitials = false;\n\n  @ViewChild('menu', {static: true})\n  contextTemplate!: TemplateRef<AnyObject>;\n\n  @Input()\n  columnName = 'Employee Name';\n\n  @Input()\n  showKebab = true;\n\n  @Input()\n  columnWidth = GANTT_COLUMN_WIDTH;\n\n  @Input()\n  resizer = true;\n\n  @Input()\n  columnComponent: Type<IColumnComponent<T>> = GanttColumnComponent;\n\n  @Input()\n  barComponent: Type<IBarComponent<T>> = GanttBarsComponent;\n\n  @Input()\n  searchPlaceholder?: string;\n\n  @Input()\n  showSearch = true;\n\n  @Input()\n  showBorder = true;\n\n  @Input()\n  moveToToday = true;\n\n  @Input()\n  highlightRange!: [Date, Date];\n\n  @Input()\n  showOverallocatedIcon = true;\n\n  @Input()\n  defaultScale: Timelines = Timelines.Monthly;\n\n  @Input()\n  showGridBorder = true;\n\n  @Input()\n  showTooltip = false;\n\n  @Input()\n  markToday = true;\n\n  @Input()\n  childIndent = true;\n\n  constructor(\n    private readonly ganttSvc: GanttService<T, S>,\n    private readonly menuService: NbMenuService,\n    public readonly viewContainerRef: ViewContainerRef,\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.menuService\n      .onItemClick()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(event => {\n        this.contextItemClick.emit({\n          event: event.item,\n          task: event.tag as unknown as GanttTaskValue<T>,\n        });\n        this.ganttSvc.closeContextMenu();\n      });\n    this.ganttSvc.events.pipe(takeUntil(this._destroy$)).subscribe(event => {\n      this.event.emit(event);\n    });\n  }\n\n  ngOnChanges() {\n    this.ganttSvc.feed(this.data);\n  }\n\n  ngAfterViewInit() {\n    this.ganttSvc.render(this.ganttContainer, this);\n  }\n\n  override ngOnDestroy() {\n    this.ganttSvc.destroy();\n    super.ngOnDestroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"sass:map\";\n@import \"projects/arc-lib/src/lib/theme/styles/_variables.scss\";\n//@use  \"projects/arc-lib/src/lib/theme/styles/_variables.scss\";\n\n.gantt-container {\n  position: relative;\n  border-top: 0.063rem solid map.get( $color, gantt-lines);\n  height: 100%;\n}\n\n.gantt-menu {\n  background-color: map.get($color, light);\n  box-shadow: 0px 0.938rem 1.25rem 0px #00000029;\n  width: 11.75rem;\n}\n",
                    "styleUrl": "./bb-gantt.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ganttSvc",
                        "type": "GanttService<T | S>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuService",
                        "type": "NbMenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 119,
                "jsdoctags": [
                    {
                        "name": "ganttSvc",
                        "type": "GanttService<T | S>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "NbMenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ComponentBaseDirective",
            "implements": [
                "OnChanges",
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "GanttRenderOptions"
            ],
            "templateData": "<div class=\"gantt-container\">\n  <div\n    [ngClass]=\"showBorder ? 'gantt-chart' : 'gantt-chart no-border'\"\n    [class.no-grid-border]=\"!showGridBorder\"\n    [class.no-child-indent]=\"!childIndent\"\n    #gantt\n  ></div>\n</div>\n\n<ng-template #menu let-item=\"item\" let-contextItems=\"contextItems\">\n  <div class=\"gantt-menu\">\n    <nb-menu [items]=\"contextItems\" [tag]=\"item\"></nb-menu>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "projects/arc-lib/src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "GanttBarsComponent",
            "id": "component-GanttBarsComponent-3617a7492f0203252a253712a7aa7670c211214bfbcba88a96f9c1f3e1729a1403e6468d08370cd163588319712f1c2b7a32657360a1f39e414cae962e8e8c1d",
            "file": "projects/arc-lib/src/lib/components/gantt/components/gantt-bars/gantt-bars.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gantt-bars",
            "styleUrls": [
                "./gantt-bars.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gantt-bars.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allocationBase",
                    "defaultValue": "MAX_ALLOCATION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "allocationTypes",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GanttTaskValue<T>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatAllocation",
                    "args": [
                        {
                            "name": "allocation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allocation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatter",
                    "args": [
                        {
                            "name": "rate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasSubAllocation",
                    "args": [
                        {
                            "name": "item",
                            "type": "GanttTaskValue<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GanttTaskValueWithSubAllocation<T>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "GanttTaskValue<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringify",
                    "args": [
                        {
                            "name": "subAllocation",
                            "type": "SubAllocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subAllocation",
                            "type": "SubAllocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {MAX_ALLOCATION} from '@project-lib/core/constants';\nimport {TranslationService} from '@project-lib/core/localization';\nimport {TranslateService} from '@ngx-translate/core';\nimport {\n  GanttTaskValue,\n  GanttTaskValueWithSubAllocation,\n  SubAllocation,\n} from '../../types';\n\n@Component({\n  selector: 'gantt-bars',\n  templateUrl: './gantt-bars.component.html',\n  styleUrls: ['./gantt-bars.component.scss'],\n})\nexport class GanttBarsComponent<T extends AnyObject> {\n  item!: GanttTaskValue<T>;\n  allocationTypes: any = {};\n  allocationBase = MAX_ALLOCATION;\n  private translate: TranslateService;\n  constructor(private translateSvc: TranslationService) {\n    this.translate = translateSvc.translate;\n  }\n\n  stringify(subAllocation: SubAllocation) {\n    return JSON.stringify(subAllocation);\n  }\n  formatter(rate: number) {\n    return `$${rate}/${this.translate.instant('hr')}`;\n  }\n\n  formatAllocation(allocation: number) {\n    return `${allocation}${this.translate.instant('h/d')}`;\n  }\n\n  hasSubAllocation(\n    item: GanttTaskValue<T>,\n  ): item is GanttTaskValueWithSubAllocation<T> {\n    return !!(item as GanttTaskValueWithSubAllocation<T>).subAllocations;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"sass:map\";\n@use \"../../../../theme/styles/variables\" as *;\n@use \"projects/arc-lib/src/lib/theme/styles/_variables.scss\" as *;\n\n.actual-rate {\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem !important;\n  background: map.get($color, light);\n  font-weight: map.get($font-weight, bold);\n  color: map.get($color, actual-resource-gantt-text);\n  font-size: map.get($font-size, medium);\n  line-height: 1;\n  margin-right: 0.75rem;\n}\n\n.bar-container {\n  display: flex;\n  flex-grow: 1;\n  background: white;\n}\n\n.bar {\n  font-family: var(--font-family-primary);\n  font-weight: map.get($font-weight, bold);\n  font-size: map.get($font-size, default);\n  color: map.get($color, dark);\n  border-radius: 0.5rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n  overflow: hidden;\n\n  &.actual-bar {\n    background: repeating-linear-gradient(305deg,\n        map.get($color, actual-resource-gantt-lines),\n        map.get($color, actual-resource-gantt-lines) 0.063rem,\n        map.get($color, actual-resource-gantt-background) 0.063rem,\n        map.get($color, actual-resource-gantt-background) 0.5rem);\n    border: 0.063rem solid map.get($color, actual-resource-gantt-lines);\n\n    &.closed-won {\n      background-color: map.get($color,\n          actual-resource-gantt-background) !important;\n    }\n\n    &.with-suballocations {\n      padding: 0;\n      border: none;\n      overflow: visible;\n    }\n\n    color: map.get($color, actual-resource-gantt-text);\n  }\n\n  &.placeholder-bar {\n    // background: repeating-linear-gradient(\n    //   305deg,\n    //   map.get($color, placeholder-resource-gantt-lines),\n    //   map.get($color, placeholder-resource-gantt-lines) 0.063rem,\n    //   map.get($color, placeholder-resource-gantt-background) 0.063rem,\n    //   map.get($color, placeholder-resource-gantt-background) 0.5rem\n    // );\n    background: repeating-linear-gradient(305deg, #0095ff57, #0095ff57 0.063rem, #f7f7f7 0.063rem, #0095ff57 0.5rem);\n    border: 0.063rem solid map.get($color, placeholder-resource-gantt-lines);\n    padding: 2.5px;\n\n    .placeholder_resource_hours {\n      margin-left: 0.75rem;\n    }\n  }\n}\n\n.suballocation-bars {\n  width: 100%;\n  font-family: var(--font-family-primary);\n  font-weight: map.get($font-weight, bold);\n  font-size: map.get($font-size, default);\n  border-radius: 0.5rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n  overflow: hidden;\n\n  background: repeating-linear-gradient(305deg,\n      map.get($color, actual-resource-gantt-lines),\n      map.get($color, actual-resource-gantt-lines) 0.063rem,\n      map.get($color, actual-resource-gantt-background) 0.063rem,\n      map.get($color, actual-resource-gantt-background) 0.5rem);\n  border: 0.063rem solid map.get($color, actual-resource-gantt-lines);\n\n  color: map.get($color, actual-resource-gantt-text);\n}\n\n.actual-hours {\n  margin-left: 0.75rem;\n}\n\n.parent-bar {\n  background: map.get($color, light);\n  border: none;\n  border-radius: 0.5rem;\n  text-align: left;\n\n  & .actual-hours {\n    color: black;\n  }\n\n  &.filled-parent-bar {\n    background: map.get($color, gantt-parent-bar);\n    border: 0.063rem solid map.get($color, gantt-parent-bar-border);\n  }\n\n  .gantt_split_parent {\n    opacity: 1;\n    display: none;\n  }\n}\n\n.parent-allocations-container {\n  width: 100%;\n}\n\n.parent-allocation-bar {\n  padding: 0;\n  border: 0;\n  overflow: visible;\n}\n\n.arrow {\n  font-size: map.get($font-size, large);\n  font-weight: map.get($font-weight, light);\n  vertical-align: middle;\n}\n\n.over-allocated {\n  background: map.get($color, warning-banner) !important;\n  border: 0.063rem solid map.get($color, overallocated-gantt-border) !important;\n\n  .actual-hours {\n    color: map.get($color, overallocated);\n  }\n\n  .actual-rate {\n    color: map.get($color, overallocated);\n  }\n}\n\n.overallocated-container {\n  display: flex;\n  color: map.get($color, warning);\n  margin: 0rem 0.438rem;\n  font-size: map.get($font-size, small);\n}\n\n.empty {\n  visibility: hidden;\n}",
                    "styleUrl": "./gantt-bars.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateSvc",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "translateSvc",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"item\">\n  <ng-container\n    *ngIf=\"\n      item.type === allocationTypes.PlaceholderResource &&\n      !hasSubAllocation(item)\n    \"\n  >\n    <div class=\"placeholder-bar bar\">\n      <div class=\"placeholder_resource_hours\">\n        {{ formatAllocation(item.allocation) }}\n      </div>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"item.type !== allocationTypes.PlaceholderResource\">\n    <div\n      class=\"bar actual-bar\"\n      [class.with-suballocations]=\"hasSubAllocation(item)\"\n      [class.closed-won]=\"item.payload?.['dealStage'] === 'closedwon'\"\n      [ngClass]=\"item.classes ?? []\"\n      data-gantt-click=\"bar\"\n    >\n      <div\n        *ngIf=\"!hasSubAllocation(item) && item.allocation\"\n        class=\"actual-hours\"\n      >\n        {{ formatAllocation(item.allocation) }}\n      </div>\n      <div\n        *ngIf=\"!hasSubAllocation(item) && item.payload?.['billingRate']\"\n        class=\"actual-rate\"\n      >\n        {{ formatter(item.payload?.['billingRate']) }}\n      </div>\n      <div *ngIf=\"hasSubAllocation(item)\" class=\"bar-container\">\n        <ng-container *ngFor=\"let allocationBar of item.subAllocations\">\n          <div\n            class=\"suballocation-bars\"\n            [attr.gantt-bar-data]=\"stringify(allocationBar)\"\n            gantt-hover=\"bar\"\n            [ngClass]=\"allocationBar.classes ?? []\"\n            [ngStyle]=\"{\n              width: allocationBar.percent + '%'\n            }\"\n            [class.empty]=\"!allocationBar.allocation\"\n            [class.over-allocated]=\"allocationBar.allocation > allocationBase\"\n          >\n            <div class=\"actual-hours\">\n              {{\n                formatAllocation(\n                  allocationBar[\"allocatedHours\"] ?? allocationBar.allocation\n                )\n              }}\n            </div>\n            <div\n              *ngIf=\"allocationBar.allocation > allocationBase\"\n              class=\"overallocated-container\"\n            >\n              <div class=\"arrow\">&#8593;</div>\n              <div class=\"overallocated-hours\">\n                {{\n                  formatAllocation(allocationBar.allocation - allocationBase)\n                }}\n              </div>\n            </div>\n            <div class=\"actual-rate\" *ngIf=\"item.payload['billingRate']\">\n              {{ formatter(item.payload[\"billingRate\"]) }}\n            </div>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "GanttColumnComponent",
            "id": "component-GanttColumnComponent-082469eb43133a18d9694d4fdc5aba1301ddcf1a74cf315e7ffda97923884ccb9a1ffb47bea7f8ca0ce173547e3edb3e9e75e4d094ecd900f015bbe3f91a614c",
            "file": "projects/arc-lib/src/lib/components/gantt/components/gantt-column/gantt-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gantt-column",
            "styleUrls": [
                "./gantt-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gantt-column.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "contextItemFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "ContextItemFilter<T>",
                    "decorators": []
                },
                {
                    "name": "contextItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "NbMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "GanttTaskValue<T>",
                    "decorators": []
                },
                {
                    "name": "showChildInitials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showKebab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showOverallocatedIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showParentInitials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {AnyObject} from '@project-lib/core/api';\nimport {NbMenuItem} from '@nebular/theme';\nimport {ContextItemFilter, GanttTaskValue} from '../../types';\n\n@Component({\n  selector: 'gantt-column',\n  templateUrl: './gantt-column.component.html',\n  styleUrls: ['./gantt-column.component.scss'],\n})\nexport class GanttColumnComponent<T extends AnyObject> {\n// //  item :GanttTaskValue<T> = {\n\n// }\n  ngOnInit(){\n    console.log(this.item);\n  }\n  @Input()\n  item!: GanttTaskValue<T>;\n\n  @Input()\n  contextItems: NbMenuItem[] = [];\n\n  @Input()\n  active!: boolean;\n\n  @Input()\n  showKebab!: boolean;\n\n  @Input()\n  showParentInitials!: boolean;\n\n  @Input()\n  showChildInitials!: boolean;\n\n  @Input()\n  showOverallocatedIcon!: boolean;\n\n  @Input()\n  contextItemFilter!: ContextItemFilter<T>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @use \"../../../../theme/styles/variables\" as *;\n@use \"projects/arc-lib/src/lib/theme/styles/_variables.scss\" as *;\n@use \"sass:map\";\n\n.column-container {\n  width: 320px;\n\n  .up-down-icon {\n    display: flex;\n    flex-flow: column;\n    justify-content: right;\n    align-items: end;\n    border: 1px solid #cfcecec4;\n\n    nb-icon:nth-child(1) {\n      height: 30px !important;\n      transform: rotate(180deg);\n    }\n\n    nb-icon:nth-child(2) {\n      height: 30px !important;\n      transform: rotate(360deg);\n    }\n  }\n\n  .kebab-container {\n    position: absolute;\n    background: linear-gradient(269.92deg,\n        rgba(253, 254, 255, 0.98) 55.46%,\n        rgba(253, 254, 255, 0.735) 74.95%,\n        rgba(253, 254, 255, 0) 105.92%);\n    right: 2%;\n    opacity: 0;\n    transition: opacity 0.2s ease-in;\n    height: 100%;\n\n    .kebab {\n      padding: 0 2rem;\n    }\n  }\n\n  &:hover,\n  &.active {\n    .kebab-container {\n      opacity: 1;\n    }\n  }\n\n  .expand {\n    height: 100%;\n    margin: 0 0.5rem;\n  }\n\n  .employee-icon {\n    min-width: 2.375rem;\n    height: 2.375rem;\n    border-radius: 50%;\n    background: map.get($color, \"menu-item-active\");\n    color: map.get($font, \"primary\");\n    display: flex;\n    margin: auto 0rem;\n    line-height: 2.175rem;\n\n    &>div {\n      margin: auto;\n    }\n  }\n\n  .with-designation {\n    overflow: hidden;\n    flex-grow: 1;\n    height: 2.175rem;\n    margin: auto 0rem;\n    line-height: 1;\n    padding: 0 1.102rem;\n    font-size: map.get($font-size, default);\n    justify-content: space-between;\n    display: flex;\n    flex-direction: column;\n    max-width: 60%;\n\n    &>.name {\n      font-weight: map.get($font-weight, light);\n      cursor: pointer;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    &>.designation {\n      font-weight: map.get($font-weight, light);\n      color: map.get($color, gantt-subtitle);\n      font-size: map.get($font-size, medium);\n      line-height: 1rem;\n      white-space: nowrap;\n      width: 100%;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n\n  .without-designation {\n    overflow: hidden;\n    flex-grow: 1;\n    height: 2.175rem;\n    margin: auto;\n    line-height: 2;\n    padding: 0 0.2rem;\n    font-size: map.get($font-size, default);\n    justify-content: space-between;\n    display: flex;\n    flex-direction: column;\n\n    &>.name {\n      font-weight: map.get($font-weight, bold);\n    }\n  }\n\n  .overallocation_icon {\n    position: absolute;\n    right: 20%;\n\n    &>.icon {\n      height: 1.25rem;\n      width: 1.25rem;\n    }\n  }\n\n  .overallocation_icon div {\n    display: none;\n    background-color: map.get($color, black-color) !important;\n    color: map.get($font, light);\n    border-radius: 0.5rem;\n    position: absolute;\n    z-index: 1;\n    font-size: 0.75rem;\n    right: -4.063rem;\n    top: -0.313rem;\n  }\n\n  .overallocation_icon:hover div {\n    display: flex;\n    line-height: 1;\n    padding: 0.75rem 1rem;\n  }\n\n  .inner-list {\n    display: flex;\n    align-items: center;\n    border: 1px solid #cfcecec4;\n    padding: 10px;\n\n    .with-designation {\n      .name {\n        margin-top: 10px;\n      }\n\n    }\n  }\n}",
                    "styleUrl": "./gantt-column.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"column-container pl-2\" *ngIf=\"item\">\n  <div class=\"up-down-icon\">\n    <nb-icon *ngIf=\"item.hasChildren\" [icon]=\"item.$open ? 'chevron-up' : 'chevron-down'\" class=\"expand\"\n      data-gantt-click=\"expand\"></nb-icon>\n    <nb-icon *ngIf=\"item.hasChildren\" [icon]=\"item.$open ? 'chevron-up' : 'chevron-down'\" class=\"expand\"\n      data-gantt-click=\"expand\"></nb-icon>\n  </div>\n  <div class=\"inner-list\">\n  <div *ngIf=\"\n      (item.isParent && showParentInitials) ||\n      (!item.isParent && showChildInitials)\n    \" class=\"employee-icon\" data-gantt-click=\"name\">\n    <div>{{ item.name?.charAt(0)?.toUpperCase() }}</div>\n  </div>\n  <div [ngClass]=\"item.subtitle ? 'with-designation' : 'without-designation'\" class=\"name-container\"\n    data-gantt-click=\"name\">\n    <div class=\"name\">{{ item.name }}</div>\n    <div *ngIf=\"!item.hasChildren\" class=\"designation\">\n      {{ item.subtitle }}\n    </div>\n  </div>\n  <div *ngIf=\"showOverallocatedIcon && item.overallocated\" class=\"overallocation_icon\">\n    <div>This resource is over allocated</div>\n    <nb-icon class=\"icon\" icon=\"overallocation\" pack=\"svg-boiler\"></nb-icon>\n  </div>\n  <div class=\"kebab-container\">\n    <nb-icon *ngIf=\"showKebab\" class=\"cursor-pointer kebab\" icon=\"kebab\" pack=\"svg-boiler\"\n      data-gantt-click=\"kebab\"></nb-icon>\n  </div>\n</div>\n</div>\n\n\n<!-- \n<div class=\"column-container pl-2\" *ngIf=\"item\">\n  <nb-icon\n    class=\"icon-down\"\n    *ngIf=\"item.hasChildren\"\n    [icon]=\"item.$open ? 'chevron-up' : 'chevron-down'\"\n    class=\"expand\"\n    gantt-click=\"expand\"\n  ></nb-icon>\n  <div\n    *ngIf=\"\n      (item.isParent && showParentInitials) ||\n      (!item.isParent && showChildInitials)\n    \"\n    class=\"employee-icon\"\n    gantt-click=\"name\"\n  >\n    <div>{{ item.name }}</div>\n  </div>\n  <div\n    *ngIf=\"\n      !showParentInitials && !showChildInitials && !item.isParent && item.parent\n    \"\n    class=\"indentation\"\n  ></div>\n  <div\n    [ngClass]=\"item.subtitle ? 'with-designation' : 'without-designation'\"\n    class=\"name-container\"\n    gantt-click=\"name\"\n  >\n    <div [ngClass]=\"item.hasChildren ? 'bold' : ''\" class=\"name\">\n      {{ item.name }}\n    </div>\n    <div *ngIf=\"!item.hasChildren\" class=\"designation\">\n      {{ item.subtitle }}\n    </div>\n  </div>\n  <div\n    *ngIf=\"showOverallocatedIcon && item.overallocated\"\n    class=\"overallocation_icon\"\n  >\n    <nb-icon\n      class=\"icon\"\n      icon=\"overallocation\"\n      pack=\"svg-boiler\"\n      gantt-hover=\"tooltip\"\n      gantt-tooltip-component=\"textTooltip\"\n      \n    ></nb-icon>\n  </div>\n  <div *ngIf=\"showKebab\" class=\"kebab-container\">\n    <nb-icon\n      class=\"cursor-pointer kebab\"\n      icon=\"kebab\"\n      pack=\"svg-boiler\"\n      gantt-click=\"kebab\"\n    ></nb-icon>\n  </div>\n</div> -->\n<!-- <div class=\"column-container pl-2\" *ngIf=\"item\">\n  <nb-icon\n    *ngIf=\"item.hasChildren\"\n    [icon]=\"item.$open ? 'chevron-up' : 'chevron-down'\"\n    class=\"expand\"\n    data-gantt-click=\"expand\"\n  ></nb-icon>\n  <div\n    *ngIf=\"\n      (item.isParent && showParentInitials) ||\n      (!item.isParent && showChildInitials)\n    \"\n    class=\"employee-icon\"\n    data-gantt-click=\"name\"\n  >\n    <div>{{ item.name?.charAt(0)?.toUpperCase() }}</div>\n  </div>\n  <div\n    [ngClass]=\"item.subtitle ? 'with-designation' : 'without-designation'\"\n    class=\"name-container\"\n    data-gantt-click=\"name\"\n  >\n    <div class=\"name\">{{ item.name }}</div>\n    <div *ngIf=\"!item.hasChildren\" class=\"designation\">\n      {{ item.subtitle }}\n    </div>\n  </div>\n  <div\n    *ngIf=\"showOverallocatedIcon && item.overallocated\"\n    class=\"overallocation_icon\"\n  >\n    <div>This resource is over allocated</div>\n    <nb-icon class=\"icon\" icon=\"overallocation\" pack=\"svg-boiler\"></nb-icon>\n  </div>\n  <div class=\"kebab-container\">\n    <nb-icon\n      *ngIf=\"showKebab\"\n      class=\"cursor-pointer kebab\"\n      icon=\"kebab\"\n      pack=\"svg-boiler\"\n      data-gantt-click=\"kebab\"\n    ></nb-icon> -->\n<!-- </div>\n</div>\n\n\n\n<!-- <div class=\"column-container pl-2\" *ngIf=\"item\">\n  <nb-icon\n    *ngIf=\"item.hasChildren\"\n    [icon]=\"item.$open ? 'chevron-up' : 'chevron-down'\"\n    class=\"expand\"\n    gantt-click=\"expand\"\n  ></nb-icon>\n  <div\n    *ngIf=\"\n      (item.isParent && showParentInitials) ||\n      (!item.isParent && showChildInitials)\n    \"\n    class=\"employee-icon\"\n    gantt-click=\"name\"\n  >\n    <div>{{ item.name }}</div>\n  </div>\n  <div\n    *ngIf=\"\n      !showParentInitials && !showChildInitials && !item.isParent && item.parent\n    \"\n    class=\"indentation\"\n  ></div>\n  <div\n    [ngClass]=\"item.subtitle ? 'with-designation' : 'without-designation'\"\n    class=\"name-container\"\n    gantt-click=\"name\"\n  >\n    <div [ngClass]=\"item.hasChildren ? 'bold' : ''\" class=\"name\">\n      {{ item.name }}\n    </div>\n    <div *ngIf=\"!item.hasChildren\" class=\"designation\">\n      {{ item.subtitle }}\n    </div>\n  </div>\n  <div\n    *ngIf=\"showOverallocatedIcon && item.overallocated\"\n    class=\"overallocation_icon\"\n  >\n    <nb-icon\n      class=\"icon\"\n      icon=\"overallocation\"\n      pack=\"svg-bizbook\"\n      gantt-hover=\"tooltip\"\n      gantt-tooltip-component=\"textTooltip\"\n      \n    ></nb-icon>\n  </div>\n  <div *ngIf=\"showKebab\" class=\"kebab-container\">\n    <nb-icon\n      class=\"cursor-pointer kebab\"\n      icon=\"kebab\"\n      pack=\"svg-bizbook\"\n      gantt-click=\"kebab\"\n    ></nb-icon>\n  </div>\n</div> -->"
        },
        {
            "name": "GanttHeaderComponent",
            "id": "component-GanttHeaderComponent-185725e8a1aa5da146126cea417c03049b1cf76eead33eef088777716e2d4ffea67d84f2871ad838a04929c45f68b6dfd6101172fd26cbcd540b7c987ab265a1",
            "file": "projects/arc-lib/src/lib/components/gantt/components/gantt-header/gantt-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gantt-header",
            "styleUrls": [
                "./gantt-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gantt-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchPlaceholder",
                    "defaultValue": "'Enter your search here'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'gantt-header',\n  templateUrl: './gantt-header.component.html',\n  styleUrls: ['./gantt-header.component.scss'],\n})\nexport class GanttHeaderComponent {\n  @Input()\n  desc!: boolean;\n\n  @Input()\n  name?: string;\n\n  @Input() searchPlaceholder = 'Enter your search here';\n\n  @Input()\n  showSearch!: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @use \"../../../../theme/styles/variables\" as *;\n@use \"projects/arc-lib/src/lib/theme/styles/_variables.scss\" as *;\n@use \"sass:map\";\n\n.header-container {\n  line-height: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .search-bar {\n    display: flex;\n    justify-content: space-between;\n    padding: 0 0.5rem 17px 0.5rem;\n    border-bottom: 0.063rem solid map.get($color, gantt-lines);\n\n    nb-form-field {\n      flex-grow: 1;\n    }\n\n    input {\n      padding: 7px 35px;\n      border: 1px solid #ccc;\n      border-radius: 7px;\n      width: 400px;\n    }\n\n    .search-icon {\n      height: 20px;\n      margin-right: -35px;\n      display: block\n    }\n\n    nb-icon[icon=\"menu-arrow-outline\"] {\n      height: 100%;\n      margin: 0 1rem;\n      cursor: pointer;\n      color: map.get($color, currency-tags);\n      width: 1.059rem;\n      left: 20.83%;\n      right: 8.33%;\n      top: 20.83%;\n      bottom: 70.83%;\n    }\n  }\n\n  .title-bar {\n    align-items: center;\n    flex-grow: 1;\n    font-family: $main-font-family;\n    font-size: map.get($font-size, small);\n    text-transform: uppercase;\n    padding: 0 0.3rem;\n    display: flex;\n    position: absolute;\n    top: 21px;\n    left: 27.5%;\n    flex-direction: row-reverse;\n    gap: 15px;\n    margin-top: 5px;\n\n    .sort {\n\n      &>nb-icon {\n        cursor: pointer;\n        margin: -0.313rem;\n        height: 22px;\n        color: #000000bf;\n\n\n      }\n\n\n\n      .status-primary {\n        transform: rotate(270deg);\n        height: 30px;\n      }\n\n      .status-default {\n        transform: rotate(270deg);\n        height: 30px;\n      }\n    }\n  }\n\n  nb-form-field nb-icon {\n    color: map.get($color, icon);\n  }\n}",
                    "styleUrl": "./gantt-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"header-container\">\n  <div class=\"search-bar\">\n    <nb-form-field class=\"gantt-search\" *ngIf=\"showSearch\">\n      <nb-icon nbPrefix icon=\"search-outline\" class=\"search-icon\"></nb-icon>\n      <input type=\"text\" placeholder=\"{{ searchPlaceholder }}\" status=“info” nbInput />\n    </nb-form-field>\n    <nb-icon *ngIf=\"showSearch\" icon=\"menu-arrow-outline\"></nb-icon>\n  </div>\n  <div class=\"title-bar\">\n    <div class=\"title\">{{ name }}</div>\n    <div class=\"sort\" data-gantt-click=\"sort\">\n      <nb-icon\n        icon=\"chevron-up-outline\"\n        [status]=\"desc === true ? 'primary' : 'default'\"\n      ></nb-icon>\n      <nb-icon\n        icon=\"chevron-down-outline\"\n        [status]=\"desc === false ? 'primary' : 'default'\"\n      ></nb-icon>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GanttTooltipComponent",
            "id": "component-GanttTooltipComponent-a69bfe33576d617f388b9c7b9af53ab17da0ee659e77e927cd037203b4ac261d4abf813ed25dffaf87c2578457839f97a804f80488fc3ef30764f3337ae415f0",
            "file": "projects/arc-lib/src/lib/components/gantt/components/gantt-tooltip/gantt-tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gantt-tooltip",
            "styleUrls": [
                "./gantt-tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gantt-tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubAllocation",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "maxAllocation",
                    "defaultValue": "MAX_ALLOCATION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "formatAllocation",
                    "args": [
                        {
                            "name": "allocation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allocation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatter",
                    "args": [
                        {
                            "name": "rate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {MAX_ALLOCATION} from '@project-lib/core/constants';\nimport {TranslateService} from '@ngx-translate/core';\nimport {SubAllocation} from '../../types';\n\n@Component({\n  selector: 'gantt-tooltip',\n  templateUrl: './gantt-tooltip.component.html',\n  styleUrls: ['./gantt-tooltip.component.scss'],\n})\nexport class GanttTooltipComponent {\n  item!: SubAllocation;\n  maxAllocation = MAX_ALLOCATION;\n\n  constructor(private translate: TranslateService) {}\n\n  formatDate(date: Date) {\n    return  date? new Date(date):new Date();\n  }\n\n  formatter(rate: number) {\n    return `$${rate}/${this.translate.instant('hr')}`;\n  }\n\n  formatAllocation(allocation: number) {\n    return `${allocation}${this.translate.instant('h/d')}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../../theme/styles/variables\" as *;\n@use \"sass:map\";\n\n.gantt-tooltip {\n  background-color: map.get($color, dark);\n  box-shadow: 0 0.25rem 0.375rem map.get($color, tooltip-box-shadow);\n  padding: 1.488rem;\n  border-radius: 0.5rem;\n  font-family: var(--font-family-primary);\n  font-weight: map.get($font-weight, light);\n  font-size: map.get($font-size, default);\n  width: 25rem;\n  max-height: 20rem;\n  overflow-y: auto;\n}\n\n.gantt-tooltip::-webkit-scrollbar {\n  width: 0.5rem !important;\n  height: 0.5rem !important;\n  overflow-x: visible;\n}\n\n.gantt-tooltip::-webkit-scrollbar-thumb {\n  background: map.get($color, border-disable) !important;\n  border-radius: 1.25rem !important;\n  height: 13.18rem !important;\n}\n\n.gantt-tooltip .key {\n  display: flex;\n  line-height: 2.5rem;\n\n  >div:first-child {\n    color: white;\n    width: 12rem;\n    font-weight: bold;\n  }\n\n  >div:last-child {\n    font-weight: map.get($font-weight, bold);\n    font-size: map.get($font-size, large);\n    color: map.get($color, light);\n    width: 20rem;\n    text-align: right;\n  }\n}\n\n.deals {\n  font-weight: map.get($font-weight, bold);\n  font-size: map.get($font-size, large);\n  color: map.get($color, light);\n}\n\nhr {\n  background-color: map.get($font, tooltip-text);\n  margin: auto;\n}\n\n.over-allocated {\n  display: flex;\n  color: map.get($font, tooltip-overallocated-text) !important;\n\n  >div:first-child {\n    text-align: right;\n    width: 100%;\n  }\n}\n\n.arrow {\n  font-size: 1.25rem !important;\n}\n\n.overallocated-hours {\n  color: map.get($font, tooltip-overallocated-text) !important;\n  padding-right: 2rem;\n}\n\n.deal-name {\n  text-decoration: underline;\n  width: 24rem !important;\n  color: map.get($color, light) !important;\n  font-weight: map.get($font-weight, bold);\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding-left: 1rem;\n}",
                    "styleUrl": "./gantt-tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"gantt-tooltip\" gantt-hover=\"tooltip\" *ngIf=\"item\">\n  <div class=\"key\">\n    <div>Start Date</div>\n    <div>\n      {{ formatDate(item.startDate) | date : \"dd/MM/YYYY\" }}\n    </div>\n  </div>\n  <div class=\"key\">\n    <div>End Date</div>\n    <div>\n      {{ formatDate(item.endDate) | date : \"dd/MM/YYYY\" }}\n    </div>\n  </div>\n  <div class=\"key\">\n    <div>Hourly Rate Charged</div>\n    <div>{{ formatter(item.billingRate!) }}</div>\n  </div>\n  <div class=\"key\">\n    <div>Allocated Hours</div>\n    <div>{{ formatAllocation(item.allocatedHours) }}</div>\n  </div>\n  <hr />\n  <div class=\"key\">\n    <div>Current Allocations</div>\n    <div [ngClass]=\"item.allocation > maxAllocation ? 'over-allocated' : ''\">\n      <div *ngIf=\"item.allocation > maxAllocation\">\n        <span class=\"arrow\">&#8593;</span>\n        <span class=\"overallocated-hours\">\n          {{ formatAllocation(item.allocation - maxAllocation) }}\n        </span>\n      </div>\n      <div>\n        {{ formatAllocation(item.allocation) }}\n      </div>\n    </div>\n  </div>\n  <div class=\"key\" *ngFor=\"let deal of item.allotedDeals\">\n    <div class=\"deal-name\">{{ deal.name }}</div>\n    <div>{{ formatAllocation(deal.allocatedHours) }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "projects/arc-lib/src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-ad2f14cf68ed638020557d17e85d630842f1d11d7b77326f4e953ce0f954c5605b57c8b7d2a7e8481e1a3ca4ea7910568da83445350ef7b99dae103e75cefd3f",
            "file": "projects/arc-lib/src/lib/components/auth/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-home-page",
            "styleUrls": [
                "./home-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'lib-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.css']\n})\nexport class HomePageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home-page.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>home-page works!</p>\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-b1ee0314a2da928c9e4d5ad16124e2d9b4f0c55d6852c870b1dad8c6add8a19b1af4188c0883d1f2277aba0e5920d6063af6f2e320c0ec1daa3b1c5ccb3f10d5",
            "file": "projects/arc-lib/src/lib/components/selector/list/list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addTagString",
                    "defaultValue": "'createANewTag'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "allowInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether custom the input is allowed.\n",
                    "description": "<p>Indicates whether custom the input is allowed.</p>\n",
                    "line": 127,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe `disabled` input property is used to determine whether the component should be disabled or not.\nIt has a default value of `false`, which means that the component is enabled by default. If\n`disabled` is set to `true`, the component will be disabled and the user will not be able to\ninteract with it\n",
                    "description": "<p>The <code>disabled</code> input property is used to determine whether the component should be disabled or not.\nIt has a default value of <code>false</code>, which means that the component is enabled by default. If\n<code>disabled</code> is set to <code>true</code>, the component will be disabled and the user will not be able to\ninteract with it</p>\n",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledField",
                    "defaultValue": "'deleted' as keyof InputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe field to show disabled items in the list\n",
                    "description": "<p>The field to show disabled items in the list</p>\n",
                    "line": 67,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "groupConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 171,
                    "type": "GroupConfig<InputType>[]",
                    "decorators": []
                },
                {
                    "name": "hiddenValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide these options in list.\n",
                    "description": "<p>Hide these options in list.</p>\n",
                    "line": 55,
                    "type": "Set<Value>",
                    "decorators": []
                },
                {
                    "name": "idField",
                    "defaultValue": "'id' as IdField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe field in the data item that uniquely identifies it.\n",
                    "description": "<p>The field in the data item that uniquely identifies it.</p>\n",
                    "line": 61,
                    "type": "IdField",
                    "decorators": []
                },
                {
                    "name": "itemHeight",
                    "defaultValue": "ITEM_HEIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 168,
                    "type": "TemplateRef<ItemTemplate<InputType, InputType>>",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false as MultipleMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "MultipleMode",
                    "decorators": []
                },
                {
                    "name": "nameField",
                    "defaultValue": "'name' as keyof InputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the field in the generic type T that contains the name of the\nitem to display. This is used to read the name of each item in the list.\n",
                    "description": "<p>The name of the field in the generic type T that contains the name of the\nitem to display. This is used to read the name of each item in the list.</p>\n",
                    "line": 49,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "noDataText",
                    "defaultValue": "'noDataLbl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to display when no data is available\n",
                    "description": "<p>The text to display when no data is available</p>\n",
                    "line": 113,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noSearchResultText",
                    "defaultValue": "'noResultLbl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis is the search result text to be displayed when no search result is found.\n",
                    "description": "<p>This is the search result text to be displayed when no search result is found.</p>\n",
                    "line": 107,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of items to display.\n",
                    "description": "<p>The list of items to display.</p>\n",
                    "line": 42,
                    "type": "InputType[]",
                    "decorators": []
                },
                {
                    "name": "removal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe removal input is a boolean value that determines whether or not the\ncomponent should be rendered in removal mode\n",
                    "description": "<p>The removal input is a boolean value that determines whether or not the\ncomponent should be rendered in removal mode</p>\n",
                    "line": 88,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "search",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to show the search box.\n",
                    "description": "<p>Whether to show the search box.</p>\n",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchPlaceholder",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "SelectionModel<Value>",
                    "decorators": []
                },
                {
                    "name": "selectOnEnter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 161,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSelectedOnTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a value of true when the user clicks the close button.\n",
                    "description": "<p>Emits a value of true when the user clicks the close button.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3269,
                            "end": 3351,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 3270,
                                "end": 3281,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "description"
                            },
                            "comment": "<p>Emits a value of true when the user clicks the close button.</p>\n"
                        }
                    ],
                    "line": 137,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the selected value when the user toggles an option.\n",
                    "description": "<p>Emits the selected value when the user toggles an option.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3481,
                            "end": 3544,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 3482,
                                "end": 3487,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value of the option that the user toggled.</p>\n",
                            "name": {
                                "pos": 3488,
                                "end": 3493,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 144,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "groupIndexMap",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<number | string>",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "removed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<InputType>",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "searchControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormControl",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "viewport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "visibleList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType[]",
                    "optional": false,
                    "description": "",
                    "line": 156
                }
            ],
            "methodsClass": [
                {
                    "name": "_sortSelectedOptions",
                    "args": [
                        {
                            "name": "groupedData",
                            "type": "InputType[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "groupedData",
                            "type": "InputType[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enterOnSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the user presses enter on the search box, and there are items in the list, select the first item\nin the list\n",
                    "description": "<p>If the user presses enter on the search box, and there are items in the list, select the first item\nin the list</p>\n"
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the name of the item by getting the value of the name field of the item.\n",
                    "description": "<p>Get the name of the item by getting the value of the name field of the item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5585,
                                "end": 5589,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5567,
                                "end": 5572,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item that we&#39;re getting the name of</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 5573,
                                "end": 5584,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 5574,
                                    "end": 5583,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 5574,
                                        "end": 5583,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 5650,
                                "end": 5657,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The name of the item.</p>\n"
                        }
                    ]
                },
                {
                    "name": "isPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the id of the item is a string and it's equal to the placeholder item, then return true.\nOtherwise, return false\n",
                    "description": "<p>If the id of the item is a string and it&#39;s equal to the placeholder item, then return true.\nOtherwise, return false</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6423,
                                "end": 6427,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6405,
                                "end": 6410,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item to check</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 6411,
                                "end": 6422,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 6412,
                                    "end": 6421,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 6412,
                                        "end": 6421,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 6466,
                                "end": 6473,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A boolean value.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter the view is initialized, if the searchInput exists, focus on it.\n",
                    "description": "<p>After the view is initialized, if the searchInput exists, focus on it.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt initializes the removed set, the visible list, and the search control\n",
                    "description": "<p>It initializes the removed set, the visible list, and the search control</p>\n"
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt removes an item from the list, emits an event, and then checks if the list is empty\n",
                    "description": "<p>It removes an item from the list, emits an event, and then checks if the list is empty</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5896,
                                "end": 5900,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5878,
                                "end": 5883,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item to be removed from the list</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 5884,
                                "end": 5895,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 5885,
                                    "end": 5894,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 5885,
                                        "end": 5894,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "setGroupIndex",
                    "args": [
                        {
                            "name": "groupedData",
                            "type": "InputType[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupedData",
                            "type": "InputType[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortByGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function takes an item of type T, and emits an event with the item as the payload\n",
                    "description": "<p>The function takes an item of type T, and emits an event with the item as the payload</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5298,
                                "end": 5302,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5280,
                                "end": 5285,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item that was clicked</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 5286,
                                "end": 5297,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 5287,
                                    "end": 5296,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 5287,
                                        "end": 5296,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {SelectionModel} from '@angular/cdk/collections';\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport {UntypedFormControl} from '@angular/forms';\nimport {orderBy} from 'lodash';\nimport {ITEM_HEIGHT, PLACEHOLDER_ITEM} from '../constants';\nimport {GroupConfig, ItemTemplate} from '../types';\nimport {OptionType} from '@project-lib/core/constants';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListComponent<\n  InputType,\n  MultipleMode extends boolean,\n  Value extends InputType[IdField],\n  IdField extends keyof InputType,\n> implements OnInit, AfterViewInit, OnChanges\n{\n  constructor(private _cdr: ChangeDetectorRef) {}\n  /**\n   * The list of items to display.\n   */\n  @Input()\n  options?: InputType[] = [];\n\n  /**\n   * The name of the field in the generic type T that contains the name of the\n   * item to display. This is used to read the name of each item in the list.\n   */\n  @Input()\n  nameField: keyof InputType = 'name' as keyof InputType;\n\n  /**\n   * Hide these options in list.\n   */\n  @Input()\n  hiddenValues?: Set<Value>;\n\n  /**\n   * The field in the data item that uniquely identifies it.\n   */\n  @Input()\n  idField: IdField = 'id' as IdField;\n\n  /**\n   * The field to show disabled items in the list\n   */\n  @Input()\n  disabledField: keyof InputType = 'deleted' as keyof InputType;\n\n  /* height of the each items in the list. */\n  @Input()\n  itemHeight = ITEM_HEIGHT;\n\n  /* A boolean that is used to determine if the user can select multiple items in the list. */\n  @Input()\n  multiple: MultipleMode = false as MultipleMode;\n\n  /**\n   * Whether to show the search box.\n   */\n  @Input()\n  search = true;\n\n  /**\n   * The removal input is a boolean value that determines whether or not the\n   * component should be rendered in removal mode\n   */\n  @Input()\n  removal = false;\n\n  /**\n   * The `disabled` input property is used to determine whether the component should be disabled or not.\n   * It has a default value of `false`, which means that the component is enabled by default. If\n   * `disabled` is set to `true`, the component will be disabled and the user will not be able to\n   * interact with it\n   */\n  @Input()\n  disabled = false;\n\n  /* Placeholder for the search input */\n  @Input()\n  searchPlaceholder = 'search';\n\n  /**\n   * This is the search result text to be displayed when no search result is found.\n   */\n  @Input()\n  noSearchResultText = 'noResultLbl';\n\n  /**\n   * The text to display when no data is available\n   */\n  @Input()\n  noDataText = 'noDataLbl';\n\n  /* label to show to add a custom item in the dropdown */\n  @Input()\n  addTagString = 'createANewTag';\n\n  /* When the user presses enter while searching, the first item visible is selected */\n  @Input()\n  selectOnEnter = true;\n\n  /**\n   * Indicates whether custom the input is allowed.\n   */\n  @Input()\n  allowInput = false;\n\n  @Input()\n  selections: SelectionModel<Value>;\n\n  /**\n   * @description\n   * Emits a value of true when the user clicks the close button.\n   */\n  @Output()\n  closed = new EventEmitter<boolean>();\n\n  /**\n   * Emits the selected value when the user toggles an option.\n   * @param value The value of the option that the user toggled.\n   */\n  @Output()\n  toggle = new EventEmitter<InputType>();\n\n  /* Emits an event when an item is removed */\n  @Output()\n  remove = new EventEmitter<InputType>();\n\n  @ViewChild('searchInput')\n  searchInput: ElementRef;\n\n  @ViewChild(CdkVirtualScrollViewport)\n  viewport: CdkVirtualScrollViewport;\n\n  visibleList: InputType[] = [];\n  searchControl: UntypedFormControl;\n  removed: Set<InputType>;\n\n  @Input()\n  showIcon: boolean;\n\n  /* whether to show selected options on top */\n  @Input()\n  showSelectedOnTop: boolean;\n\n  @Input()\n  itemTemplate: TemplateRef<ItemTemplate<InputType, keyof InputType>>;\n\n  @Input()\n  groupConfig?: GroupConfig<InputType>[] = [];\n  groupIndexMap: Record<number, string> = {};\n  /**\n   * It initializes the removed set, the visible list, and the search control\n   */\n  ngOnInit(): void {\n    this.removed = new Set();\n    this.visibleList = Object.assign([], this.options);\n    this.sortByGroups();\n    this.searchControl = new UntypedFormControl();\n    this.searchControl.valueChanges.subscribe(value => {\n      this.visibleList =\n        this.options?.filter(\n          item =>\n            !value ||\n            this.getName(item).toLowerCase().includes(value.toLowerCase()),\n        ) ?? [];\n      this.sortByGroups();\n    });\n  }\n\n  /**\n   * After the view is initialized, if the searchInput exists, focus on it.\n   */\n  ngAfterViewInit(): void {\n    if (this.searchInput) {\n      this.searchInput.nativeElement.focus();\n      this._cdr.detectChanges();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['options']) {\n      this.visibleList = Object.assign([], this.options);\n    }\n  }\n\n  /**\n   * The function takes an item of type T, and emits an event with the item as the payload\n   * @param {InputType} item - InputType - the item that was clicked\n   */\n  toggleItem(item: InputType) {\n    this.toggle.emit(item);\n    if (this.allowInput) {\n      this.closed.emit();\n    }\n  }\n\n  /**\n   * Get the name of the item by getting the value of the name field of the item.\n   * @param {InputType} item - InputType - the item that we're getting the name of\n   * @returns The name of the item.\n   */\n  getName(item: InputType) {\n    return item[this.nameField] as unknown as string;\n  }\n\n  /**\n   * It removes an item from the list, emits an event, and then checks if the list is empty\n   * @param {InputType} item - InputType - the item to be removed from the list\n   */\n  removeItem(item: InputType) {\n    this.removed.add(item);\n    this.remove.emit(item);\n    this.visibleList =\n      this.options?.filter(item => !this.removed.has(item)) ?? [];\n    if (this.visibleList.length) {\n      this.viewport?.checkViewportSize();\n    } else {\n      this.closed.emit(true);\n    }\n  }\n\n  /**\n   * If the id of the item is a string and it's equal to the placeholder item, then return true.\n   * Otherwise, return false\n   * @param {InputType} item - InputType - the item to check\n   * @returns A boolean value.\n   */\n  isPlaceholder(item: InputType) {\n    const id = item[this.idField];\n    if (typeof id === 'string' && id === PLACEHOLDER_ITEM) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * If the user presses enter on the search box, and there are items in the list, select the first item\n   * in the list\n   */\n  enterOnSearch() {\n    if (!this.removal && this.visibleList.length) {\n      this.toggleItem(this.visibleList[0]);\n    }\n  }\n\n  sortByGroups() {\n    let groupedData: InputType[][] = [[], []];\n    if (this.groupConfig?.length) {\n      groupedData = this.groupConfig.map(() => []);\n      this.visibleList?.forEach(option => {\n        const group = this.groupConfig!.findIndex(\n          group =>\n            (group.value === '*' && option[group.fieldName]) ||\n            option[group.fieldName] === group.value,\n        );\n        if (group !== -1) groupedData[group].push(option);\n      });\n      this.setGroupIndex(groupedData);\n    } else if (this.showSelectedOnTop) {\n      groupedData = this._sortSelectedOptions(groupedData);\n    } else {\n      //intentional\n    }\n\n    if (groupedData[0].length || groupedData[1].length) {\n      this.visibleList = groupedData.flat();\n    }\n  }\n  setGroupIndex(groupedData: InputType[][]) {\n    if (this.groupConfig)\n      this.groupIndexMap = this.groupConfig.reduce(\n        (acc, obj, index) =>\n          obj.groupName ? {...acc, [index]: obj.groupName} : acc,\n        {},\n      );\n\n    let dataLength = 0;\n    groupedData.forEach(data => {\n      if (data.length > 0) {\n        dataLength = dataLength + 1;\n      }\n    });\n    if (dataLength <= 1) {\n      this.groupIndexMap = {};\n    }\n  }\n\n  private _sortSelectedOptions(groupedData: InputType[][]) {\n    this.visibleList?.forEach(option => {\n      if (option['isSelected' as keyof InputType]) {\n        groupedData[OptionType.Selected].push(option);\n      } else {\n        groupedData[OptionType.UnSelected].push(option);\n      }\n    });\n\n    groupedData.forEach((data, index) => {\n      groupedData[index] = orderBy(\n        data,\n        [\n          option =>\n            (\n              option['name' as keyof InputType] as unknown as string\n            ).toLocaleLowerCase(),\n        ],\n        'asc',\n      );\n    });\n    return groupedData;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n// @import \"../../../theme/styles/variables\";\n@use 'projects/arc-lib/src/lib/theme/styles/_variables.scss' as *;\n\n.select-panel {\n  font-family: $main-font-family;\n  font-weight: map.get($font-weight, lightest);\n  background: map.get($color, light);\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n\n  .search-div {\n    padding: 0.4rem 0.75rem;\n  }\n\n  .list {\n    flex-grow: 1;\n\n    .item {\n      // 38px to match item height in component\n      height: 2.375rem;\n      cursor: pointer;\n\n      &.top-buffer:first-child {\n        margin-top: 0.4rem;\n      }\n\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 0.4rem 0.75rem;\n\n      nb-checkbox {\n        margin-bottom: -0.188rem;\n      }\n\n      &:hover {\n        background: map.get($color, background-basic);\n      }\n\n      &.selected {\n        background: map.get($color, list-selected);\n      }\n\n      &.disabled {\n        color: map.get($font, disable);\n        pointer-events: none;\n      }\n\n      div {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n        max-width: 90%;\n      }\n\n      .add-tag-item {\n        color: map.get($color, primary);\n      }\n    }\n  }\n\n  .no-results-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .no-results {\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n}\n\n.label-item {\n  line-height: 1rem;\n  letter-spacing: 0rem;\n  text-align: left;\n  margin-left: 0.8rem;\n}\n\n.list-icon {\n  display: inline-block;\n  background: map.get($color, 'menu-item-active');\n  color: map.get($font, 'primary');\n  width: 2rem;\n  height: 2rem !important;\n  margin-right: 0.5rem;\n  line-height: 2rem;\n  text-align: center;\n  border-radius: 50%;\n}\n.search-input {\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  padding: 7px;\n  min-width: 25%;\n  font-size: 15px;\n  &:focus {\n    color: #495057;\n    background-color: #fff;\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n}\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"select-panel h-100\">\n  <div class=\"search-panel\" *ngIf=\"search\">\n    <div class=\"search-div\">\n      <nb-form-field>\n        <nb-icon nbPrefix icon=\"search-outline\" pack=\"eva\"></nb-icon>\n        <nb-icon\n          nbSuffix\n          icon=\"close-outline\"\n          pack=\"eva\"\n          class=\"close-icon\"\n          (click)=\"searchControl.reset()\"\n          *ngIf=\"searchControl.value?.length\"\n        ></nb-icon>\n        <input\n          type=\"text\"\n          fullWidth\n          [formControl]=\"searchControl\"\n          [placeholder]=\"searchPlaceholder | translate\"\n          #searchInput\n          (keyup.enter)=\"selectOnEnter && enterOnSearch()\"\n          nbInput\n          class=\"search-input\"\n        />\n      </nb-form-field>\n    </div>\n  </div>\n  <cdk-virtual-scroll-viewport\n    class=\"list w-100\"\n    appendOnly\n    [itemSize]=\"itemHeight\"\n    [minBufferPx]=\"itemHeight * 5\"\n    [maxBufferPx]=\"itemHeight * 20\"\n    #viewport\n    *ngIf=\"visibleList.length\"\n  >\n    <ng-container *cdkVirtualFor=\"let item of visibleList; let i = index\">\n      <div\n        class=\"label-item font-size-14 font-weight-600 mb-2 mt-1 ml-3\"\n        *ngIf=\"groupIndexMap[i]\"\n      >\n        {{ groupIndexMap[i] }}\n      </div>\n      <ng-container *ngIf=\"!hiddenValues || !hiddenValues?.has(item[idField])\">\n        <div\n          class=\"item\"\n          [class.disabled]=\"item[disabledField]\"\n          [class.selected]=\"\n            !multiple &&\n            !removal &&\n            selections.isSelected(item[idField]) &&\n            !item[disabledField]\n          \"\n          (click)=\"!removal && toggleItem(item); $event.stopPropagation()\"\n        >\n          <nb-checkbox\n            *ngIf=\"multiple\"\n            [class.disabled]=\"item[disabledField]\"\n            [checked]=\"selections.isSelected(item[idField])\"\n            (click)=\"$event.preventDefault()\"\n            (checkedChange)=\"toggleItem(item)\"\n            class=\"w-100\"\n            >{{ item[nameField] }}</nb-checkbox\n          >\n          <div *ngIf=\"!multiple\">\n            <ng-container *ngIf=\"allowInput; else noInputTemplate\">\n              <ng-container\n                *ngIf=\"!isPlaceholder(item); else placeholderTemplate\"\n                >{{ item[nameField] }}</ng-container\n              >\n              <ng-template #placeholderTemplate\n                ><span class=\"add-tag-item\">\n                  {{ addTagString | translate : {name: item[nameField]} }}\n                </span></ng-template\n              >\n            </ng-container>\n            <ng-template #noInputTemplate>\n              <ng-container *ngIf=\"itemTemplate; else defaultItemTemplate\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    itemTemplate;\n                    context: {item, name: item[nameField]}\n                  \"\n                ></ng-container>\n              </ng-container>\n              <ng-template #defaultItemTemplate>\n                <span *ngIf=\"showIcon\" class=\"list-icon h-100\">\n                  {{ item.name.charAt(0).toUpperCase() }}\n                </span>\n                <span>{{ item[nameField] }}</span>\n              </ng-template>\n            </ng-template>\n          </div>\n          <ng-container *ngIf=\"removal && !disabled\">\n            <nb-icon\n              icon=\"close-outline\"\n              class=\"float-right\"\n              (click)=\"removeItem(item)\"\n            ></nb-icon>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n  <div class=\"no-results-container h-100 w-100\" *ngIf=\"!visibleList.length\">\n    <div class=\"no-results\" *ngIf=\"searchControl.value; else noData\">\n      {{ noSearchResultText | translate }}\n    </div>\n    <ng-template #noData>\n      <div class=\"no-results\">{{ noDataText | translate }}</div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-c7e84796d94b3fdede3d79a4859a2c1a3cd18933f47b50dbc0bc164f8ed591dabdf1d024330292bc71ead03fb64ef4ce7bdcceb9bd80fb43473edf9b426f933f",
            "file": "projects/arc-lib/src/lib/components/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "loginViaGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "getChildRouteParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "getDataParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "getQueryParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "getRouteParam",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "getRouteParamObservable",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "navigateHome",
                    "args": [
                        {
                            "name": "homePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "homePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RouteComponentBaseDirective"
                    }
                },
                {
                    "name": "blurActiveElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "clearAllSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Location} from '@angular/common';\nimport {Component, Inject} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {AuthService} from '@project-lib/core/auth';\nimport {RouteComponentBaseDirective} from '@project-lib/core/route-component-base';\n\n// import { APP_BASE_HREF } from '@angular/common';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent extends RouteComponentBaseDirective {\n  imageUrl: string;\n  altText: string;\n  constructor(\n    override readonly route: ActivatedRoute,\n    override readonly location: Location,\n    private readonly authService: AuthService,\n  //   @Inject(APP_BASE_HREF)\n  //   private baseHref: string\n  ) {\n    super(route, location);\n    this.imageUrl = '../../../images/auth/angular.png';\n  this.altText = 'logo';\n  }\n  // imageUrl = '../../../assets/images/auth/angular.png';\n  // altText = 'logo';\n//  \"\"\n//  projects/arc-lib/src/lib/assets/images/auth/angular.png\n  loginViaGoogle() {\n    this.authService.loginViaGoogle();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"sass:map\";\n@use \"../../../theme/styles/variables\" as *;\n@use \"../../../../styles.scss\" as *;\n@use \"../../../../../../arc/src/themes.scss\"  as *;\n\n\n:host {\n  .logo {\n    padding-top: 10%;\n  }\n\n  .description {\n    padding-top: 10%;\n  }\n\n  .login-btn {\n    padding-top: 7%;\n  }\n\n  .footer {\n    padding-top: 7%;\n  }\n}\n*{font-family: 'Montserrat,Open Sans,sans-serif',}\n\n.google-btn {\n  width: 24.125rem;\n  height: 4rem;\n  border-radius: 0.375rem;\n  font-size: 1.25rem;\n  font-family: #{nb-theme(font-family-primary)};\n  font-weight: 600;\n  line-height: 1.5rem;\n  background-color: map.get($font, \"light\");\n  border: 0.063rem solid map.get($color, \"border-disable\");\n  position: absolute;\n\n  &:hover {\n    border-color: map-get($font, \"placeholder\");\n  }\n\n  &:active {\n    border-color: map-get($font, \"primary\");\n  }\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "RouteComponentBaseDirective",
            "templateData": "<nb-card class=\"h-100\">\n  <nb-card-body>\n    <div class=\"align-center logo\">\n      <img width=\"20%\" [src]= \"imageUrl\" [alt]=\"altText\" draggable=\"false\"\n        height=\"126px\" width=\"120px\" />\n\n      <!-- src=\"baseHref + 'images/auth/angular.png'\"  -->\n    </div>\n    <div class=\"align-center description text-center\">\n      <h2>Hello and Welcome! to the Angular Boiler Plate</h2>\n    </div>\n    <div class=\"align-center text-center\">\n      <span class=\"w-60\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam egestas\n        dui sit amet purus consequat, sed ornare nulla imperdiete tiam egestas\n        dui sit amet.</span>\n    </div>\n    <div class=\"align-center login-btn\">\n      <button (click)=\"loginViaGoogle()\" class=\"google-btn\">\n        Continue with Google\n      </button>\n    </div>\n    <div class=\"align-center footer\">\n      <span class=\" text-center\">\n        By continuing with Google, you agree to our Terms of Service and Privacy\n        Policy.\n      </span>\n    </div>\n  </nb-card-body>\n</nb-card>"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-8f4714c4e1858a95ba5e851c7a516f1860006c66c607d52e93181d55d7faa12a81debba3eaa5e9f0bfbfb4a6a43ae973b14a1441a5b053a4268680501fc32c5d",
            "file": "projects/arc-lib/src/lib/components/auth/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'lib-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent {\n  image:string;\n  altText:string;\nconstructor(){\n    this.image=\"../../../images/auth/login-img.png\" \n    this.altText=\"loginImg\"\n}\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-section {\n    display: flex;\n}\n.first {\n    width: 50%;\n}\n.main-section .first .nb-card{\n   margin: 0;\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "\n  <div class=\"main-section\">\n    <div class=\"first\">\n      <nb-card class=\"h-100 m-0\">\n        <nb-card-body class=\"p-0\">\n          <!-- Include the Login Component here -->\n          <app-login>\n\n          </app-login>\n      \n        \n        </nb-card-body>\n      </nb-card>\n    </div>\n\n    <div class=\"first\">\n      <nb-layout>\n        <nb-layout-column>\n          <div class=\"login-img\">\n            <img width=\"90%\" [src]=\"image\" [alt]=\"altText\" />\n          </div>\n        </nb-layout-column>\n      </nb-layout>\n    </div>\n  </div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "projects/arc-lib/src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-52f90d6ab221e03e6cfd4ad3e3608c59e829cc12691cd9b1d13dbd7d897e7220414b1f2578d7123bd6a1b8bb6fec503098730520b464d4530cca367bff553e46",
            "file": "projects/arc-lib/src/lib/components/selector/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: SelectComponent,\n}",
                    "type": "component"
                }
            ],
            "selector": "selector",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addTagString",
                    "defaultValue": "'createANewTag'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 213,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "allowInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether custom the input is allowed.\n",
                    "description": "<p>Indicates whether custom the input is allowed.</p>\n",
                    "line": 205,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 199,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledField",
                    "defaultValue": "'deleted' as keyof InputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe field to show disabled items in the list\n",
                    "description": "<p>The field to show disabled items in the list</p>\n",
                    "line": 156,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "groupConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 221,
                    "type": "GroupConfig<InputType>[]",
                    "decorators": []
                },
                {
                    "name": "hiddenValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide these options in list.\n",
                    "description": "<p>Hide these options in list.</p>\n",
                    "line": 189,
                    "type": "Set<Value>",
                    "decorators": []
                },
                {
                    "name": "idField",
                    "defaultValue": "'id' as IdField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe field in the data item that uniquely identifies it.\n",
                    "description": "<p>The field in the data item that uniquely identifies it.</p>\n",
                    "line": 138,
                    "type": "IdField",
                    "decorators": []
                },
                {
                    "name": "inputMinWidth",
                    "defaultValue": "INPUT_MIN_WIDTH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 233,
                    "type": "TemplateRef<ItemTemplate<InputType, InputType>>",
                    "decorators": []
                },
                {
                    "name": "maxVisibleItems",
                    "defaultValue": "MIN_VISIBLE_ITEMS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 209,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false as MultipleMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 171,
                    "type": "MultipleMode",
                    "decorators": []
                },
                {
                    "name": "nameField",
                    "defaultValue": "'name' as keyof InputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the field in the generic type T that contains the name of the\nitem to display. This is used to read the name of each item in the list.\n",
                    "description": "<p>The name of the field in the generic type T that contains the name of the\nitem to display. This is used to read the name of each item in the list.</p>\n",
                    "line": 150,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe options that will be displayed in the select.\n",
                    "description": "<p>The options that will be displayed in the select.</p>\n",
                    "line": 177,
                    "type": "InputType[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed in the input box when no value is entered.\n",
                    "description": "<p>The text to be displayed in the input box when no value is entered.</p>\n",
                    "line": 162,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "search",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to show the search box.\n",
                    "description": "<p>Whether to show the search box.</p>\n",
                    "line": 195,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchPlaceholder",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 217,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectOnEnter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to select the first option when the user presses enter\n",
                    "description": "<p>Whether to select the first option when the user presses enter</p>\n",
                    "line": 226,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showClearAll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable cross icon in input field.\n",
                    "description": "<p>Disable cross icon in input field.</p>\n",
                    "line": 183,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nshowIcon allows user to show initial of the option as an icon\n",
                    "description": "<p>showIcon allows user to show initial of the option as an icon</p>\n",
                    "line": 144,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSelectedOnTop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 6995,
                            "end": 7044,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 6996,
                                "end": 7001,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>ValueType&lt;MultipleMode, Value&gt;</li>\n</ul>\n",
                            "name": {
                                "pos": 7002,
                                "end": 7007,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nThe function sets the value of the selection model to the value passed in\n",
                    "description": "<p>The function sets the value of the selection model to the value passed in</p>\n",
                    "line": 279,
                    "type": "ValueType<MultipleMode, Value>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "added",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 242,
                    "type": "EventEmitter"
                },
                {
                    "name": "cleared",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 248,
                    "type": "EventEmitter"
                },
                {
                    "name": "newAdded",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 236,
                    "type": "EventEmitter"
                },
                {
                    "name": "newRemoved",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 239,
                    "type": "EventEmitter"
                },
                {
                    "name": "removed",
                    "defaultValue": "new EventEmitter<InputType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 245,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<ValueType<MultipleMode, Value>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 251,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autoCompleteInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autoCompleteInput'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "currentPanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Panel<InputType>",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "currentPanelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelType",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "dropdownHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "itemHeight",
                    "defaultValue": "ITEM_HEIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 254
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 256
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "padding",
                    "defaultValue": "TAG_PADDING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "panels",
                    "defaultValue": "cloneDeep(panelConfigs)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<PanelType | Panel<InputType>>",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "positions",
                    "defaultValue": "[\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n      offsetY: 5,\n    },\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'bizbook-select-panel-above',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectedPosition[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "searchHeight",
                    "defaultValue": "SEARCH_HEIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "new SelectionModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionModel<InputType>",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "selections",
                    "defaultValue": "new SelectionModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionModel<Value>",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "state",
                    "defaultValue": "SelectState.Closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectState",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "states",
                    "defaultValue": "SelectState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "suffixCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "suffixWidth",
                    "defaultValue": "SUFFIX_WIDTH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "tagMargin",
                    "defaultValue": "TAG_MARGIN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NbTagComponent>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "NbTagComponent"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "types",
                    "defaultValue": "PanelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "visibleTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType[]",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "width",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_dropdownHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 713,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n_dropdownHeight() is a private function that calculates the panelHeight property based on the number\nof items in the data array and the `maxVisibleItems` property.\nIf the `search` property is true, then it adds the `searchHeight` property to the panelHeight.\n",
                    "description": "<p>_dropdownHeight() is a private function that calculates the panelHeight property based on the number\nof items in the data array and the <code>maxVisibleItems</code> property.\nIf the <code>search</code> property is true, then it adds the <code>searchHeight</code> property to the panelHeight.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_initSelectionModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 674,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n> Initialize the selection models based on the `multiple` property\n",
                    "description": "<blockquote>\n<p>Initialize the selection models based on the <code>multiple</code> property</p>\n</blockquote>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_panelHeight",
                    "args": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "InputType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 700,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt sets the height of the `panel` div to the height of the number of items in the `invisibleTags`\narray, or the `maxVisibleItems` property, whichever is smaller\n",
                    "description": "<p>It sets the height of the <code>panel</code> div to the height of the number of items in the <code>invisibleTags</code>\narray, or the <code>maxVisibleItems</code> property, whichever is smaller</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "InputType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_panelWidth",
                    "args": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 690,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt updates the width of the panel overlay element.\n",
                    "description": "<p>It updates the width of the panel overlay element.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_processChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 607,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA function that is called when the selection changes.\n",
                    "description": "<p>A function that is called when the selection changes.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_setIsSelectedOption",
                    "args": [
                        {
                            "name": "items",
                            "type": "InputType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 724,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "InputType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setSelections",
                    "args": [
                        {
                            "name": "value",
                            "type": "ValueType<MultipleMode | Value>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 623,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n`this._setSelections` is a private function that updates the value of the selections\n",
                    "description": "<p><code>this._setSelections</code> is a private function that updates the value of the selections</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 17368,
                                "end": 17373,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "ValueType<MultipleMode | Value>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17362,
                                "end": 17367,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>ValueType&lt;MultipleMode, Value&gt;</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "_updateEmptyState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 638,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the selectedItems.selected array is empty, then set the isEmpty variable to true. Otherwise, set\nit to false\n",
                    "description": "<p>If the selectedItems.selected array is empty, then set the isEmpty variable to true. Otherwise, set\nit to false</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_updateWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 682,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt updates the width of the dropdown overlay element.\n",
                    "description": "<p>It updates the width of the dropdown overlay element.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "asString",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 585,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt takes an item of type T and returns it as a string\n",
                    "description": "<p>It takes an item of type T and returns it as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16226,
                                "end": 16230,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16216,
                                "end": 16221,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>T - The item to be converted to a string.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 16222,
                                "end": 16225,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 16223,
                                    "end": 16224,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 16223,
                                        "end": 16224,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "T"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 16281,
                                "end": 16288,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The item as a string.</p>\n"
                        }
                    ]
                },
                {
                    "name": "autocompleteEnter",
                    "args": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the user presses enter, clear the input and if there's an autocomplete suggestion, select it\n",
                    "description": "<p>If the user presses enter, clear the input and if there&#39;s an autocomplete suggestion, select it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12853,
                                "end": 12858,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "input"
                            },
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12828,
                                "end": 12833,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>HTMLInputElement - the input element that the user is typing in</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 12834,
                                "end": 12852,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 12835,
                                    "end": 12851,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 12835,
                                        "end": 12851,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "HTMLInputElement"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt clears the selections and selectedItems collections, then emits the cleared event\n",
                    "description": "<p>It clears the selections and selectedItems collections, then emits the cleared event</p>\n"
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 510,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function closes the dropdown and tells Angular to check for changes\n",
                    "description": "<p>The function closes the dropdown and tells Angular to check for changes</p>\n"
                },
                {
                    "name": "closePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf there is a current panel, set its state to closed and clear the current panel and panel type\n",
                    "description": "<p>If there is a current panel, set its state to closed and clear the current panel and panel type</p>\n"
                },
                {
                    "name": "emitNewValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 518,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt emits the new value of the select box\n",
                    "description": "<p>It emits the new value of the select box</p>\n"
                },
                {
                    "name": "handleAutocompleteSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 485,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the item is a placeholder, then select it and emit the newAdded event. Otherwise, toggle the item\ndropdown.\n",
                    "description": "<p>If the item is a placeholder, then select it and emit the newAdded event. Otherwise, toggle the item\ndropdown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13326,
                                "end": 13330,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13308,
                                "end": 13313,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - this is the item that was selected from the autocomplete\ndropdown.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 13314,
                                "end": 13325,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 13315,
                                    "end": 13324,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 13315,
                                        "end": 13324,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "isPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 595,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the id of the item is a string and it's equal to the placeholder item, then return true.\nOtherwise, return false\n",
                    "description": "<p>If the id of the item is a string and it&#39;s equal to the placeholder item, then return true.\nOtherwise, return false</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16541,
                                "end": 16545,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16523,
                                "end": 16528,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item to check</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 16529,
                                "end": 16540,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 16530,
                                    "end": 16539,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 16530,
                                        "end": 16539,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 16584,
                                "end": 16591,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A boolean value.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 502,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe funtion closes the dropdown, change detection is triggered internally by the update width method\n",
                    "description": "<p>The funtion closes the dropdown, change detection is triggered internally by the update width method</p>\n"
                },
                {
                    "name": "openPanel",
                    "args": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ValueType<MultipleMode | Value>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ValueType<MultipleMode | Value>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "item",
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the item is not a placeholder, toggle the item in the selections array. If the item is a\nplaceholder, and it is not selected, emit the item as a newRemoved event\n",
                    "description": "<p>If the item is not a placeholder, toggle the item in the selections array. If the item is a\nplaceholder, and it is not selected, emit the item as a newRemoved event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9139,
                                "end": 9143,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "InputType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9121,
                                "end": 9126,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>InputType - the item that was selected/deselected</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 9127,
                                "end": 9138,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 9128,
                                    "end": 9137,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 9128,
                                        "end": 9137,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "InputType"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the state is closed, open the dropdown, otherwise close it\n",
                    "description": "<p>If the state is closed, open the dropdown, otherwise close it</p>\n"
                },
                {
                    "name": "togglePanel",
                    "args": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the panel is closed, open it, otherwise close it\n",
                    "description": "<p>If the panel is closed, open it, otherwise close it</p>\n",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "PanelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAutocompleteOptions",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt filters the autocomplete options based on the value of the input, and adds a placeholder option\nif the value is not found in the data\n",
                    "description": "<p>It filters the autocomplete options based on the value of the input, and adds a placeholder option\nif the value is not found in the data</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11555,
                                "end": 11560,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11540,
                                "end": 11545,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>string - the value of the input field</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 11546,
                                "end": 11554,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 11547,
                                    "end": 11553,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 152
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 649,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt updates the selectedItems with the selected items\n",
                    "description": "<p>It updates the selectedItems with the selected items</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateTagsCount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 534,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt calculates the width of the tags and the input box and then decides which tags to show and which\nto hide\n",
                    "description": "<p>It calculates the width of the tags and the input box and then decides which tags to show and which\nto hide</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "ValueType<MultipleMode | Value>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ValueType<MultipleMode | Value>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "blurActiveElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "clearAllSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ComponentBaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {SelectionModel} from '@angular/cdk/collections';\nimport {ConnectedPosition, Overlay, ViewportRuler} from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {NbTagComponent} from '@nebular/theme';\nimport {cloneDeep, isEqual} from 'lodash';\nimport {takeUntil} from 'rxjs';\nimport {dropdownAnimation, rotateAnimation} from '../animations';\nimport {\n  INPUT_MIN_WIDTH,\n  ITEM_HEIGHT,\n  MIN_VISIBLE_ITEMS,\n  PLACEHOLDER_ITEM,\n  PanelType,\n  SEARCH_HEIGHT,\n  SUFFIX_WIDTH,\n  SelectState,\n  TAG_MARGIN,\n  TAG_PADDING,\n  panelConfigs,\n} from '../constants';\nimport {ItemTemplate, Panel, ValueType} from '../types';\nimport {ComponentBaseDirective} from '@project-lib/core/component-base';\nimport {GroupConfig} from '@project-lib/components/selector/types';\nimport {DIGITS} from '@project-lib/core/constants';\n@Component({\n  selector: 'selector',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  animations: [dropdownAnimation, rotateAnimation],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: SelectComponent,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectComponent<\n    InputType,\n    MultipleMode extends boolean,\n    Value extends InputType[IdField],\n    IdField extends keyof InputType,\n  >\n  extends ComponentBaseDirective\n  implements ControlValueAccessor, OnInit, OnChanges\n{\n  constructor(\n    public overlay: Overlay,\n    public elementRef: ElementRef,\n    protected _viewportRuler: ViewportRuler,\n    private _cdr: ChangeDetectorRef,\n  ) {\n    super();\n  }\n\n  @ViewChildren(NbTagComponent)\n  tags: QueryList<NbTagComponent>;\n\n  @ViewChild('autoCompleteInput')\n  autoCompleteInput?: ElementRef<HTMLInputElement>;\n\n  selections: SelectionModel<Value> = new SelectionModel();\n  selectedItems: SelectionModel<InputType> = new SelectionModel();\n  visibleTags: InputType[] = [];\n  isEmpty = true;\n\n  /* Defining config for both kinds of panels */\n  panels: Record<PanelType, Panel<InputType>> = cloneDeep(panelConfigs);\n  currentPanel?: Panel<InputType>;\n  currentPanelType?: PanelType;\n\n  /* A type alias for states and panel type enum */\n  states = SelectState;\n  types = PanelType;\n  /* Setting the state of the dropdown to closed. */\n  state: SelectState = SelectState.Closed;\n\n  /* Setting the position of the dropdown. */\n  positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n      offsetY: 5,\n    },\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'bizbook-select-panel-above',\n    },\n  ];\n\n  // dropdown overlay width, this is set based on width of container\n  width = 0;\n\n  /* css dependent values, these are supposed to be changed whenever css is changed */\n  /* the padding of the tags container. */\n  padding = TAG_PADDING;\n  /* The margin between tags. */\n  tagMargin = TAG_MARGIN;\n  /* The height of each item in the dropdown. */\n  itemHeight = ITEM_HEIGHT;\n  /* The width of the cross, plus and chevron icons. */\n  suffixWidth = SUFFIX_WIDTH;\n  /* The height of the input box */\n  searchHeight = SEARCH_HEIGHT;\n\n  /* calculated values based on above values */\n  /* A variable that is used to set the height of the dropdown. */\n  dropdownHeight: number;\n  /* this could 1,2 or 3, based on the whether the cross, plus and chevrons */\n  suffixCount = 0;\n\n  /**\n   * The field in the data item that uniquely identifies it.\n   */\n  @Input()\n  idField: IdField = 'id' as IdField;\n\n  /**\n   * showIcon allows user to show initial of the option as an icon\n   */\n  @Input()\n  showIcon = false;\n  /**\n   * The name of the field in the generic type T that contains the name of the\n   * item to display. This is used to read the name of each item in the list.\n   */\n  @Input()\n  nameField: keyof InputType = 'name' as keyof InputType;\n\n  /**\n   * The field to show disabled items in the list\n   */\n  @Input()\n  disabledField: keyof InputType = 'deleted' as keyof InputType;\n\n  /**\n   * The text to be displayed in the input box when no value is entered.\n   */\n  @Input()\n  placeholder = '';\n\n  // Sets the minimum width for the input box, in pixels.\n  // Used to prevent the input box from shrinking when the container is very small.\n  @Input()\n  inputMinWidth = INPUT_MIN_WIDTH;\n\n  // This code sets the multiple mode for the Select component.\n  @Input()\n  multiple: MultipleMode = false as MultipleMode;\n\n  /**\n   * The options that will be displayed in the select.\n   */\n  @Input()\n  options?: InputType[];\n\n  /**\n   * Disable cross icon in input field.\n   */\n  @Input()\n  showClearAll = true;\n\n  /**\n   * Hide these options in list.\n   */\n  @Input()\n  hiddenValues?: Set<Value>;\n\n  /**\n   * Whether to show the search box.\n   */\n  @Input()\n  search = true;\n\n  // disable the dropdown\n  @Input()\n  disabledDropdown = false;\n\n  /**\n   * Indicates whether custom the input is allowed.\n   */\n  @Input()\n  allowInput = false;\n\n  /* Max number of items visible at a time in the dropdown, used to set the height */\n  @Input()\n  maxVisibleItems = MIN_VISIBLE_ITEMS;\n\n  /* label to show to add a custom item in the dropdown */\n  @Input()\n  addTagString = 'createANewTag';\n\n  /* Placeholder for the search input */\n  @Input()\n  searchPlaceholder = 'search';\n\n  /* Used to get groupConfig from components to group data if needed */\n  @Input()\n  groupConfig: GroupConfig<InputType>[] = [];\n  /**\n   * Whether to select the first option when the user presses enter\n   */\n  @Input()\n  selectOnEnter = true;\n\n  /* whether to show selected options on top */\n  @Input()\n  showSelectedOnTop = false;\n\n  @Input()\n  itemTemplate: TemplateRef<ItemTemplate<InputType, keyof InputType>>;\n\n  @Output()\n  newAdded = new EventEmitter<InputType>();\n\n  @Output()\n  newRemoved = new EventEmitter<InputType>();\n\n  @Output()\n  added = new EventEmitter<InputType>();\n\n  @Output()\n  removed = new EventEmitter<InputType>();\n\n  @Output()\n  cleared = new EventEmitter<void>();\n\n  @Output()\n  valueChange = new EventEmitter<ValueType<MultipleMode, Value>>();\n\n  /* Control value accessor related properties */\n  onChange = (value: ValueType<MultipleMode, Value>) => {};\n\n  onTouched = () => {};\n\n  registerOnChange(onChange: (value: ValueType<MultipleMode, Value>) => {}) {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => {}) {\n    this.onTouched = onTouched;\n  }\n\n  writeValue(value: ValueType<MultipleMode, Value>) {\n    this.value = value;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabledDropdown = isDisabled;\n  }\n\n  /**\n   * The function sets the value of the selection model to the value passed in\n   * @param value - ValueType<MultipleMode, Value>\n   */\n  @Input()\n  set value(value: ValueType<MultipleMode, Value>) {\n    this._initSelectionModel();\n    this._setSelections(value);\n    this.onChange(value);\n    this.onTouched();\n    setTimeout(() => this.updateTagsCount(), 0);\n  }\n\n  /**\n   * If the `multiple` property is true, return the `selected` property of the `selections` object as an\n   * array. Otherwise, return the first element of the `selected` property of the `selections` object as\n   * a single value\n   * @returns The value of the selected item.\n   */\n  get value(): ValueType<MultipleMode, Value> {\n    if (this.multiple === true) {\n      return this.selections.selected as ValueType<MultipleMode, Value>;\n    } else {\n      return this.selections.selected[0] as ValueType<MultipleMode, Value>;\n    }\n  }\n\n  /**\n   * It returns the list of invisible tags to be shown in tags panel\n   * @returns The list of invisible tags.\n   */\n  get invisibleTags() {\n    return this.panels[PanelType.Extra].list;\n  }\n\n  /**\n   * It sets the value of the invisibleTags property to the value of the value parameter.\n   * @param {InputType[]} value - The value of the input.\n   */\n  set invisibleTags(value: InputType[]) {\n    this.panels[PanelType.Extra].list = Object.assign([], value);\n  }\n\n  ngOnInit(): void {\n    this._initSelectionModel();\n    /* Subscribing to the viewportRuler's change event and updating the width of the element. */\n    this._viewportRuler\n      .change()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => {\n        this._updateWidth();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['multiple'] && !changes['multiple'].isFirstChange()) {\n      this._initSelectionModel();\n    }\n    if (this.showSelectedOnTop) {\n      this._setIsSelectedOption(this.options!, false);\n    }\n    this._dropdownHeight();\n    this.updateSelectedItems();\n    this.updateTagsCount();\n  }\n\n  /**\n   * If the item is not a placeholder, toggle the item in the selections array. If the item is a\n   * placeholder, and it is not selected, emit the item as a newRemoved event\n   * @param {InputType} item - InputType - the item that was selected/deselected\n   */\n  toggle(item: InputType) {\n    if (!this.multiple && this.selectedItems.isSelected(item)) {\n      return;\n    }\n    this.selectedItems.toggle(item);\n    if (!this.isPlaceholder(item)) {\n      this.selections.toggle(item[this.idField] as Value);\n      if (this.selections.isSelected(item[this.idField] as Value)) {\n        this.added.emit(item);\n      } else {\n        this.removed.emit(item);\n      }\n    } else if (!this.selectedItems.isSelected(item)) {\n      this.newRemoved.emit(item);\n    } else {\n      this.newAdded.emit(item);\n    }\n    const isSelectedOption = 'isSelected' as keyof InputType;\n    if (item[isSelectedOption] !== undefined) {\n      item[isSelectedOption] = !item[\n        isSelectedOption\n      ] as unknown as InputType[keyof InputType];\n    }\n    this._processChange();\n  }\n\n  /**\n   * It clears the selections and selectedItems collections, then emits the cleared event\n   */\n  clearAll() {\n    if (this.options?.length) {\n      this._setIsSelectedOption(this.options, false);\n    }\n    this.selections.clear();\n    this.selectedItems.clear();\n    this._processChange();\n    this.cleared.emit();\n  }\n\n  /**\n   * If the state is closed, open the dropdown, otherwise close it\n   */\n  toggleDropdown() {\n    if (this.state === SelectState.Closed) {\n      this.open();\n    } else {\n      this.close();\n    }\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * If the panel is closed, open it, otherwise close it\n   */\n  togglePanel(type: PanelType) {\n    if (this.panels[type].state === SelectState.Closed) {\n      this.openPanel(type);\n    } else {\n      this.closePanel();\n    }\n  }\n\n  openPanel(type: PanelType) {\n    this.panels[type].state = SelectState.Open;\n    this.currentPanel = this.panels[type];\n    this.currentPanelType = type;\n    this._panelWidth(type);\n    this._panelHeight(type, this.panels[type].list);\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * If there is a current panel, set its state to closed and clear the current panel and panel type\n   */\n  closePanel() {\n    if (this.currentPanel) {\n      this.currentPanel.state = SelectState.Closed;\n      this.currentPanel = undefined;\n      this.currentPanelType = undefined;\n    }\n  }\n\n  /**\n   * It filters the autocomplete options based on the value of the input, and adds a placeholder option\n   * if the value is not found in the data\n   * @param {string} value - string - the value of the input field\n   */\n  updateAutocompleteOptions(value: string) {\n    let showAddOption = !this.selectedItems.selected.some(item =>\n      isEqual(item[this.nameField], value),\n    );\n    this.panels[PanelType.Autocomplete].list = [];\n    if (value) {\n      this.panels[PanelType.Autocomplete].list =\n        this.options?.filter?.(item => {\n          if (this.asString(item[this.nameField]) === value) {\n            showAddOption = false;\n          }\n          return (\n            !this.selections.isSelected(item[this.idField] as Value) &&\n            this.asString(item[this.nameField])\n              .toLowerCase()\n              .trim()\n              .indexOf(value.toLowerCase().trim()) > -1\n          );\n        }) ?? [];\n    }\n    if (showAddOption && value.length) {\n      this.panels[PanelType.Autocomplete].list.push({\n        [this.idField]: PLACEHOLDER_ITEM,\n        [this.nameField]: value,\n      } as unknown as InputType);\n    }\n    if (this.panels[PanelType.Autocomplete].list.length) {\n      this.openPanel(PanelType.Autocomplete);\n    } else {\n      this.closePanel();\n    }\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * If the user presses enter, clear the input and if there's an autocomplete suggestion, select it\n   * @param {HTMLInputElement} input - HTMLInputElement - the input element that the user is typing in\n   */\n  autocompleteEnter(input: HTMLInputElement) {\n    input.value = '';\n    if (this.panels[PanelType.Autocomplete].list[0]) {\n      this.handleAutocompleteSelect(\n        this.panels[PanelType.Autocomplete].list[0],\n      );\n      this.closePanel();\n    }\n  }\n\n  /**\n   * If the item is a placeholder, then select it and emit the newAdded event. Otherwise, toggle the item\n   * @param {InputType} item - InputType - this is the item that was selected from the autocomplete\n   * dropdown.\n   */\n  handleAutocompleteSelect(item: InputType) {\n    if (this.isPlaceholder(item)) {\n      this.selectedItems.select(item);\n      this.newAdded.emit(item);\n    } else {\n      this.toggle(item);\n    }\n    this.panels[PanelType.Autocomplete].list = [];\n    if (this.autoCompleteInput) {\n      this.autoCompleteInput.nativeElement.value = '';\n    }\n    this._processChange();\n  }\n\n  /**\n   * The funtion closes the dropdown, change detection is triggered internally by the update width method\n   */\n  open() {\n    this.state = SelectState.Open;\n    this._updateWidth();\n  }\n\n  /**\n   * The function closes the dropdown and tells Angular to check for changes\n   */\n  close() {\n    this.state = SelectState.Closed;\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * It emits the new value of the select box\n   */\n  emitNewValue() {\n    if (this.multiple === true) {\n      this.valueChange.emit(\n        this.selections.selected as ValueType<MultipleMode, Value>,\n      );\n    } else {\n      this.valueChange.emit(\n        this.selections.selected[0] as ValueType<MultipleMode, Value>,\n      );\n    }\n  }\n\n  /**\n   * It calculates the width of the tags and the input box and then decides which tags to show and which\n   * to hide\n   */\n  updateTagsCount() {\n    // for cross and chevron if not disabled\n    this.suffixCount = this.disabledDropdown ? 0 : DIGITS.TWO;\n    if (this.invisibleTags.length) {\n      // for the counter box\n      this.suffixCount += 1;\n    }\n    this.invisibleTags = [];\n    this.visibleTags = Object.assign([], this.selectedItems.selected);\n    this._cdr.detectChanges();\n    const inputBuffer =\n      this.allowInput && !this.disabledDropdown\n        ? this.inputMinWidth + DIGITS.TWO * this.tagMargin\n        : 0;\n    const width = this.elementRef.nativeElement.getBoundingClientRect().width;\n    const rightPadding = this.suffixWidth * this.suffixCount;\n    const allowedWidth =\n      width - (this.padding * DIGITS.TWO + rightPadding + inputBuffer);\n    let combinedWidth = 0;\n    let i;\n    for (i = 0; i < this.tags?.length; i++) {\n      const tag = this.tags.get(i);\n      if (!tag) {\n        break;\n      }\n      combinedWidth =\n        combinedWidth +\n        tag._hostElement.nativeElement.getBoundingClientRect().width +\n        DIGITS.TWO * this.tagMargin;\n      if (combinedWidth > allowedWidth) {\n        break;\n      }\n    }\n    if (i === 0) {\n      i = 1;\n    }\n    this.visibleTags = this.selectedItems.selected.slice(0, i);\n    this.invisibleTags = this.selectedItems.selected.slice(i);\n    // this required again to ensure proper width of input element\n    if (this.invisibleTags.length) {\n      // for the counter box\n      this.suffixCount += 1;\n    }\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * It takes an item of type T and returns it as a string\n   * @param {T} item - T - The item to be converted to a string.\n   * @returns The item as a string.\n   */\n  asString<T>(item: T) {\n    return item as unknown as string;\n  }\n\n  /**\n   * If the id of the item is a string and it's equal to the placeholder item, then return true.\n   * Otherwise, return false\n   * @param {InputType} item - InputType - the item to check\n   * @returns A boolean value.\n   */\n  isPlaceholder(item: InputType) {\n    const id = item[this.idField];\n    if (typeof id === 'string' && id === PLACEHOLDER_ITEM) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * A function that is called when the selection changes.\n   */\n  private _processChange() {\n    this._updateEmptyState();\n    this.emitNewValue();\n    this.onChange(this.value);\n    // this triggers the detect changes\n    this.updateTagsCount();\n    // this can only be called after tags have been updated\n    if (this.currentPanel && this.currentPanelType) {\n      this._panelHeight(this.currentPanelType, this.currentPanel.list);\n    }\n  }\n\n  /**\n   * `this._setSelections` is a private function that updates the value of the selections\n   * @param value - ValueType<MultipleMode, Value>\n   */\n  private _setSelections(value: ValueType<MultipleMode, Value>) {\n    if (this.multiple && Array.isArray(value)) {\n      this.selections.select(...(value as Value[]));\n    } else if (!this.multiple) {\n      this.selections.select(value as Value);\n    } else {\n      this.selections.clear();\n    }\n    this.updateSelectedItems();\n  }\n\n  /**\n   * If the selectedItems.selected array is empty, then set the isEmpty variable to true. Otherwise, set\n   * it to false\n   */\n  private _updateEmptyState() {\n    if (this.selectedItems.selected.length === 0) {\n      this.isEmpty = true;\n    } else {\n      this.isEmpty = false;\n    }\n  }\n\n  /**\n   * It updates the selectedItems with the selected items\n   */\n  private updateSelectedItems() {\n    this.selectedItems.clear();\n    const ids = this.selections.selected;\n    if (this.multiple) {\n      const items = this.options?.filter?.(item =>\n        ids.includes(item[this.idField] as Value),\n      );\n      if (items?.length) {\n        this.selectedItems.select(...items);\n        this._setIsSelectedOption(items, true);\n      }\n    } else {\n      const item = this.options?.find?.(\n        item => item[this.idField] === ids[0],\n      ) as InputType;\n      if (item) {\n        this.selectedItems.select(item);\n      }\n    }\n    this._updateEmptyState();\n  }\n\n  /**\n   * > Initialize the selection models based on the `multiple` property\n   */\n  private _initSelectionModel() {\n    this.selections = new SelectionModel(this.multiple);\n    this.selectedItems = new SelectionModel(this.multiple);\n  }\n\n  /**\n   * It updates the width of the dropdown overlay element.\n   */\n  private _updateWidth() {\n    this.width = this.elementRef.nativeElement.getBoundingClientRect().width;\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * It updates the width of the panel overlay element.\n   */\n  private _panelWidth(type: PanelType) {\n    this.panels[type].width =\n      this.elementRef.nativeElement.getBoundingClientRect().width;\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * It sets the height of the `panel` div to the height of the number of items in the `invisibleTags`\n   * array, or the `maxVisibleItems` property, whichever is smaller\n   */\n  private _panelHeight(type: PanelType, list: InputType[]) {\n    this.panels[type].height =\n      list.length > this.maxVisibleItems\n        ? this.itemHeight * this.maxVisibleItems\n        : this.itemHeight * list.length;\n    this._cdr.detectChanges();\n  }\n\n  /**\n   * _dropdownHeight() is a private function that calculates the panelHeight property based on the number\n   * of items in the data array and the `maxVisibleItems` property.\n   * If the `search` property is true, then it adds the `searchHeight` property to the panelHeight.\n   */\n  private _dropdownHeight() {\n    const minSize = this.options?.length ?? 1;\n    this.dropdownHeight =\n      minSize > this.maxVisibleItems\n        ? this.itemHeight * this.maxVisibleItems\n        : this.itemHeight * minSize;\n    if (this.search) {\n      this.dropdownHeight += this.searchHeight + 1;\n    }\n  }\n\n  private _setIsSelectedOption(items: InputType[], value: boolean) {\n    if (this.showSelectedOnTop) {\n      items.forEach?.(item => {\n        item['isSelected' as keyof InputType] =\n          value as unknown as InputType[keyof InputType];\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select-container {\n  // width: 20%;\n  nb-icon[icon='chevron-down'] {\n    cursor: pointer;\n  }\n  .count-box {\n    user-select: none;\n    color: var(--text-primary-color);\n    cursor: pointer;\n  }\n  nb-tag {\n    position: relative;\n    overflow: hidden !important;\n    white-space: nowrap;\n    padding-right: 1.4rem;\n    text-overflow: ellipsis;\n    text-align: left;\n    display: block;\n    text-transform: none;\n    background: var(--bb-tag-background);\n    border: var(--bb-tag-border);\n  }\n  nb-icon {\n    height: 40px;\n    margin-left: -45px;\n  }\n  .tag-input {\n    width: 100%;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n    padding: 7px;\n    font-size: 15px;\n    &:focus {\n      color: #495057;\n      background-color: #fff;\n      border-color: #80bdff;\n      outline: 0;\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n  }\n}\n\n.dropdown-panel {\n  display: block;\n  box-shadow: var(--bb-select-panel-shadow);\n  border-radius: var(--border-radius);\n  user-select: none;\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ComponentBaseDirective",
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ValueType<MultipleMode | Value>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 279,
                        "rawdescription": "\n\nThe function sets the value of the selection model to the value passed in\n",
                        "description": "<p>The function sets the value of the selection model to the value passed in</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 7002,
                                    "end": 7007,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "value"
                                },
                                "type": "ValueType<MultipleMode | Value>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 6996,
                                    "end": 7001,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<ul>\n<li>ValueType&lt;MultipleMode, Value&gt;</li>\n</ul>\n"
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "ValueType<MultipleMode, Value>",
                        "line": 293,
                        "rawdescription": "\n\nIf the `multiple` property is true, return the `selected` property of the `selections` object as an\narray. Otherwise, return the first element of the `selected` property of the `selections` object as\na single value\n",
                        "description": "<p>If the <code>multiple</code> property is true, return the <code>selected</code> property of the <code>selections</code> object as an\narray. Otherwise, return the first element of the <code>selected</code> property of the <code>selections</code> object as\na single value</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 7518,
                                "end": 7562,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 7519,
                                    "end": 7526,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>The value of the selected item.</p>\n"
                            }
                        ]
                    }
                },
                "invisibleTags": {
                    "name": "invisibleTags",
                    "setSignature": {
                        "name": "invisibleTags",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "InputType[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 313,
                        "rawdescription": "\n\nIt sets the value of the invisibleTags property to the value of the value parameter.\n",
                        "description": "<p>It sets the value of the invisibleTags property to the value of the value parameter.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 8140,
                                    "end": 8145,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "value"
                                },
                                "type": "InputType[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 8120,
                                    "end": 8125,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<ul>\n<li>The value of the input.</li>\n</ul>\n",
                                "typeExpression": {
                                    "pos": 8126,
                                    "end": 8139,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 312,
                                    "type": {
                                        "pos": 8127,
                                        "end": 8138,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 185,
                                        "elementType": {
                                            "pos": 8127,
                                            "end": 8136,
                                            "flags": 8388608,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 180,
                                            "typeName": {
                                                "pos": 8127,
                                                "end": 8136,
                                                "flags": 8388608,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 79,
                                                "escapedText": "InputType"
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "invisibleTags",
                        "type": "",
                        "returnType": "",
                        "line": 305,
                        "rawdescription": "\n\nIt returns the list of invisible tags to be shown in tags panel\n",
                        "description": "<p>It returns the list of invisible tags to be shown in tags panel</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 7900,
                                "end": 7940,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 7901,
                                    "end": 7908,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>The list of invisible tags.</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<nb-form-field\n  class=\"select-container\"\n  [class.disabled]=\"disabledDropdown\"\n  (Resize)=\"multiple && updateTagsCount()\"\n  cdk-overlay-origin\n  #overlayOrigin=\"cdkOverlayOrigin\"\n  (click)=\"!disabledDropdown && toggleDropdown()\"\n>\n  <div\n    *ngIf=\"multiple && invisibleTags.length\"\n    nbSuffix\n    class=\"count-box\"\n    (click)=\"togglePanel(types.Extra); $event.stopPropagation()\"\n  >\n    +{{ invisibleTags.length }}\n  </div>\n  <nb-icon\n    nbSuffix\n    class=\"close-icon\"\n    icon=\"close-outline\"\n    *ngIf=\"!disabledDropdown && !isEmpty && showClearAll\"\n    (click)=\"clearAll(); $event.stopPropagation()\"\n  ></nb-icon>\n  <nb-icon\n    [@rotate]=\"state\"\n    *ngIf=\"!disabledDropdown\"\n    nbSuffix\n    (click)=\"toggleDropdown(); $event.stopPropagation()\"\n    icon=\"chevron-down\"\n  ></nb-icon>\n  <nb-tag-list\n    [ngStyle]=\"{padding}\"\n    *ngIf=\"multiple; else single\"\n    [class.active]=\"state === states.Open\"\n    [class.tag-list-padding]=\"visibleTags.length\"\n  >\n    <nb-tag\n      *ngFor=\"let item of visibleTags\"\n      [text]=\"asString(item && item[nameField])\"\n      [ngStyle]=\"{maxWidth: 'calc(100% - ' + suffixCount * suffixWidth + 'px)'}\"\n      [removable]=\"!disabledDropdown\"\n      (remove)=\"toggle(item); toggleDropdown()\"\n    ></nb-tag>\n    <input\n      nbInput\n      [placeholder]=\"placeholder\"\n      type=\"text\"\n      class=\"tag-input\"\n      nbTagInput\n      fullWidth\n      [placeholder]=\"placeholder\"\n      (keyup.enter)=\"selectOnEnter && autocompleteEnter(autoCompleteInput)\"\n      [hidden]=\"\n        (!allowInput && visibleTags.length !== 0) ||\n        (disabledDropdown && multiple && visibleTags.length !== 0)\n      \"\n      [readonly]=\"!allowInput || disabledDropdown\"\n      #autoCompleteInput\n      [class.cursor-pointer]=\"!allowInput\"\n      (input)=\"updateAutocompleteOptions(autoCompleteInput.value)\"\n      (click)=\"\n        $event.stopPropagation();\n        !disabledDropdown && !allowInput && toggleDropdown()\n      \"\n      [ngStyle]=\"{\n        minWidth: inputMinWidth + 'px',\n        marginRight: suffixCount * suffixWidth + 'px'\n      }\"\n    />\n  </nb-tag-list>\n  <ng-template #single>\n    <input\n      type=\"text\"\n      class=\"cursor-pointer\"\n      [class.no-disable-style]=\"!disabledDropdown\"\n      nbInput\n      fullWidth\n      [value]=\"selectedItems.selected[0]?.[nameField] ?? ''\"\n      [placeholder]=\"placeholder\"\n      readonly\n    />\n  </ng-template>\n</nb-form-field>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayLockPosition\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  cdkConnectedOverlayPanelClass=\"cdk-panel-bizbook-select\"\n  [cdkConnectedOverlayScrollStrategy]=\"overlay.scrollStrategies.block()\"\n  [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"state === states.Open\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayWidth]=\"width\"\n  (backdropClick)=\"close()\"\n  (detach)=\"close()\"\n>\n  <app-list\n    class=\"dropdown-panel\"\n    [options]=\"options\"\n    [nameField]=\"nameField\"\n    [idField]=\"idField\"\n    [itemHeight]=\"itemHeight\"\n    [@dropdownPanel]=\"state\"\n    (toggle)=\"toggle($event); !multiple && close()\"\n    [selections]=\"selections\"\n    [multiple]=\"multiple\"\n    [search]=\"search\"\n    [searchPlaceholder]=\"searchPlaceholder\"\n    [disabledField]=\"disabledField\"\n    [selectOnEnter]=\"selectOnEnter\"\n    [ngStyle]=\"{height: dropdownHeight + 'px'}\"\n    [groupConfig]=\"groupConfig\"\n    [showIcon]=\"showIcon\"\n    [showSelectedOnTop]=\"showSelectedOnTop\"\n    [hiddenValues]=\"hiddenValues\"\n    [disabled]=\"disabledDropdown\"\n    [itemTemplate]=\"itemTemplate\"\n  ></app-list>\n</ng-template>\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayLockPosition\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  cdkConnectedOverlayPanelClass=\"cdk-panel-bizbook-select\"\n  [cdkConnectedOverlayScrollStrategy]=\"overlay.scrollStrategies.block()\"\n  [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"\n    !!currentPanel && currentPanel.state === states.Open\n  \"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayWidth]=\"currentPanel?.width ?? 0\"\n  (backdropClick)=\"closePanel()\"\n  (detach)=\"closePanel()\"\n>\n  <app-list\n    class=\"dropdown-panel\"\n    [options]=\"currentPanel?.list\"\n    [nameField]=\"nameField\"\n    [idField]=\"idField\"\n    [itemHeight]=\"itemHeight\"\n    [@dropdownPanel]=\"currentPanel?.state\"\n    (toggle)=\"\n      currentPanel?.allowInput\n        ? handleAutocompleteSelect($event)\n        : toggle($event)\n    \"\n    (remove)=\"toggle($event)\"\n    [selections]=\"selections\"\n    [addTagString]=\"addTagString\"\n    [allowInput]=\"currentPanel?.allowInput ?? false\"\n    [multiple]=\"false\"\n    [search]=\"false\"\n    [removal]=\"currentPanel?.removal ?? false\"\n    [ngStyle]=\"{height: (currentPanel?.height ?? 0) + 'px'}\"\n    (closed)=\"closePanel()\"\n    [groupConfig]=\"groupConfig\"\n    [showSelectedOnTop]=\"showSelectedOnTop\"\n    [hiddenValues]=\"hiddenValues\"\n    [disabled]=\"disabledDropdown\"\n  ></app-list>\n</ng-template>\n"
        },
        {
            "name": "SelectTestComponent",
            "id": "component-SelectTestComponent-030ab4854c64e6a9d8e59c19f138dc946e263eb5b3a3cd791b1f36ec1be3451a8cff03a0a7bb4d5c6dc879f0a194f227973bf2ce76d022be70db47f514fcdc9f",
            "file": "projects/arc-lib/src/lib/components/selector/tests/select-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "select-test",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-test.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allowInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "control",
                    "defaultValue": "new UntypedFormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NameIdRequired[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "search",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {UntypedFormControl} from '@angular/forms';\nimport {NameIdRequired} from '@project-lib/core/api';\n\n@Component({\n  selector: 'select-test',\n  templateUrl: './select-test.component.html',\n})\nexport class SelectTestComponent {\n  options: NameIdRequired[] = [];\n  multiple = false;\n  allowInput = false;\n  disabled = false;\n  placeholder = 'Select';\n  search = false;\n  control = new UntypedFormControl();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<nb-layout>\n  <nb-layout-column>\n    <div [ngStyle]=\"{ width: '200px' }\">\n      <select\n        [options]=\"options\"\n        [multiple]=\"multiple\"\n        [allowInput]=\"allowInput\"\n        [formControl]=\"control\"\n        [search]=\"search\"\n      ></select>\n    </div>\n  </nb-layout-column>\n</nb-layout>\n"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-6c6a64868ad8a3508dc753e8c0fcdb1a37d87d8731f1950fd3b8654ae11d170d9a8a4abab349e1799b4700ecb76544741c80ab7ff28be79a69fd42f96459b601",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/api/api.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n})\nexport class ApiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-20cfc3754fd6b12c75a0eb1dacba44da6d84be8bd337adac7dedc313e08108d981b13d5bebf8608baf2722a0dffd9129dbb9b807f2351f10ca031893d9d7eada",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {NbAuthModule, NbPasswordAuthStrategy} from '@nebular/auth';\nimport {NbLayoutModule, NbThemeModule} from '@nebular/theme';\nimport {TranslateModule} from '@ngx-translate/core';\n\nimport {ThemeModule} from '@project-lib/theme/theme.module';\nimport {AuthRoutingModule} from './auth-routing.module';\nimport {AuthComponent} from './auth.component';\nimport {LoginComponent} from './login/login.component';\nimport { HomePageComponent } from './home-page/home-page.component';\nimport { LoginPageComponent } from './login-page/login-page.component';\n\n@NgModule({\n  declarations: [LoginComponent, AuthComponent, HomePageComponent, LoginPageComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThemeModule,\n    AuthRoutingModule,\n    HttpClientModule,\n    NbLayoutModule,\n    TranslateModule,\n    NbThemeModule.forRoot(),\n    NbAuthModule.forRoot({\n      strategies: [\n        NbPasswordAuthStrategy.setup({\n          name: 'email',\n        }),\n      ],\n      forms: {},\n    }),\n  ],\n  exports:[LoginPageComponent]\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        },
                        {
                            "name": "HomePageComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-c14720d625eef5d313dabcf314a00d4fc1f36e09dbb495aa70cf9741f79b6b67ad951595bf37ea853406662402dbd550b5912c55b7a6d2cda759eb4a03888c44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      // {\n        //   path: 'login',\n        //   component: LoginComponent,\n      // },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreAuthModule",
            "id": "module-CoreAuthModule-0daf5b56960b00344882374b60b789a7e91de049f43513e53a65c4a335d16795f412caf1029e29e00803f53fdb1dbe4973bdc38fc2164565a498400c38f40c7b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NgxPermissionsModule } from 'ngx-permissions';\n\nimport { ApiModule } from '../api';\nimport { StoreModule } from '../store';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule,\n    ApiModule,\n    StoreModule,\n    NgxPermissionsModule.forChild(),\n    HttpClientModule,\n  ],\n})\nexport class CoreAuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "StoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-d9bd74f0b02d7d030cebd9ebef9c4864534ac0f9ebe823833e9332a851b66c56bf380b3be79a508f13db01b82ef917f7354aa93773cfabe4f9aa38c75099b262",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/core.module.ts",
            "methods": [],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {NgModule, Optional, SkipSelf} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {NgxPermissionsModule} from 'ngx-permissions';\nimport {AuthModule} from '../components';\nimport {ApiModule} from './api/api.module';\nimport {CoreAuthModule} from './auth';\nimport {EnsureModuleLoadedOnce} from './ensure-module-loaded-once';\n\nimport {LocalizationModule} from './localization/localization.module';\nimport {StoreModule} from './store';\nimport {ToasterModule} from './toaster/toaster.module';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {ComponentBaseDirective} from './component-base';\n\n@NgModule({\n  declarations: [ComponentBaseDirective],\n  providers: [],\n  imports: [\n    CommonModule,\n    NgxPermissionsModule.forRoot(),\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.ERROR,\n      serverLogLevel: NgxLoggerLevel.OFF,\n    }),\n    FormsModule,\n    HttpClientModule,\n    RouterModule,\n    ApiModule,\n    LocalizationModule,\n    StoreModule,\n    ToasterModule,\n    CoreAuthModule,\n  ],\n  exports: [StoreModule, ApiModule, ComponentBaseDirective],\n})\nexport class CoreModule extends EnsureModuleLoadedOnce {\n  // Ensure that CoreModule is only loaded into AppModule\n\n  // Looks for the module in the parent injector to see if it's already been loaded (only want it loaded once)\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    super(parentModule);\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentBaseDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "CoreAuthModule"
                        },
                        {
                            "name": "LocalizationModule"
                        },
                        {
                            "name": "StoreModule"
                        },
                        {
                            "name": "ToasterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "ComponentBaseDirective"
                        },
                        {
                            "name": "StoreModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GanttModule",
            "id": "module-GanttModule-daab20a1cb359f0989c943edff492e3482005ee45290ac3da0dd5ed8038762a20e527f27ea6cf27250e254622da23d153ac4a234adf75ce398acd7d544e8d08b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/gantt/gantt.module.ts",
            "methods": [],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {ThemeModule} from '@project-lib/theme/theme.module';\nimport {\n  BbGanttComponent,\n  GanttBarsComponent,\n  GanttColumnComponent,\n  GanttHeaderComponent,\n} from './components';\nimport {GanttTooltipComponent} from './components/gantt-tooltip/gantt-tooltip.component';\nimport {GANTT_SCALES} from './const';\nimport {MonthlyScaleService} from './services/timeline-scales/monthly-scale.service';\nimport {QuarterlyScaleService} from './services/timeline-scales/quarterly-scale.service';\nimport {WeeklyScaleService} from './services/timeline-scales/weekly-scale.service';\nimport {GanttAdapter} from './types';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [\n    BbGanttComponent,\n    GanttBarsComponent,\n    GanttColumnComponent,\n    GanttHeaderComponent,\n    GanttTooltipComponent,\n  ],\n  imports: [CommonModule, ReactiveFormsModule, ThemeModule],\n  exports: [\n    BbGanttComponent,\n    GanttBarsComponent,\n    GanttColumnComponent,\n    GanttHeaderComponent,\n    // GanttTooltipComponent,\n  ],\n  \n  providers: [\n    {\n      provide: GANTT_SCALES,\n      multi: true,\n      useClass: MonthlyScaleService,\n    },\n    {\n      provide: GANTT_SCALES,\n      multi: true,\n      useClass: WeeklyScaleService,\n    },\n    {\n      provide: GANTT_SCALES,\n      multi: true,\n      useClass: QuarterlyScaleService,\n    },\n  ],\n})\nexport class GanttModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BbGanttComponent"
                        },
                        {
                            "name": "GanttBarsComponent"
                        },
                        {
                            "name": "GanttColumnComponent"
                        },
                        {
                            "name": "GanttHeaderComponent"
                        },
                        {
                            "name": "GanttTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BbGanttComponent"
                        },
                        {
                            "name": "GanttBarsComponent"
                        },
                        {
                            "name": "GanttColumnComponent"
                        },
                        {
                            "name": "GanttHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LocalizationModule",
            "id": "module-LocalizationModule-b11d1d34199c7876eded4641d486f5e09b8720edd9464dafdd566316c4420bd88e6b5fbb2a8a632e0d0f82f57212c7040f7ef06d0762b8ca8ea0c18c8100c6f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/localization/localization.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nimport { LanguageTranslation } from './language.enum';\n\nexport function httpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(\n    http,\n    './assets/i18n/',\n    `.json?q=${new Date().getTime()}`\n  );\n}\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      defaultLanguage: LanguageTranslation.ENGLISH,\n      useDefaultLang: true,\n      loader: {\n        provide: TranslateLoader,\n        useFactory: httpLoaderFactory,\n        deps: [HttpClient],\n      },\n    }),\n  ],\n})\nexport class LocalizationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResizeModule",
            "id": "module-ResizeModule-cc2f1f32773423d520db7144ce491fbe05b299bfed5f93929e9322aa608f0abfe3883dd564d4febb5c0424ec7a6275128a7e17d10779cc8481bc96caf4b9568f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/resize/resize.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ResizeDirective } from './resize.directive';\n\n@NgModule({\n  declarations: [ResizeDirective],\n  imports: [CommonModule],\n  exports: [ResizeDirective],\n})\nexport class ResizeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResizeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResizeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-b6f9610166e08660db5985211d7a97aedca887024a7358dde379cfb638c4bf798eec247249567f0bb765627d3863d9a403bfc6ee07eadecadcdd1396ffd1f7cc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/selector/select.module.ts",
            "methods": [],
            "sourceCode": "import { OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbCheckboxModule,\n  NbFormFieldModule,\n  NbIconModule,\n  NbInputModule,\n  NbLayoutModule,\n  NbTagModule,\n  NbThemeModule,\n} from '@nebular/theme';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ResizeModule } from '../resize/resize.module';\nimport { SelectComponent } from './select/select.component';\nimport {ListComponent} from './list/list.component';\n\n\n\n@NgModule({\n  declarations: [ListComponent,SelectComponent],\n  imports: [\n    CommonModule,\n    NbInputModule,\n    NbFormFieldModule,\n    NbIconModule,\n    NbTagModule,\n    NbLayoutModule,\n    NbInputModule,\n    NbCheckboxModule,\n    ReactiveFormsModule,\n    ResizeModule,\n    ScrollingModule,\n    TranslateModule,\n    OverlayModule,\n  ],\n  exports: [ListComponent,SelectComponent],\n})\nexport class SelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ResizeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectTestModule",
            "id": "module-SelectTestModule-f34d8fdd48921ff05cc6ddbcc8f09cf25b7e1e5943abecba21eca010074141386d5068ae138256d8faf05d0e27f5513a6d17654432957ebe61ea0f9c44f19244",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/components/selector/tests/select-test.module.ts",
            "methods": [],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {SelectModule} from '../select.module';\nimport {SelectTestComponent} from './select-test.component';\nimport {ThemeModule} from '@project-lib/theme/theme.module';\n\n@NgModule({\n  declarations: [SelectTestComponent],\n  imports: [\n    CommonModule,\n    SelectModule,\n    ThemeModule.forRoot('arc'),\n    ReactiveFormsModule,\n  ],\n  exports: [SelectTestComponent],\n})\nexport class SelectTestModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectTestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoreModule",
            "id": "module-StoreModule-a838c38813c1d770005faf9836e2fa48ada50548d3e386741da1ec0abf53daf122db92fdc4f363e08c019219808c9e1a985b4a969015707ba3916c98e4918860",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/store/store.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  InMemoryStorageService,\n  LOCAL_STORAGE,\n  SESSION_STORAGE,\n} from 'ngx-webstorage-service';\n\nimport { APP_SESSION_STORE, APPLICATION_STORE } from './keys';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  providers: [\n    { provide: APPLICATION_STORE, useExisting: LOCAL_STORAGE },\n    { provide: APP_SESSION_STORE, useExisting: SESSION_STORAGE },\n    InMemoryStorageService,\n  ],\n})\nexport class StoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "id": "module-ThemeModule-82e99b4120384e42ddd456b20de26487b8cef07f8b196d86ed0a329e5c6eb0f6224ebb104c09864050f46605db02bc53604917bccc208b05646ce2b59668ca09",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/theme/theme.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ThemeModule>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NbDateFnsDateModule} from '@nebular/date-fns';\nimport {NbEvaIconsModule} from '@nebular/eva-icons';\nimport {\n  NbActionsModule,\n  NbAlertModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbContextMenuModule,\n  NbDatepickerModule,\n  NbDialogModule,\n  NbFormFieldModule,\n  NbIconModule,\n  NbInputModule,\n  NbLayoutModule,\n  NbListModule,\n  NbMenuModule,\n  NbOptionModule,\n  NbOverlayContainerAdapter,\n  NbRouteTabsetModule,\n  NbSelectModule,\n  NbSidebarModule,\n  NbSidebarService,\n  NbSpinnerModule,\n  NbTabsetModule,\n  NbThemeModule,\n  NbToastrModule,\n  NbToggleModule,\n  NbTooltipModule,\n  NbUserModule,\n} from '@nebular/theme';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {TOASTER_SERVICE_KEY} from '../core';\nimport {ToasterAdapterService, ToasterService} from './toaster';\nimport {IconPacksManagerService} from './services';\n\nconst themeModules = [\n  NbLayoutModule,\n  NbSidebarModule,\n  NbCardModule,\n  NbEvaIconsModule,\n  NbIconModule,\n  NbAlertModule,\n  NbInputModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbOptionModule,\n  NbListModule,\n  NbOptionModule,\n  NbActionsModule,\n  NbUserModule,\n  NbMenuModule,\n  NbContextMenuModule,\n  NbRouteTabsetModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  FormsModule,\n  ReactiveFormsModule,\n  NbSelectModule,\n  NbDatepickerModule,\n  NbTabsetModule,\n  NbDateFnsDateModule,\n  NbToggleModule,\n  TranslateModule,\n  NbSpinnerModule,\n];\n\n@NgModule({\n  declarations: [],\n  providers: [\n    ToasterAdapterService,\n    {\n      provide: TOASTER_SERVICE_KEY,\n      useClass: ToasterService,\n    },\n    NbSidebarService,\n    NbOverlayContainerAdapter\n  ],\n  imports: [\n    CommonModule,\n    NbMenuModule.forRoot(),\n    NbToastrModule.forRoot(),\n    NbDialogModule.forRoot(),\n    NbDatepickerModule.forRoot(),\n    ...themeModules,\n  ],\n  exports: themeModules,\n})\nexport class ThemeModule {\n  static forRoot(theme: string): ModuleWithProviders<ThemeModule> {\n    return {\n      ngModule: ThemeModule,\n      providers: [...(NbThemeModule.forRoot({name: theme}).providers ?? [])],\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ToasterAdapterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeRoutingModule",
            "id": "module-ThemeRoutingModule-58160e2b6ba72c8b6ca3bad497feaf0021d348e934bdf09a349e0a499c5ffef620f5f7f53f0fe2040b896f05f47701a70b5aea430af2c3bcdbb6f88b43e69151",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/theme/theme-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ThemeRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToasterModule",
            "id": "module-ToasterModule-3e213b22913b41cafa3456f23af3f15f95cee25a37be4a57fcf02d315df2d112da14f12f284d4dc1d6f1015b01f3cbec35ba54c9c6df67b5efde9b193b12fd3f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/arc-lib/src/lib/core/toaster/toaster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n})\nexport class ToasterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Adapters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/api/adapters/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AnyAdapter, CountAdapter, NameIdAdapter]"
            },
            {
                "name": "APP_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/app-config/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Application config')"
            },
            {
                "name": "APP_IN_MEMORY_STORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<InMemoryStorageService>(\n  'APP_IN_MEMORY_STORE'\n)"
            },
            {
                "name": "APP_SESSION_STORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<StorageService>(\n  'APP_SESSION_STORE'\n)"
            },
            {
                "name": "APPLICATION_STORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<StorageService>(\n  'APPLICATION_STORE'\n)"
            },
            {
                "name": "AuthTokenSkipHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'X-Skip-Auth-Token'"
            },
            {
                "name": "BUFFER_FOR_TODAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: 'assets/images/Illustration.svg',\n      altText: 'my image',\n    },\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n    component: SelectComponent,\n    props: {\n      idField: 'id',\n      showIcon: true,\n      nameField: 'name',\n      disabledField: 'deleted',\n      placeholder: 'Select an option',\n      inputMinWidth: 200,\n      multiple: true,\n      options: [\n        { id: 1, name: 'Option 1', deleted: false },\n        { id: 2, name: 'Option 2', deleted: true },\n        {id :3, name:'Option 3'},\n        {id :4, name:'Option 4'}\n\n\n        // Add more options as needed\n      ],\n      showClearAll: true,\n      search: true,\n      disabled: true,\n      allowInput: true,\n      maxVisibleItems: 5,\n      addTagString: 'Create a new tag',\n      searchPlaceholder: 'Search options',\n      groupConfig: [],\n      selectOnEnter: true,\n    },\n  })"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dropdownAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('dropdownPanel', [\n  state(\n    'void',\n    style({\n      opacity: 0,\n      transform: 'scaleY(0.6)',\n    })\n  ),\n  state(\n    'open',\n    style({\n      opacity: 1,\n      transform: 'scaleY(1)',\n    })\n  ),\n  transition('void => open', animate('80ms cubic-bezier(0, 0, 0.2, 1)')),\n  transition('open => void', animate('80ms cubic-bezier(0, 0, 0.2, 1)')),\n])"
            },
            {
                "name": "errorMsgConst",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'error.error.message.message'"
            },
            {
                "name": "ErrToastSkipHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'X-Skip-Error-Toast'"
            },
            {
                "name": "GANTT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<GanttLib>('gantt.lib')"
            },
            {
                "name": "GANTT_BAR_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "30"
            },
            {
                "name": "GANTT_COLUMN_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "300"
            },
            {
                "name": "GANTT_ROW_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "65"
            },
            {
                "name": "GANTT_SCALE_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "76"
            },
            {
                "name": "GANTT_SCALES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<GanttScaleService>(\n  'gantt.scales',\n)"
            },
            {
                "name": "GANTT_SCROLL_BAR_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "GANTT_TIMELINE_MIN_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "500"
            },
            {
                "name": "GanttProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  GanttService,\n  {\n    provide: GANTT,\n    useFactory: () => Gantt.getGanttInstance(),\n  },\n]"
            },
            {
                "name": "GanttTimelineMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n}"
            },
            {
                "name": "HOURS_IN_DAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "24"
            },
            {
                "name": "HttpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/interceptors/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider[]",
                "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: SessionRecoveryInterceptor,\n    multi: true,\n  },\n]"
            },
            {
                "name": "INPUT_MIN_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "50"
            },
            {
                "name": "ITEM_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "38"
            },
            {
                "name": "KEBAB_SVG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/theme/services/icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.875 16.875C11.875 16.5042 11.765 16.1416 11.559 15.8333C11.353 15.525 11.0601 15.2846 10.7175 15.1427C10.3749 15.0008 9.99792 14.9637 9.63421 15.036C9.27049 15.1084 8.9364 15.287 8.67418 15.5492C8.41195 15.8114 8.23338 16.1455 8.16103 16.5092C8.08868 16.8729 8.12581 17.2499 8.26773 17.5925C8.40964 17.9351 8.64996 18.228 8.95831 18.434C9.26665 18.64 9.62916 18.75 10 18.75C10.4973 18.75 10.9742 18.5525 11.3258 18.2008C11.6775 17.8492 11.875 17.3723 11.875 16.875ZM11.875 10C11.875 9.62916 11.765 9.26665 11.559 8.95831C11.353 8.64996 11.0601 8.40964 10.7175 8.26773C10.3749 8.12581 9.99792 8.08868 9.63421 8.16103C9.27049 8.23338 8.9364 8.41195 8.67418 8.67418C8.41195 8.9364 8.23338 9.27049 8.16103 9.63421C8.08868 9.99792 8.12581 10.3749 8.26773 10.7175C8.40964 11.0601 8.64996 11.353 8.95831 11.559C9.26665 11.765 9.62916 11.875 10 11.875C10.4973 11.875 10.9742 11.6775 11.3258 11.3258C11.6775 10.9742 11.875 10.4973 11.875 10ZM11.559 2.08331C11.765 2.39165 11.875 2.75416 11.875 3.125C11.875 3.62228 11.6775 4.0992 11.3258 4.45083C10.9742 4.80246 10.4973 5 10 5C9.62916 5 9.26665 4.89003 8.95831 4.684C8.64996 4.47798 8.40964 4.18514 8.26773 3.84253C8.12581 3.49992 8.08868 3.12292 8.16103 2.75921C8.23338 2.39549 8.41195 2.0614 8.67418 1.79918C8.9364 1.53695 9.27049 1.35838 9.63421 1.28603C9.99792 1.21368 10.3749 1.25081 10.7175 1.39273C11.0601 1.53464 11.353 1.77496 11.559 2.08331Z\" fill=\"#676B74\"/>\n</svg>`"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "MAX_ALLOCATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  title: 'Examples/LoginPage',\n  component: LoginPageComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [CommonModule,AuthModule,ThemeModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            /* Mock ActivatedRoute data here if needed */\n           },\n        },\n        {\n          provide: Location,\n          useValue: {\n            /* Mock Location methods here if needed */\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            /* Mock AuthService methods here if needed */\n          },\n        },\n      ], // You may need to import necessary modules\n    }),\n  ],\n} as Meta"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  title: 'Components/Login',\n  component: LoginComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [ThemeModule, NbThemeModule.forRoot()],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            /* Mock ActivatedRoute data here if needed */\n           },\n        },\n        {\n          provide: Location,\n          useValue: {\n            /* Mock Location methods here if needed */\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            /* Mock AuthService methods here if needed */\n          },\n        },\n      ],\n    }),\n  ],\n} as Meta"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  title: 'Examples/HomePage', // Set the title for your component\n  component: MainComponent, // Specify the component\n  decorators: [\n    moduleMetadata({\n      declarations: [], // Declare your component\n      imports: [\n        NbLayoutModule,\n        NbThemeModule.forRoot(),\n        NbActionsModule,\n        NbSidebarModule,\n        NbMenuModule.forRoot(),\n        NbUserModule,\n        NbContextMenuModule,\n        ThemeModule,\n        MainRoutingModule,\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        },\n        {\n          provide: NbSidebarService,\n          useClass: NbSidebarServiceMock,\n        },\n        {\n          provide: AuthService,\n          useClass: AuthServiceMock,\n        },\n\n        {\n          provide: NbMenuService,\n          useClass: MenuServiceMock,\n        },\n\n        {\n          provide: IconPacksManagerService,\n          useValue: {\n            registerSvgs: () => {},\n          },\n        },\n        NbThemeService,\n      ],\n    }),\n  ],\n} as Meta"
            },
            {
                "name": "MIN_VISIBLE_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "mockTranslateService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  use: () => {},\n  setDefaultLang: () => {},\n  get: (key) => of(key), // Provide a simple mock translation function\n}"
            },
            {
                "name": "MONTHS_IN_QUARTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3"
            },
            {
                "name": "NoDescription",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ONE_DAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ONE_HOUR * HOURS_IN_DAY"
            },
            {
                "name": "ONE_HOUR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ONE_MIN * SIXTY"
            },
            {
                "name": "ONE_MIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ONE_SEC * SIXTY"
            },
            {
                "name": "ONE_SEC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1000"
            },
            {
                "name": "panelConfigs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  [PanelType.Autocomplete]: {\n    width: 0,\n    height: 0,\n    state: SelectState.Closed,\n    list: [],\n    removal: false,\n    allowInput: true,\n  },\n  [PanelType.Extra]: {\n    width: 0,\n    height: 0,\n    state: SelectState.Closed,\n    list: [],\n    removal: true,\n    allowInput: false,\n  },\n}"
            },
            {
                "name": "PERCENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100"
            },
            {
                "name": "PLACEHOLDER_ITEM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ADD_ROW_ITEM'"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: {argTypesRegex: '^on[A-Z].*'},\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "RANDOM_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "36"
            },
            {
                "name": "RegExValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants/regex.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  AlphabetRequired: /^.*[a-zA-Z]+.*$/,\n  NumbersOnly: /^\\d*$/,\n}"
            },
            {
                "name": "requiredMetadataKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Symbol('required')"
            },
            {
                "name": "RESIZER_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "rotateAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('rotate', [\n  state(\n    'closed',\n    style({\n      transform: 'rotate(0deg)',\n    })\n  ),\n  state(\n    'open',\n    style({\n      transform: 'rotate(180deg)',\n    })\n  ),\n  transition('* => *', [animate('0.3s')]),\n])"
            },
            {
                "name": "SEARCH_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "48"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SIXTY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SUFFIX_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "24"
            },
            {
                "name": "TAG_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "4"
            },
            {
                "name": "TAG_PADDING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: ListComponent<any, any, any, any>) => ({\n  component: ListComponent,\n  moduleMetadata: {\n    imports: [NbFormFieldModule, NbListModule], // Import any necessary modules\n  },\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends AnyObject>(args:GanttBarsComponent<T>) => ({\n    component: GanttBarsComponent,\n    props: args,\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends AnyObject>(args: GanttColumnComponent<T>) => ({\n  component: GanttColumnComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: GanttHeaderComponent) => ({\n    component: GanttHeaderComponent,\n    moduleMetadata: {\n      imports: [\n        ThemeModule,\n        NbThemeModule.forRoot(), // Add this line to enable Nebular styles\n      ],\n      providers: [NbStatusService],\n    },\n    props: args,\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: GanttTooltipComponent) => ({\n  component: GanttTooltipComponent,\n  props: args,\n})"
            },
            {
                "name": "themeModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/theme/theme.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NbLayoutModule,\n  NbSidebarModule,\n  NbCardModule,\n  NbEvaIconsModule,\n  NbIconModule,\n  NbAlertModule,\n  NbInputModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbOptionModule,\n  NbListModule,\n  NbOptionModule,\n  NbActionsModule,\n  NbUserModule,\n  NbMenuModule,\n  NbContextMenuModule,\n  NbRouteTabsetModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  FormsModule,\n  ReactiveFormsModule,\n  NbSelectModule,\n  NbDatepickerModule,\n  NbTabsetModule,\n  NbDateFnsDateModule,\n  NbToggleModule,\n  TranslateModule,\n  NbSpinnerModule,\n]"
            },
            {
                "name": "timeout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "4000"
            },
            {
                "name": "TOASTER_SERVICE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/lib/core/toaster/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<IToaster>(\n  'Identifier for ToasterService class'\n)"
            },
            {
                "name": "WithAnImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: '/images/auth/angular.png',\n      altText: 'my image',\n    },\n  }),\n}"
            },
            {
                "name": "WithAnImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: '/images/auth/angular.png',\n      altText: 'my image',\n    },\n  }),\n}"
            }
        ],
        "functions": [
            {
                "name": "hasSubAllocation",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "item",
                        "type": "GanttTaskValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GanttTaskValueWithSubAllocation<T>",
                "jsdoctags": [
                    {
                        "name": "item",
                        "type": "GanttTaskValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "httpLoaderFactory",
                "file": "projects/arc-lib/src/lib/core/localization/localization.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isHTMLELement",
                "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "EventTarget",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "HTMLElement",
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "EventTarget",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "required",
                "file": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A property decorator that can be used to mark properties in a model as required\nValidate class decorator can be applied to class for required validation check</p>\n",
                "args": []
            },
            {
                "name": "validate",
                "file": "projects/arc-lib/src/lib/core/decorators/validate.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A class decorator to be used with parameterised constructors\nto validate the property constraints</p>\n",
                "args": []
            },
            {
                "name": "withSuballocations",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "task",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GanttTaskValueWithSubAllocation<T>",
                "jsdoctags": [
                    {
                        "name": "task",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Condition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 197
            },
            {
                "name": "ContextItemClickEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ContextItemFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CustomMouseEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Fields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 197
            },
            {
                "name": "GanttAllocationFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "GanttEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "GanttLib",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "GanttRenderOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "GanttScaleOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "GanttScaleService",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "GanttTaskValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "GanttTaskValueWithAllocation<T> | GanttTaskValueWithSubAllocation<T>",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p><code>GanttTaskValue</code> is a type that represents a task in the Gantt chart.</p>\n<p>The <code>GanttTaskValue</code> type is a generic type, which means that it can be used to represent a task\nwith any type of payload.</p>\n<p>The <code>GanttTaskValue</code> type has the following properties:</p>\n",
                "kind": 189
            },
            {
                "name": "HttpObserve",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"body\" | \"events\" | \"response\"",
                "file": "projects/arc-lib/src/lib/core/api/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "IBarComponent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "IColumnComponent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ItemTemplate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "KeyOf",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exclude<Extract<MT, string> | Operators>",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Operators",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"eq\" | \"neq\" | \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"inq\" | \"nin\" | \"between\" | \"exists\" | \"and\" | \"or\" | \"like\" | \"nlike\" | \"ilike\" | \"nilike\" | \"regexp\"",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Panel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "PredicateComparison",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ResizeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/arc-lib/src/lib/components/resize/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ResponseType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                "file": "projects/arc-lib/src/lib/core/api/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ShortHandEqualType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number | boolean | Date",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "projects/arc-lib/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "projects/arc-lib/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "projects/arc-lib/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SubAllocation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | null",
                "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Where",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Condition<MT> | AndClause<MT> | OrClause<MT>",
                "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            }
        ],
        "enumerations": [
            {
                "name": "DIGITS",
                "childs": [
                    {
                        "name": "ZERO",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ONE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TWO",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "THREE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FOUR",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FIVE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SIX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SEVEN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EIGHT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "NINE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/constants.ts"
            },
            {
                "name": "GanttEventTypes",
                "childs": [
                    {
                        "name": "Kebab",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "kebab"
                    },
                    {
                        "name": "Expand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expand"
                    },
                    {
                        "name": "Name",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "name"
                    },
                    {
                        "name": "Sort",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort"
                    },
                    {
                        "name": "Bar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bar"
                    },
                    {
                        "name": "Tooltip",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tooltip"
                    },
                    {
                        "name": "Unknown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unknown"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/components/gantt/enum.ts"
            },
            {
                "name": "GanttScaleUnits",
                "childs": [
                    {
                        "name": "Day",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "day"
                    },
                    {
                        "name": "Week",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "week"
                    },
                    {
                        "name": "Month",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "month"
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "year"
                    },
                    {
                        "name": "Quarter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "quarter"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/components/gantt/enum.ts"
            },
            {
                "name": "LanguagePreferences",
                "childs": [
                    {
                        "name": "UserPreference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TenantPreference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EnvPreference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BrowserPreference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/localization/translation.service.ts"
            },
            {
                "name": "LanguageTranslation",
                "childs": [
                    {
                        "name": "ENGLISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "en"
                    },
                    {
                        "name": "SPANISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "es"
                    },
                    {
                        "name": "JAPANESE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ja"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/localization/language.enum.ts"
            },
            {
                "name": "OptionType",
                "childs": [
                    {
                        "name": "Selected",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "UnSelected",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/constants.ts"
            },
            {
                "name": "PanelType",
                "childs": [
                    {
                        "name": "Autocomplete",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Extra",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts"
            },
            {
                "name": "PermissionKey",
                "childs": [],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/enums/permission-key.enum.ts"
            },
            {
                "name": "SelectState",
                "childs": [
                    {
                        "name": "Open",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "open"
                    },
                    {
                        "name": "Closed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "closed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/components/selector/constants.ts"
            },
            {
                "name": "STATUS_CODE",
                "childs": [
                    {
                        "name": "OK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 200
                    },
                    {
                        "name": "CREATED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BAD_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 400
                    },
                    {
                        "name": "UNAUTHORIZED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FORBIDDEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 403
                    },
                    {
                        "name": "NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "METHOD_NOT_ALLOWED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CONFLICT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 409
                    },
                    {
                        "name": "PAYLOAD_TOO_LARGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 413
                    },
                    {
                        "name": "UNPROCESSABLE_ENTITY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 422
                    },
                    {
                        "name": "INTERNAL_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 500
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/api/error-code.ts"
            },
            {
                "name": "StoreKeys",
                "childs": [
                    {
                        "name": "ACCESS_TOKEN_KEY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "accessToken"
                    },
                    {
                        "name": "REFRESH_TOKEN_KEY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "refreshToken"
                    },
                    {
                        "name": "TOKEN_EXPIRY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tokenExpiry"
                    },
                    {
                        "name": "USER_KEY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user"
                    },
                    {
                        "name": "FILTERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "filters"
                    },
                    {
                        "name": "ENV_CONFIG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "envConfig"
                    },
                    {
                        "name": "LAST_ACCESSED_URL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lastAccessedUrl"
                    },
                    {
                        "name": "Delivery_Managers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "deliveryManagers"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/store/store-keys.enum.ts"
            },
            {
                "name": "Timelines",
                "childs": [
                    {
                        "name": "Weekly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Monthly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Quarterly",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/components/gantt/types.ts"
            },
            {
                "name": "ToasterPhysicalPosition",
                "childs": [
                    {
                        "name": "TOP_RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top-right"
                    },
                    {
                        "name": "TOP_LEFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top-left"
                    },
                    {
                        "name": "BOTTOM_RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom-right"
                    },
                    {
                        "name": "BOTTOM_LEFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom-left"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/arc-lib/src/lib/core/toaster/types.ts"
            }
        ],
        "groupedVariables": {
            "projects/arc-lib/src/lib/core/api/adapters/index.ts": [
                {
                    "name": "Adapters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/api/adapters/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AnyAdapter, CountAdapter, NameIdAdapter]"
                }
            ],
            "projects/arc-lib/src/lib/app-config/index.ts": [
                {
                    "name": "APP_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/app-config/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Application config')"
                }
            ],
            "projects/arc-lib/src/lib/core/store/keys.ts": [
                {
                    "name": "APP_IN_MEMORY_STORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<InMemoryStorageService>(\n  'APP_IN_MEMORY_STORE'\n)"
                },
                {
                    "name": "APP_SESSION_STORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<StorageService>(\n  'APP_SESSION_STORE'\n)"
                },
                {
                    "name": "APPLICATION_STORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/store/keys.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<StorageService>(\n  'APPLICATION_STORE'\n)"
                }
            ],
            "projects/arc-lib/src/lib/core/constants.ts": [
                {
                    "name": "AuthTokenSkipHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'X-Skip-Auth-Token'"
                },
                {
                    "name": "ErrToastSkipHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'X-Skip-Error-Toast'"
                },
                {
                    "name": "HOURS_IN_DAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "24"
                },
                {
                    "name": "MAX_ALLOCATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "8"
                },
                {
                    "name": "ONE_DAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ONE_HOUR * HOURS_IN_DAY"
                },
                {
                    "name": "ONE_HOUR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ONE_MIN * SIXTY"
                },
                {
                    "name": "ONE_MIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ONE_SEC * SIXTY"
                },
                {
                    "name": "ONE_SEC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1000"
                },
                {
                    "name": "PERCENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100"
                },
                {
                    "name": "SIXTY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/const.ts": [
                {
                    "name": "BUFFER_FOR_TODAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "GANTT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<GanttLib>('gantt.lib')"
                },
                {
                    "name": "GANTT_BAR_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "30"
                },
                {
                    "name": "GANTT_COLUMN_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "300"
                },
                {
                    "name": "GANTT_ROW_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "65"
                },
                {
                    "name": "GANTT_SCALE_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "76"
                },
                {
                    "name": "GANTT_SCALES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<GanttScaleService>(\n  'gantt.scales',\n)"
                },
                {
                    "name": "GANTT_SCROLL_BAR_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "GANTT_TIMELINE_MIN_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "500"
                },
                {
                    "name": "GanttProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  GanttService,\n  {\n    provide: GANTT,\n    useFactory: () => Gantt.getGanttInstance(),\n  },\n]"
                },
                {
                    "name": "MONTHS_IN_QUARTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3"
                },
                {
                    "name": "RANDOM_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "36"
                },
                {
                    "name": "RESIZER_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                }
            ],
            "projects/arc-lib/src/stories/components/List.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: ListComponent<any, any, any, any>) => ({\n  component: ListComponent,\n  moduleMetadata: {\n    imports: [NbFormFieldModule, NbListModule], // Import any necessary modules\n  },\n  props: args,\n})"
                }
            ],
            "projects/arc-lib/src/stories/components/ganttBar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockTranslateService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  use: () => {},\n  setDefaultLang: () => {},\n  get: (key) => of(key), // Provide a simple mock translation function\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends AnyObject>(args:GanttBarsComponent<T>) => ({\n    component: GanttBarsComponent,\n    props: args,\n  })"
                }
            ],
            "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends AnyObject>(args: GanttColumnComponent<T>) => ({\n  component: GanttColumnComponent,\n  props: args,\n})"
                }
            ],
            "projects/arc-lib/src/stories/components/ganttheader.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoDescription",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: GanttHeaderComponent) => ({\n    component: GanttHeaderComponent,\n    moduleMetadata: {\n      imports: [\n        ThemeModule,\n        NbThemeModule.forRoot(), // Add this line to enable Nebular styles\n      ],\n      providers: [NbStatusService],\n    },\n    props: args,\n  })"
                }
            ],
            "projects/arc-lib/src/stories/components/main.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: 'assets/images/Illustration.svg',\n      altText: 'my image',\n    },\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  title: 'Examples/HomePage', // Set the title for your component\n  component: MainComponent, // Specify the component\n  decorators: [\n    moduleMetadata({\n      declarations: [], // Declare your component\n      imports: [\n        NbLayoutModule,\n        NbThemeModule.forRoot(),\n        NbActionsModule,\n        NbSidebarModule,\n        NbMenuModule.forRoot(),\n        NbUserModule,\n        NbContextMenuModule,\n        ThemeModule,\n        MainRoutingModule,\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        },\n        {\n          provide: NbSidebarService,\n          useClass: NbSidebarServiceMock,\n        },\n        {\n          provide: AuthService,\n          useClass: AuthServiceMock,\n        },\n\n        {\n          provide: NbMenuService,\n          useClass: MenuServiceMock,\n        },\n\n        {\n          provide: IconPacksManagerService,\n          useValue: {\n            registerSvgs: () => {},\n          },\n        },\n        NbThemeService,\n      ],\n    }),\n  ],\n} as Meta"
                }
            ],
            "projects/arc-lib/src/stories/components/select.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n    component: SelectComponent,\n    props: {\n      idField: 'id',\n      showIcon: true,\n      nameField: 'name',\n      disabledField: 'deleted',\n      placeholder: 'Select an option',\n      inputMinWidth: 200,\n      multiple: true,\n      options: [\n        { id: 1, name: 'Option 1', deleted: false },\n        { id: 2, name: 'Option 2', deleted: true },\n        {id :3, name:'Option 3'},\n        {id :4, name:'Option 4'}\n\n\n        // Add more options as needed\n      ],\n      showClearAll: true,\n      search: true,\n      disabled: true,\n      allowInput: true,\n      maxVisibleItems: 5,\n      addTagString: 'Create a new tag',\n      searchPlaceholder: 'Search options',\n      groupConfig: [],\n      selectOnEnter: true,\n    },\n  })"
                }
            ],
            "projects/arc-lib/src/stories/components/tooltip.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: GanttTooltipComponent) => ({\n  component: GanttTooltipComponent,\n  props: args,\n})"
                }
            ],
            "projects/arc-lib/src/lib/components/selector/animations.ts": [
                {
                    "name": "dropdownAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('dropdownPanel', [\n  state(\n    'void',\n    style({\n      opacity: 0,\n      transform: 'scaleY(0.6)',\n    })\n  ),\n  state(\n    'open',\n    style({\n      opacity: 1,\n      transform: 'scaleY(1)',\n    })\n  ),\n  transition('void => open', animate('80ms cubic-bezier(0, 0, 0.2, 1)')),\n  transition('open => void', animate('80ms cubic-bezier(0, 0, 0.2, 1)')),\n])"
                },
                {
                    "name": "rotateAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('rotate', [\n  state(\n    'closed',\n    style({\n      transform: 'rotate(0deg)',\n    })\n  ),\n  state(\n    'open',\n    style({\n      transform: 'rotate(180deg)',\n    })\n  ),\n  transition('* => *', [animate('0.3s')]),\n])"
                }
            ],
            "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts": [
                {
                    "name": "errorMsgConst",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'error.error.message.message'"
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/types.ts": [
                {
                    "name": "GanttTimelineMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\n  [Timelines.Weekly]: 'Weekly',\n  [Timelines.Monthly]: 'Monthly',\n  [Timelines.Quarterly]: 'Quarterly',\n  [Timelines.Custom]: 'Custom',\n}"
                }
            ],
            "projects/arc-lib/src/lib/core/interceptors/index.ts": [
                {
                    "name": "HttpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/interceptors/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider[]",
                    "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: SessionRecoveryInterceptor,\n    multi: true,\n  },\n]"
                }
            ],
            "projects/arc-lib/src/lib/components/selector/constants.ts": [
                {
                    "name": "INPUT_MIN_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "50"
                },
                {
                    "name": "ITEM_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "38"
                },
                {
                    "name": "MIN_VISIBLE_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "panelConfigs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  [PanelType.Autocomplete]: {\n    width: 0,\n    height: 0,\n    state: SelectState.Closed,\n    list: [],\n    removal: false,\n    allowInput: true,\n  },\n  [PanelType.Extra]: {\n    width: 0,\n    height: 0,\n    state: SelectState.Closed,\n    list: [],\n    removal: true,\n    allowInput: false,\n  },\n}"
                },
                {
                    "name": "PLACEHOLDER_ITEM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ADD_ROW_ITEM'"
                },
                {
                    "name": "SEARCH_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "48"
                },
                {
                    "name": "SUFFIX_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "24"
                },
                {
                    "name": "TAG_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "4"
                },
                {
                    "name": "TAG_PADDING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                }
            ],
            "projects/arc-lib/src/lib/theme/services/icons.ts": [
                {
                    "name": "KEBAB_SVG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/theme/services/icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.875 16.875C11.875 16.5042 11.765 16.1416 11.559 15.8333C11.353 15.525 11.0601 15.2846 10.7175 15.1427C10.3749 15.0008 9.99792 14.9637 9.63421 15.036C9.27049 15.1084 8.9364 15.287 8.67418 15.5492C8.41195 15.8114 8.23338 16.1455 8.16103 16.5092C8.08868 16.8729 8.12581 17.2499 8.26773 17.5925C8.40964 17.9351 8.64996 18.228 8.95831 18.434C9.26665 18.64 9.62916 18.75 10 18.75C10.4973 18.75 10.9742 18.5525 11.3258 18.2008C11.6775 17.8492 11.875 17.3723 11.875 16.875ZM11.875 10C11.875 9.62916 11.765 9.26665 11.559 8.95831C11.353 8.64996 11.0601 8.40964 10.7175 8.26773C10.3749 8.12581 9.99792 8.08868 9.63421 8.16103C9.27049 8.23338 8.9364 8.41195 8.67418 8.67418C8.41195 8.9364 8.23338 9.27049 8.16103 9.63421C8.08868 9.99792 8.12581 10.3749 8.26773 10.7175C8.40964 11.0601 8.64996 11.353 8.95831 11.559C9.26665 11.765 9.62916 11.875 10 11.875C10.4973 11.875 10.9742 11.6775 11.3258 11.3258C11.6775 10.9742 11.875 10.4973 11.875 10ZM11.559 2.08331C11.765 2.39165 11.875 2.75416 11.875 3.125C11.875 3.62228 11.6775 4.0992 11.3258 4.45083C10.9742 4.80246 10.4973 5 10 5C9.62916 5 9.26665 4.89003 8.95831 4.684C8.64996 4.47798 8.40964 4.18514 8.26773 3.84253C8.12581 3.49992 8.08868 3.12292 8.16103 2.75921C8.23338 2.39549 8.41195 2.0614 8.67418 1.79918C8.9364 1.53695 9.27049 1.35838 9.63421 1.28603C9.99792 1.21368 10.3749 1.25081 10.7175 1.39273C11.0601 1.53464 11.353 1.77496 11.559 2.08331Z\" fill=\"#676B74\"/>\n</svg>`"
                }
            ],
            "projects/arc-lib/src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "projects/arc-lib/src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/arc-lib/src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/arc-lib/src/stories/components/Login.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  title: 'Examples/LoginPage',\n  component: LoginPageComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [CommonModule,AuthModule,ThemeModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            /* Mock ActivatedRoute data here if needed */\n           },\n        },\n        {\n          provide: Location,\n          useValue: {\n            /* Mock Location methods here if needed */\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            /* Mock AuthService methods here if needed */\n          },\n        },\n      ], // You may need to import necessary modules\n    }),\n  ],\n} as Meta"
                },
                {
                    "name": "WithAnImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: '/images/auth/angular.png',\n      altText: 'my image',\n    },\n  }),\n}"
                }
            ],
            "projects/arc-lib/src/stories/components/LoginPage.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  title: 'Components/Login',\n  component: LoginComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [ThemeModule, NbThemeModule.forRoot()],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            /* Mock ActivatedRoute data here if needed */\n           },\n        },\n        {\n          provide: Location,\n          useValue: {\n            /* Mock Location methods here if needed */\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            /* Mock AuthService methods here if needed */\n          },\n        },\n      ],\n    }),\n  ],\n} as Meta"
                },
                {
                    "name": "WithAnImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      imageUrl: '/images/auth/angular.png',\n      altText: 'my image',\n    },\n  }),\n}"
                }
            ],
            "projects/arc-lib/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: {argTypesRegex: '^on[A-Z].*'},\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ],
            "projects/arc-lib/src/lib/core/constants/regex.constant.ts": [
                {
                    "name": "RegExValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/constants/regex.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  AlphabetRequired: /^.*[a-zA-Z]+.*$/,\n  NumbersOnly: /^\\d*$/,\n}"
                }
            ],
            "projects/arc-lib/src/lib/core/decorators/required.decorator.ts": [
                {
                    "name": "requiredMetadataKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Symbol('required')"
                }
            ],
            "projects/arc-lib/src/lib/theme/theme.module.ts": [
                {
                    "name": "themeModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/theme/theme.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NbLayoutModule,\n  NbSidebarModule,\n  NbCardModule,\n  NbEvaIconsModule,\n  NbIconModule,\n  NbAlertModule,\n  NbInputModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbOptionModule,\n  NbListModule,\n  NbOptionModule,\n  NbActionsModule,\n  NbUserModule,\n  NbMenuModule,\n  NbContextMenuModule,\n  NbRouteTabsetModule,\n  NbTooltipModule,\n  NbFormFieldModule,\n  FormsModule,\n  ReactiveFormsModule,\n  NbSelectModule,\n  NbDatepickerModule,\n  NbTabsetModule,\n  NbDateFnsDateModule,\n  NbToggleModule,\n  TranslateModule,\n  NbSpinnerModule,\n]"
                }
            ],
            "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts": [
                {
                    "name": "timeout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "4000"
                }
            ],
            "projects/arc-lib/src/lib/core/toaster/types.ts": [
                {
                    "name": "TOASTER_SERVICE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/arc-lib/src/lib/core/toaster/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<IToaster>(\n  'Identifier for ToasterService class'\n)"
                }
            ]
        },
        "groupedFunctions": {
            "projects/arc-lib/src/lib/components/gantt/types.ts": [
                {
                    "name": "hasSubAllocation",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "item",
                            "type": "GanttTaskValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GanttTaskValueWithSubAllocation<T>",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "GanttTaskValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withSuballocations",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GanttTaskValueWithSubAllocation<T>",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/arc-lib/src/lib/core/localization/localization.module.ts": [
                {
                    "name": "httpLoaderFactory",
                    "file": "projects/arc-lib/src/lib/core/localization/localization.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/const.ts": [
                {
                    "name": "isHTMLELement",
                    "file": "projects/arc-lib/src/lib/components/gantt/const.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "type": "EventTarget",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "HTMLElement",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "EventTarget",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/arc-lib/src/lib/core/decorators/required.decorator.ts": [
                {
                    "name": "required",
                    "file": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A property decorator that can be used to mark properties in a model as required\nValidate class decorator can be applied to class for required validation check</p>\n",
                    "args": []
                }
            ],
            "projects/arc-lib/src/lib/core/decorators/validate.decorator.ts": [
                {
                    "name": "validate",
                    "file": "projects/arc-lib/src/lib/core/decorators/validate.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A class decorator to be used with parameterised constructors\nto validate the property constraints</p>\n",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "projects/arc-lib/src/lib/core/constants.ts": [
                {
                    "name": "DIGITS",
                    "childs": [
                        {
                            "name": "ZERO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ONE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TWO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "THREE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FOUR",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FIVE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SIX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SEVEN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EIGHT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "NINE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/constants.ts"
                },
                {
                    "name": "OptionType",
                    "childs": [
                        {
                            "name": "Selected",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "UnSelected",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/constants.ts"
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/enum.ts": [
                {
                    "name": "GanttEventTypes",
                    "childs": [
                        {
                            "name": "Kebab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "kebab"
                        },
                        {
                            "name": "Expand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expand"
                        },
                        {
                            "name": "Name",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "name"
                        },
                        {
                            "name": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort"
                        },
                        {
                            "name": "Bar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bar"
                        },
                        {
                            "name": "Tooltip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tooltip"
                        },
                        {
                            "name": "Unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unknown"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/components/gantt/enum.ts"
                },
                {
                    "name": "GanttScaleUnits",
                    "childs": [
                        {
                            "name": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "day"
                        },
                        {
                            "name": "Week",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "week"
                        },
                        {
                            "name": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "month"
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "year"
                        },
                        {
                            "name": "Quarter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "quarter"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/components/gantt/enum.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/localization/translation.service.ts": [
                {
                    "name": "LanguagePreferences",
                    "childs": [
                        {
                            "name": "UserPreference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TenantPreference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EnvPreference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BrowserPreference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/localization/translation.service.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/localization/language.enum.ts": [
                {
                    "name": "LanguageTranslation",
                    "childs": [
                        {
                            "name": "ENGLISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "en"
                        },
                        {
                            "name": "SPANISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "es"
                        },
                        {
                            "name": "JAPANESE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ja"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/localization/language.enum.ts"
                }
            ],
            "projects/arc-lib/src/lib/components/selector/constants.ts": [
                {
                    "name": "PanelType",
                    "childs": [
                        {
                            "name": "Autocomplete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Extra",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts"
                },
                {
                    "name": "SelectState",
                    "childs": [
                        {
                            "name": "Open",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "open"
                        },
                        {
                            "name": "Closed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "closed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/components/selector/constants.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/enums/permission-key.enum.ts": [
                {
                    "name": "PermissionKey",
                    "childs": [],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/enums/permission-key.enum.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/api/error-code.ts": [
                {
                    "name": "STATUS_CODE",
                    "childs": [
                        {
                            "name": "OK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 200
                        },
                        {
                            "name": "CREATED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BAD_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 400
                        },
                        {
                            "name": "UNAUTHORIZED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FORBIDDEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 403
                        },
                        {
                            "name": "NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "METHOD_NOT_ALLOWED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CONFLICT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 409
                        },
                        {
                            "name": "PAYLOAD_TOO_LARGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 413
                        },
                        {
                            "name": "UNPROCESSABLE_ENTITY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 422
                        },
                        {
                            "name": "INTERNAL_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 500
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/api/error-code.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/store/store-keys.enum.ts": [
                {
                    "name": "StoreKeys",
                    "childs": [
                        {
                            "name": "ACCESS_TOKEN_KEY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "accessToken"
                        },
                        {
                            "name": "REFRESH_TOKEN_KEY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "refreshToken"
                        },
                        {
                            "name": "TOKEN_EXPIRY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tokenExpiry"
                        },
                        {
                            "name": "USER_KEY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user"
                        },
                        {
                            "name": "FILTERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "filters"
                        },
                        {
                            "name": "ENV_CONFIG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "envConfig"
                        },
                        {
                            "name": "LAST_ACCESSED_URL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lastAccessedUrl"
                        },
                        {
                            "name": "Delivery_Managers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "deliveryManagers"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/store/store-keys.enum.ts"
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/types.ts": [
                {
                    "name": "Timelines",
                    "childs": [
                        {
                            "name": "Weekly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Monthly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Quarterly",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts"
                }
            ],
            "projects/arc-lib/src/lib/core/toaster/types.ts": [
                {
                    "name": "ToasterPhysicalPosition",
                    "childs": [
                        {
                            "name": "TOP_RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top-right"
                        },
                        {
                            "name": "TOP_LEFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top-left"
                        },
                        {
                            "name": "BOTTOM_RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom-right"
                        },
                        {
                            "name": "BOTTOM_LEFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom-left"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/arc-lib/src/lib/core/toaster/types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/arc-lib/src/lib/core/api/backend-filter.ts": [
                {
                    "name": "Condition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 197
                },
                {
                    "name": "Fields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 197
                },
                {
                    "name": "KeyOf",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exclude<Extract<MT, string> | Operators>",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "Operators",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"eq\" | \"neq\" | \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"inq\" | \"nin\" | \"between\" | \"exists\" | \"and\" | \"or\" | \"like\" | \"nlike\" | \"ilike\" | \"nilike\" | \"regexp\"",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "PredicateComparison",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ShortHandEqualType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number | boolean | Date",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "Where",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Condition<MT> | AndClause<MT> | OrClause<MT>",
                    "file": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/arc-lib/src/lib/components/gantt/types.ts": [
                {
                    "name": "ContextItemClickEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ContextItemFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CustomMouseEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttAllocationFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttLib",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "GanttRenderOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttScaleOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttScaleService",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "GanttTaskValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "GanttTaskValueWithAllocation<T> | GanttTaskValueWithSubAllocation<T>",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p><code>GanttTaskValue</code> is a type that represents a task in the Gantt chart.</p>\n<p>The <code>GanttTaskValue</code> type is a generic type, which means that it can be used to represent a task\nwith any type of payload.</p>\n<p>The <code>GanttTaskValue</code> type has the following properties:</p>\n",
                    "kind": 189
                },
                {
                    "name": "IBarComponent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "IColumnComponent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "SubAllocation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/arc-lib/src/lib/components/gantt/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "projects/arc-lib/src/lib/core/api/types.ts": [
                {
                    "name": "HttpObserve",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"body\" | \"events\" | \"response\"",
                    "file": "projects/arc-lib/src/lib/core/api/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "ResponseType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "file": "projects/arc-lib/src/lib/core/api/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/arc-lib/src/lib/components/selector/types.ts": [
                {
                    "name": "ItemTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Panel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | null",
                    "file": "projects/arc-lib/src/lib/components/selector/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/arc-lib/src/lib/components/resize/types.ts": [
                {
                    "name": "ResizeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/arc-lib/src/lib/components/resize/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/arc-lib/src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "projects/arc-lib/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/arc-lib/src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "projects/arc-lib/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/arc-lib/src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "projects/arc-lib/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/arc-lib/src/stories/components/Login.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/arc-lib/src/stories/components/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/arc-lib/src/stories/components/LoginPage.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/arc-lib/src/stories/components/main.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/arc-lib/src/stories/components/main.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/arc-lib/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/app-config/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/auth/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/auth/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/components/bb-gantt.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BbGanttComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/components/gantt-bars/gantt-bars.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GanttBarsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/components/gantt-column/gantt-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GanttColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/components/gantt-header/gantt-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GanttHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/components/gantt-tooltip/gantt-tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GanttTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isHTMLELement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUFFER_FOR_TODAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_BAR_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_COLUMN_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_ROW_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_SCALE_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_SCALES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_SCROLL_BAR_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GANTT_TIMELINE_MIN_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GanttProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONTHS_IN_QUARTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RANDOM_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESIZER_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/services/gantt.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GanttService",
                "coveragePercent": 20,
                "coverageCount": "6/29",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/monthly-scale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthlyScaleService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/quarterly-scale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuarterlyScaleService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/services/timeline-scales/weekly-scale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeeklyScaleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GanttAdapter",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseTaskValue",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GanttTaskValueWithAllocation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GanttTaskValueWithSubAllocation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hasSubAllocation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withSuballocations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/gantt/types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GanttTimelineMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/resize/resize.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResizeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/resize/resize.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResizeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rotateAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_MIN_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEM_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_VISIBLE_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "panelConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLACEHOLDER_ITEM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUFFIX_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TAG_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TAG_PADDING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 46,
                "coverageCount": "20/43",
                "status": "medium"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 39,
                "coverageCount": "35/89",
                "status": "medium"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/tests/select-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/components/selector/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/adapters/any-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AnyAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/adapters/count-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CountAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/adapters/i-adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/adapters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Adapters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/adapters/name-id-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NameIdAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AndClause",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnyObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BackendFilter",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Inclusion",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/backend-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrClause",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/del-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DelAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/get-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/get-list-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetListAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/i-command.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommand",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/patch-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PatchAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/post-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PostAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/commands/put-api.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PutAPICommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/i-api-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/models/count.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Count",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/models/name-id-required.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NameIdRequired",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/api/models/name-id.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NameId",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/adapters/logged-in-user-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggedInUserAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/adapters/login-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/forget-password.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ForgetPasswordCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/get-current-user.comand.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCurrentUserCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/get-token.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetTokenCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/google-login.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GoogleLoginCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/login.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/logout.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogoutCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/refresh-token.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RefreshTokenCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/reset-password.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetPasswordCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/commands/verify-reset-password-link.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "VerifyResetPasswordLinkCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/guards/logged-in.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedInGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/models/logged-in-user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggedInUserDM",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/models/login-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginResponseModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/models/login.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/auth/models/token-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TokenResponseModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/component-base.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ComponentBaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AuthTokenSkipHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrToastSkipHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOURS_IN_DAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_ALLOCATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ONE_DAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ONE_HOUR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ONE_MIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ONE_SEC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERCENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIXTY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/constants/regex.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegExValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "required",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/decorators/required.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requiredMetadataKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/decorators/validate.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "validate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/ensure-module-loaded-once.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnsureModuleLoadedOnce",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/i-any-object.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAnyObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorMsgConst",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/interceptors/session-recovery.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "SessionRecoveryInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/localization/localization.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "httpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/localization/translation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslationService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/route-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteComponentBaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/adapters/env-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EnvAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/commands/get-env.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetEnvCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/keys.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_IN_MEMORY_STORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/keys.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_SESSION_STORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/keys.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APPLICATION_STORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/system-store-facade.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemStoreFacadeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/store/user-session-store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserSessionStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/toaster/i-toaster.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToaster",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/toaster/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToasterConfig",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/core/toaster/types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOASTER_SERVICE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/services/icon-packs-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconPacksManagerService",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/services/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KEBAB_SVG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/theme.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "themeModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToasterAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/toaster/toaster-adapter.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timeout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/toaster/toaster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToasterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/lib/theme/toaster/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToasterConfigExt",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/List.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAnImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/LoginPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAnImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTranslateService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttcolumn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDescription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/ganttheader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/main.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/main.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/main.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NbSidebarServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/select.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/components/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/arc-lib/src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}